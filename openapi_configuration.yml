openapi: 3.0.3
servers: 
  - url: https://api.sensible.so/v0
    description: Production server (uses live data)
info:
  title: Configuration
  version: 0.0.1
  description: document types and configurations
  license: # TODO: fill in
    name: Sensible API
    url: https://www.TBD.org/licenses/LICENSE-2.0.html
paths:

  /document_types:
    get:
      operationId: list-document-types
      summary: Get all document types for this account
      description: Get all document types for this account
      tags:
      - Document type
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllDocumentTypes'
          description: List of document types for the current account
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'
    post:
      operationId: create-document-type
      summary: Create new document type
      description: Create a document type, including [validations](https://docs.sensible.so/docs/validate-extractions).
      tags:
      - Document type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDocumentType'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentType'
          description: List of document types for the current account
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'
  /document_types/{id}:
    parameters:
      - $ref: '#/components/parameters/DocumentTypeId'
    get:
      operationId: get-document-type
      summary: Get document type metadata
      description: Find the document type id using the `/document_types` endpoint.
      tags:
      - Document type
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentType'
          description: Identified document type
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: update-document-type
      summary: Update document type
      description: Replace an existing document type with new information.
      tags:
      - Document type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDocumentType'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentType'
          description: Identified document type
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: delete-document-type
      summary: Delete document type
      description: Delete a document type and its configurations. #todo: check
      tags:
      - Document type
      responses:
        204:
          description: successful deletion
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'
  /document_types/{id}/configurations:
    parameters:
      - $ref: '#/components/parameters/DocumentTypeId'
    get:
      operationId: list-configurations
      summary: List configurations in a document type
      description: List configurations in a document type.
      tags:
      - Configuration
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllConfigurations'
          description: List of document types for the current account
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'
    post:
      operationId: create-configuration
      summary: Create new configuration in a document type
      description: Pass the configuration as a string.
      tags:
      - Configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostConfiguration'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationResponse'
          description: The created configuration
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'
  /document_types/{id}/configurations/{name}:
    parameters:
      - $ref: '#/components/parameters/DocumentTypeId'
      - $ref: '#/components/parameters/ConfigurationName'
    get:
      operationId: get-configuration
      summary: Get configuration
      description: Get a configuration as a string.
      tags:
      - Configuration
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationResponse'
          description: The identified configuration
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: update-configuration
      summary: Update configuration
      description: Replace a published or draft version of the configuration.
      tags:
      - Configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutConfiguration'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationResponse'
          description: The created configuration
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: delete-configuration
      summary: Delete configuration
      description: Delete a configuration and its versions.
      tags:
      - Configuration
      responses:
        204:
          description: successful deletion
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'
  /document_types/{id}/configurations/{name}/versions:
    parameters:
      - $ref: '#/components/parameters/DocumentTypeId'
      - $ref: '#/components/parameters/ConfigurationName'
    get:
      operationId: get-configuration-versions
      summary: List versions for a configuration
      description: Get the version ids for a configuration.
      tags:
      - Configuration
      responses:
        200:
          description: Version information for the identified configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationVersionsResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'
  /document_types/{id}/configurations/{name}/{version}:
    parameters:
      - $ref: '#/components/parameters/DocumentTypeId'
      - $ref: '#/components/parameters/ConfigurationName'
      - $ref: '#/components/parameters/VersionIdentifier'
    get:
      operationId: get-configuration-by-version
      summary: Get configuration by version
      description: Get a configuration as a string by version id.
      tags:
      - Configuration
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationResponse'
          description: The identified configuration
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: publish-configuration-by-version
      summary: Publish configuration to an environment
      description: The configuration must be [valid](https://app.sensible.so/schemas/configuration.schema.json).
      tags:
      - Configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishConfigurationVersion'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationResponse'
          description: The identified configuration
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: delete-configuration-by-version
      summary: Delete draft or unpublish configuration
      description: >-
        Specify a version number in the `version` parameter to delete a draft version.
        If the configuration is published to an environment, then enter the environment name in the `version` parameter, for example, 
        `development`, to unpublish the configuration from that environment. 
        
      tags:
      - Configuration
      parameters:
        - $ref: '#/components/parameters/DocumentTypeId'
        - $ref: '#/components/parameters/ConfigurationName'
        - in: path
          name: version
          required: true
          description: >-
            if unpublishing a configuration from an environment, the name of the environment (`development`, `production`.)
            If deleting the current draft, the version number of the current draft.
          schema:
            type: string
      responses:
        204:
          description: successful deletion
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'

  /document_types/{id}/goldens:
    parameters:
      - $ref: '#/components/parameters/DocumentTypeId'
    get:
      operationId: list-reference-documents
      summary: List all reference documents in a document type
      description: List all reference documents in a document type
      tags:
      - Reference document
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllGoldens'
          description: List of reference documents for the current account
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'
    post:
      operationId: create-reference-document
      summary: Create new reference document
      description: >-
        Specify document metadata in the request, and get back an `upload_url` at which to put the PDF, 
        for example with `curl -T ./sample.pdf`.
      tags:
      - Reference document
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostGolden'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoldenResponse'
          description: The created reference document
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'
  /document_types/{id}/goldens/{name}:
    parameters:
      - $ref: '#/components/parameters/DocumentTypeId'
      - $ref: '#/components/parameters/DocumentName'
    get:
      operationId: get-reference-document
      summary: Get reference document metadata
      description: Get download URL and other metadata for a reference document.
      tags:
      - Reference document
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoldenResponse'
          description: The identified reference document
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: update-reference-document
      summary: Update metadata for a reference document
      description: Update metadata for a reference document
      tags:
      - Reference document
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutGolden'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoldenResponse'
          description: The updated reference document
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: delete-reference-document
      summary: Delete reference document
      description: Delete a reference document and break associations to any configs.
      tags:
      - Reference document
      responses:
        204:
          description: successful deletion
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'
  /document_types/{id}/goldens/{name}/configuration:
    parameters:
      - $ref: '#/components/parameters/DocumentTypeId'
      - $ref: '#/components/parameters/DocumentName'
    delete:
      operationId: delete-reference-document-association
      summary: Unassociate reference document from configuration
      description: Break the association between a reference document and its configuration. 
      tags:
      - Reference document
      responses:
        204:
          description: successful deletion
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'
  

components:
  parameters:
    DocumentTypeId: #do I really need this? get rid of it? 
      name: id
      required: true
      in: path
      description: unique document type identifier in v4 UUID format. Find IDs using the `/document_types` endpoint.
      schema:
        $ref: '#/components/schemas/UniqueId'
    ConfigurationName:
      name: name
      required: true
      in: path
      description: unique name for a configuration. Find it in the Sensible app or from the `/document_types/id/configurations` endpoint.
      example: anyco_auto_insurance_quote
      schema:
        $ref: '#/components/schemas/Name'
    DocumentName:
      name: name
      required: true
      in: path
      description: unique name for a document. Find it in the Sensible app or from the `/document_types/id/goldens` endpoint.
      example: best_scan_form_no_1234
      schema:
        $ref: '#/components/schemas/Name'
    VersionIdentifier:
      name: version
      required: true
      in: path
      description: unique identifier for a configuration version
      schema:
        type: string
  schemas:
    UniqueId:
      type: string
      format: uuid
      description: unique identifier
    Name:
      type: string
      pattern: ^[a-z0-9_]*$
      minLength: 3
      maxLength: 128
      description: user-friendly name
    Date:
      type: string
      format: date-time
      description: ISO-formatted date-time
    DocumentType:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        id:
          $ref: '#/components/schemas/UniqueId'
        created: 
          $ref: '#/components/schemas/Date'
        schema:
          $ref: '#/components/schemas/OutputSchema'
      required:
        - name
        - id
        - created
        - schema
      additionalProperties: false
    GetAllDocumentTypes:
      type: array
      items: 
        type: object
        properties:
          name:
            $ref: '#/components/schemas/Name'
          id:
            $ref: '#/components/schemas/UniqueId'
          #created: 
            #$ref: '#/components/schemas/Date'
        required:
          - name
          - id
          #- created
        additionalProperties: false
    PostDocumentType:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        schema:
          $ref: '#/components/schemas/OutputSchema'
      required:
        - name
        - schema
      additionalProperties: false  
    OutputSchema:
      type: object
      additionalProperties: false
      properties:
        fingerprint_mode:
          enum:
            - strict
            - fallback_to_all
          type: string
          default: fallback_to_all
        ocr_engine:
          enum:
            - microsoft
            - amazon
            - google
          type: string
          default: microsoft
        ocr_level:
          enum:
            - 0
            - 2
            - 4
          type: number
          default: 2
          description: |
            0: no OCR.
            2: Sensible averages the number of lines per page in the document, and if it's fewer than 10, 
            Sensible renders the first page to determine whether to run OCR on the whole document.
            4: Sensible always renders the first page to determine whether to run OCR on the whole document.
        validations:
          description: Array of validations. See https://docs.sensible.so/docs/validate-extractions 
          items:
            $ref: "#/components/schemas/DocumentValidation"
          type: array
    DocumentValidation:
      type: object
      additionalProperties: false
      description: See https://docs.sensible.so/docs/validate-extractions 
      properties:
        description:
          type: string
          description: user-friendly description for the test
          example: Broker's email is in string@string format
        condition:
          description: test for extraction written in JsonLogic
          example: {"match":[{"var":"broker\\.email.value"},"^\\S+\\@\\S+$"]}
          type: string
          # anyOf:
          #   - type: string
          #   - type: number
          #   - type: boolean
          #   - type: array
          #   - type: object
          # additionalProperties: true
        fields:
          type: array
          description: skip this test unless prerequisite fields are present (non-null)
          example: ["broker\\.email"]
          items:
            type: string
        severity:
          type: string
          description: The severity of the failing test
          enum:
            - warning
            - error
      required:
        - description
        - condition

    PutDocumentType:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        schema:
          $ref: '#/components/schemas/OutputSchema'
      additionalProperties: false
    GetAllGoldens:
      type: array
      items:
        $ref: '#/components/schemas/GoldenResponse'
    GoldenResponse:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        created: 
          $ref: '#/components/schemas/Date'
        configuration:
          $ref: '#/components/schemas/AssociatedConfigurationName'
        error:
          type: string
          description: Any errors that occurred processing the reference document
        upload_url:
          type: string
          description: if present, the URL to which a reference document can be PUT. 
        download_url:
          type: string
          description: if present, the URL to GET to retrieve the reference document
        thumbnail_url:
          type: string
          description: if present, the URL to GET to retrieve a thumbnail image of the first page of the reference document
      required:
        - name
        - created
      additionalProperties: false
    PostGolden:
      type: object
      description: The upload url for putting the document
      properties:
        name:
          $ref: '#/components/schemas/Name'
        configuration:
          $ref: '#/components/schemas/AssociatedConfigurationName'
      required:
        - name
      additionalProperties: false
    PutGolden:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        configuration:
          $ref: '#/components/schemas/AssociatedConfigurationName'
      additionalProperties: false

    AssociatedConfigurationName:
      type: string
      pattern: ^[a-z0-9_]*$
      minLength: 3
      maxLength: 128
      description: user-friendly name of the configuration to associate to the reference document
 
    GetAllConfigurations:
      type: array
      items:
        type: object
        properties:
          name:
            $ref: '#/components/schemas/Name'
          created: 
            $ref: '#/components/schemas/Date'
          versions:
            type: array
            items:
              $ref: '#/components/schemas/ConfigurationVersion'
        required:
          - name
          - created
          - versions
        additionalProperties: false  
    ConfigurationVersion:
      type: object
      properties:
        version_id:
          type: string
          example: fdE0LO4d2GftiGvPyeYbgpstRWyLrEdm  
        datetime:
          $ref: '#/components/schemas/Date'
        environments:
          type: array
          items:
            type: string
        draft:
          type: boolean
      required:
        - version_id
        - datetime
        - draft
      additionalProperties: false


    PostConfiguration:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        configuration:
          $ref: '#/components/schemas/StringifiedConfiguration'
          example: |
            { 	"fingerprint": { 		"tests": [ 			"anyco", 			"quoted coverage changes" 		] 	}, 	"preprocessors": [{ 		"type": "pageRange", 		"startPage": 0, 		"endPage": 2 	}], 	"fields": [{ 		"id": "_driver_name_raw", 		"anchor": "name of driver", 		"method": { 			"id": "label", 			"position": "below" 		} 	}], 	"computed_fields": [{ 			"id": "driver_name_last", 			"method": { 				"id": "split", 				"source_id": "_driver_name_raw", 				"separator": ", ", 				"index": 1 			} 		}  	] }
        publish_as:
          $ref: '#/components/schemas/Environment'
      required:
        - name
        - configuration
      additionalProperties: false
    StringifiedConfiguration:
      type: string
      description: >-
        JSON-stringified version of the configuration. 
        For example, test this parameter by creating and validating the configuration in the Sensible app, 
        then stringify it using a tool like https://onlinetexttools.com/json-stringify-text, then copy it into this parameter.
        To support publishing drafts, this API doesn’t reject requests with configuration errors.
        To validate, compare your configuration to the latest version of the configuration schema is published at https://app.sensible.so/schemas/configuration.schema.json.


    Environment:
      type: string
      enum: [production, development]
      default: production 
      minLength: 3
      maxLength: 128
      description: >-
        Destination environment for publication, as a target for later extraction.
        "production" is a special environment used as a default when no environment is specified during extraction.
        If you specify an environment, the configuration must be valid.  

    ConfigurationResponse:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        created: 
          $ref: '#/components/schemas/Date'
        configuration:
          $ref: '#/components/schemas/StringifiedConfiguration'
          example: |
            "{\r\n\t\"fingerprint\": {\r\n\t\t\"tests\": [\r\n\t\t\t\"anyco\",\r\n\t\t\t\"quoted coverage changes\"\r\n\t\t]\r\n\t},\r\n\t\"preprocessors\": [{\r\n\t\t\"type\": \"pageRange\",\r\n\t\t\"startPage\": 0,\r\n\t\t\"endPage\": 2\r\n\t}],\r\n\t\"fields\": [{\r\n\t\t\"id\": \"_driver_name_raw\",\r\n\t\t\"anchor\": \"name of driver\",\r\n\t\t\"method\": {\r\n\t\t\t\"id\": \"label\",\r\n\t\t\t\"position\": \"below\"\r\n\t\t}\r\n\t}],\r\n\t\"computed_fields\": [{\r\n\t\t\t\"id\": \"driver_name_last\",\r\n\t\t\t\"method\": {\r\n\t\t\t\t\"id\": \"split\",\r\n\t\t\t\t\"source_id\": \"_driver_name_raw\",\r\n\t\t\t\t\"separator\": \", \",\r\n\t\t\t\t\"index\": 1\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t]\r\n}"  
        version_id:
          type: string
        versions:
          type: array
          items:
            $ref: '#/components/schemas/ConfigurationVersion'
      required:
        - name
        - created
        - configuration
        - version_id
        - versions
      additionalProperties: false
    PutConfiguration:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        configuration:
          $ref: '#/components/schemas/StringifiedConfiguration'
          example: |
            { "fields": [{ 		"id": "updated_name_field", 		"anchor": "name of driver", 		"method": { 			"id": "label", 			"position": "below" 		} 	}], 	"computed_fields": [{ 			"id": "driver_name_last", 			"method": { 				"id": "split", 				"source_id": "_driver_name_raw", 				"separator": ", ", 				"index": 1 			} 		}  	] }
       
          
        publish_as:
          $ref: '#/components/schemas/Environment'
        current_draft:
          type: string
          description: >-
            version ID of the current draft of the configuration, if the current draft exists and is being replaced.
            if the configuration is currently in draft and this is not supplied or does not match, the operation will fail
      additionalProperties: false

    PublishConfigurationVersion:
      type: object
      properties:
        publish_as:
          $ref: '#/components/schemas/Environment'
      required:
        - publish_as
      additionalProperties: false
    ConfigurationVersionsResponse:
      type: object
      properties:
        versions:
          type: array
          items:
            $ref: '#/components/schemas/ConfigurationVersion'
      required:
        - versions
      additionalProperties: false
  responses:
    400:
      description: Bad Request
      content:
        text/plain:
          schema:
            title: Bad Request
            type: string
            example: >-
              Either a specific set of messages about fields in the request, or error messages like the following examples -
              Not available to logged in users
              To use the asynchronous flow you must have persistence enabled
              Specified document type does not exist
              Specified document type ${named type} does not exist
              No published configurations found for environment ${environment}
              Specified golden does not exist
              Specified configuration/version does not exist
              Specified configuration/version is not valid
              Must provide the Content-Type header when request body is present
              Content-Type must be application/json
              Missing request body or body.document
              Could not determine the content type of the document
              Could not determine the content type of the document. Please check that the document was correctly encoded as Base64
              This PDF is invalid. If you submitted this PDF using Base64 encoding, please check that the encoding is correct
              This PDF is password protected. Please resubmit with password protection disabled
              This PDF is empty
              This PDF exceeds the maximum dimensions for OCR of 17 x 17 inches
              This PDF exceeds the maximum size for OCR of 50MB
              No fingerprints match for this PDF and fingerprint_mode is set to strict
              Content type of ${found} does not match declared type of ${expected}
              Document is not present
    401:
      description: Not authorized
      content:
        text/plain:
          schema:
            title: Unauthorized
            type: string
            example: Unauthorized          
    404:
      description: Not Found
      content:
        text/plain:
          schema:
            title: Not Found
            type: string
    415:
      description: Unsupported Media Type
      content:
        text/plain:
          schema:
            title: Unsupported Media Type
            type: string
            example: >-
              Example error messages -
              Content-Type must be application/json
              Content-Type must be application/json or application/pdf or image/jpeg or image/png
    429:
      description: Too Many Requests
      content:
        text/plain:
          schema:
            title: Unsupported Media Type
            type: string
            example: >-
              Example error messages -
              Attempt limit exceeded, please retry after some time.
              Free accounts are limited to 150 API calls per month. Please upgrade your account to make additional calls.
              Pro accounts are limited to 5,000 API calls per month. Please upgrade your account to make additional calls.
    500:
      description: Internal Server Error
      content:
        text/plain:
          schema:
            title: Sensible encountered an unknown error
            type: string
            example: Sensible encountered an unknown error 
  securitySchemes:
    bearerAuth:       # arbitrary name for the security scheme
      type: http
      scheme: bearer
      description: >-
        Sensible uses API keys to authenticate requests. You should have received a key as a part of onboarding, 
        but if you're having trouble with your current key, please reach out to support@sensible.so. 
        Keep your API keys secure and do not share them publicly accessible areas such as GitHub, client-side code, etc.
        Authentication to the API is performed via Bearer Authentication. Provide your API key as the bearer auth value.
# Apply the auth globally to all operations
security:
  - bearerAuth: []