openapi: 3.0.3
servers: # TODO: fill in # LEFT OFF: need to proofread the endpoints against existing doc; remember unpublished endpoint don't delete it cause can't add it here...
  - url: https://api.sensible.so/v0
    description: Production server (uses live data)
info:
  title: Extraction
  version: 1.0.0
  license: # TODO: fill in
    name: Sensible API
    url: https://www.TBD.org/licenses/LICENSE-2.0.html
  description: Extract structured data from documents with the Sensible API. 
paths:
  /extract/{type}:
    post:
      operationId: extract_doc
      summary: Extract data from a document
      description: |
        Extract data from a local document synchronously. 
        For a step-by-step tutorial on calling this endpoint, 
        see [Try synchronous extraction](doc:api-tutorial-sync).
        
        There are two options for posting the PDF bytes.
          1. (often preferred) specify the non-encoded PDF bytes as the entire request body, 
          and specify the content-type as "application/pdf".   
          2. Base64 encode the PDF bytes, specify them in a body "document" field, and specify application/json for the content type. 
      parameters:
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/environment'         
      requestBody:
        description:  There are two options for posting the PDF bytes.
          1. (often preferred) specify the non-encoded PDF bytes as the entire request body, 
          and specify the content-type as "application/pdf".   
          2. Base64 encode the PDF bytes, specify them in a body "document" field, and specify application/json for the content type. 
        required: true
        content:
          application/pdf:
            schema:
              type: string
              format: binary

      tags:
      - document
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Extraction'
          description: the structured data extracted from the document and metadata
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'  
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'    
  /generate_upload_url/{type}:
    post:
      operationId: extract_doc_at_sensible_url
      summary: Extract doc at a Sensible URL
      description: |
        Extract data asynchronously from a document with the following steps. 
          1. Use this endpoint to generate a Sensible URL.
          2. PUT the PDF you want to extract data from at the URL, where `SENSIBLE_UPLOAD_URL` is the URL you received 
        from this endpoint's response.
        For example, `curl -T ./sample.pdf "SENSIBLE_UPLOAD_URL"`. 
        Note: the pre-signed upload_url does not support Base64 encoded PDFs. You PUT the PDF bytes directly to the endpoint 
        and must omit the content-type header.
          3.  To retrieve the extraction or poll its status, use the extraction `id` returned in the response to call the 
        GET documents/{id} endpoint.
        You must use this or other asynchronous endpoints for PDFs that are over 4.5MB in size or require over 30 seconds to process.
        For a step-by-step tutorial on calling this endpoint, see 
        [Try asynchronous extraction from a Sensible URL](https://docs.sensible.so/docs/api-tutorial-async-2).
       
      parameters:
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/environment' 
      
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateUrlRequest'
      tags:
      - document
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncUploadResponse'
          description: returns the upload_url at which to PUT the PDF for extraction 
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'  
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'  

  
  /extract_from_url/{type}:
    post:
      operationId: extract_doc_at_your_url
      summary: Extract doc at your URL 
      description: |
        Extract data asynchronously from a document at the specified `document_url`.<br/> 
        You must use this or other asynchronous endpoints for PDFs that are over 4.5MB in size or require over 30 seconds to process.
        Take the following steps. 
        1. Run this endpoint.
        2. To retrieve the extraction or poll its status, use the extraction `id` returned in the response to call the GET documents/{id} endpoint.
        For a step-by-step tutorial on calling this endpoint, 
        see [Try asynchronous extraction from your URL](doc:api-tutorial-async-1).
      parameters:
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/environment' 
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtractFromUrlRequest'
      tags:
      - document
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncResponse'
          description: returns the ID to use to retrieve the extraction 
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'  
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'  

  /generate_upload_url:
    post:
      operationId: extract_portfolio_at_sensible_url
      summary: Extract portfolio at a Sensible URL
      description:  |
        Use this endpoint with multiple documents that are packaged into one PDF file (a PDF "portfolio"). 
        Segments a PDF at the specified `document_url` into the specified document types (for example, 1099, w2, and bank_statement) 
        and then runs extractions asynchronously for each document Sensible finds in the PDF portfolio. Take the following steps.
        1. Run this endpoint.
        2. To retrieve the extraction results or poll status, use the extraction `id` returned in the response to call 
        the GET documents/{id} endpoint.
        For more about extracting from PDF portfolios, see [Extracting from document portfolios](doc:portfolio).
      parameters:
        - $ref: '#/components/parameters/environment' 
        
      
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioRequest'
                # PortfolioRequest
      tags:
      - portfolio
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncUploadResponse'
          description: returns the upload_url at which to PUT the PDF for extraction 
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'  
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'           


  /documents/{id}:
    post:
      operationId: retrieve_extraction
      summary: Get extraction by id 
      description: |
        Use this endpoint in conjunction with asynchronous extraction requests to retrieve your results 
        (using the `id` field returned by asynchronous request). You can also use this endpoint to retrieve the results 
        for documents extractions from the synchronous /extract endpoint.
        To poll extraction status, check the `status` field in this endpoint's response. 
        When the extraction completes, the returned status is `COMPLETE` and the response includes results in the 
        `parsed_document` field.  For fields in the extraction for which Sensible couldn't find a value, Sensible returns null.
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/environment' 
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtractFromUrlRequest'
      tags:
      - document
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtractionAsyncResult'
          description: returns the extraction 
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'  
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'  

  /extract_from_url/:
    post:
      operationId: extract_portfolio_at_your_url
      summary: Extract portfolio at your URL 
      description:  |
        Use this endpoint with multiple documents that are packaged into one PDF file (a PDF "portfolio").
        Segments a PDF into the specified document types (for example, 1099, w2, and bank_statement) and then runs extractions 
        asynchronously for each document Sensible finds in the PDF portfolio.  Take the following steps -  
        1. Use this endpoint to generate a Sensible URL.
        2. PUT the PDF you want to extract data from at the URL, where `SENSIBLE_UPLOAD_URL` is the URL you received 
        from this endpoint's response. For example, `curl -T ./sample.pdf "SENSIBLE_UPLOAD_URL"`
        Note - the pre-signed upload_url does not support Base64 encoded PDFs. 
        You PUT the PDF bytes directly to the endpoint and must omit the content-type header.  
        3. To retrieve the extraction or poll its status, use the extraction `id` returned in 
        the response to call the GET documents/{id} endpoint.
        For more about extracting from PDF portfolios, see [Extracting from document portfolios](doc:portfolio).
      parameters:
        - $ref: '#/components/parameters/environment' 
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtractFromUrlRequest'
      tags:
      - portfolio
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncResponse'
          description: returns the ID to use to retrieve the extraction 
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'  
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'  

components:
  schemas:
    ClassificationSummary:
      type: object
      description:  |
            Metadata about how Sensible chose the config to use for this extraction.
            Sensible compares all configs in the document type, then chooses the best extraction using
            fingerprints, scores, or a combination of the two. 
            (When two extractions tie by score and fingerprints, Sensible chooses the 
            first configuration in alphabetic order).
            For more details, see [fingerprints](https://docs.sensible.so/docs/fingerprint#notes)
      properties:
        configuration:
          type: string
          example: anyco.json
          description: the config tested
        fingerprint_present:  
          type: integer
          example: 1
          description: number of this config's fingerprints that Sensible found in the document
        fingerprints:
          type: integer
          example: 1
          description: number of fingerprints defined in this config
        score:
          type: object  
          $ref: '#/components/schemas/Score'
    Score: 
      type: object
      properties:
        value:
          type: integer
          example: 17
          description: the score total is fields_present minus penalty points. In the absence of fingerprints, Sensible returns the extraction in the document type with the highest score.
        fields_present:
          type: integer
          example: 17
          description: number of non-null fields Sensible extracted from the document using this config   
        penalties:
          type: number
          example: 1.5
          description: errors are 1 penality point and warnings are 0.5 points. See the validations_summary for a breakdown.
    
    ParsedDocument:
      description: data extracted from the document, structured as an array of fields
      type: object
      example:
        weight:
          source: 0.0lbs
          value: 0
          unit: pounds
          type: weight
        distance:
          source: 193mi
          value: 193
          unit: miles
          type: distance
        load_number:
          type: string
          value: Wk91242
        carrier_email: null
        price:
          source: $695.00
          value: 695
          unit: $
          type: currency
        pickup_date: null  
    
    Validation:
      type: object
      properties:
        description:
          type: string
        severity: 
          type: string
        message:
          type: string
    Validations:
      description: which extracted fields failed validation rules you write in the Sensible app.
      type: array
      items:
        $ref: '#/components/schemas/Validation' 
      example:
        - description: load weight should be over 1 ton
          severity: warning
        - description: carrier email must be in format string@string
          severity: skipped
          message: Missing prerequisites - carrier_email
        
    ValidationsSummary:
      type: object
      properties:
        fields:
          type: integer
          description: the numbers of fields specified in the config to extract from the document
          example: 6
        fields_present:
          type: integer
          description: the actual number of non-null fields extracted from the document
          example: 4
        errors:
          type: number
          description: the number of errors in the extraction
          example: 0
        warnings:
          type: number
          description: the number of warnings in the extraction
          example: 1
        skipped:
          type: number
          description: the number of fields skipped in the extraction because a prerequisite field was null
          example: 1          
    PortfolioRequest:
      allOf:
        - $ref: '#/components/schemas/Webhook'
        - type: object
          properties:                
            types:      
              type: array
              description: Specifies the document types contained in the PDF portfolio.
              items:
                type: string 
              example: tax_returns, bank_statements, credit_reports
        

   
    Extraction:
      type: object
      properties:
        id: 
          $ref: '#/components/schemas/ExtractionId'  
        created:
          $ref: '#/components/schemas/ExtractionCreated' 
        type:
         $ref: '#/components/schemas/ExtractionType' 
        configuration:
          type: string
          description: the name of the config (SenseML query) used to extract the structured data. Sensible chooses the best config in the document type that fits the submitted document automatically 
          example: anyco_rate_confirmation
        status:
         $ref: '#/components/schemas/ExtractionStatus'  
        parsed_document:
          $ref: '#/components/schemas/ParsedDocument'  
        validations:
          $ref: '#/components/schemas/Validations'  
        validations_summary:
          $ref: '#/components/schemas/ValidationsSummary' 
        classification_summary:
          $ref: '#/components/schemas/ClassificationSummary' 
      
    ExtractionAsyncResult:
      allOf:
        - $ref: '#/components/schemas/Extraction'
        - type: object
          properties:
            download_url:
              type: string
              description: the URL of the PDF that was extracted from #question: true?
              example: https://sensible-so-document-type-bucket-dev-us-west-2.s3.us-west-2.amazonaws.com/sensible/fc3484c5-3f35-4129-bb29-0ad1291ee9f8/EXTRACTION/246a6f60-0e5b-11eb-b720-295a6fba723e.pdf?AWSAccessKeyId=REDACTED
    AsyncResponse:
      type: object
      properties:
        id: 
          $ref: '#/components/schemas/ExtractionId'  
        created:
          $ref: '#/components/schemas/ExtractionCreated' 
        type:
         $ref: '#/components/schemas/ExtractionType'
        status:
         $ref: '#/components/schemas/ExtractionStatus'  
    AsyncUploadResponse:
      type: object
      properties:
        id: 
          $ref: '#/components/schemas/ExtractionId'  
        created:
          $ref: '#/components/schemas/ExtractionCreated' 
        type:
         $ref: '#/components/schemas/ExtractionType'
        status:
         $ref: '#/components/schemas/ExtractionStatus' 
        upload_url:
         type: string
         format: url
         description: The URL at which to PUT the PDF bytes array for extraction. for example, curl -T ./sample.pdf "YOUR_UPLOAD_URL"
         example: https://sensible-so-utility-bucket-prod-us-west-2.s3.us-west-2.amazonaws.com/EXTRACTION_UPLOAD/sensible/fc3484c5-3f35-4129-bb29-0ad1291ee9f8/EXTRACTION/14d82783-c12b-4e70-b0ae-ca1ce35a9836.pdf?AWSAccessKeyId=REDACTED&Expires=1623861476&Signature=REDACTED&x-amz-security-token=REDACTED
          
    ExtractFromUrlRequest:
      type: object
      properties:
        webhook:
          $ref: '#/components/schemas/Webhook' 
        document_url:
          $ref: '#/components/schemas/DocumentUrl' 
    GenerateUrlRequest:
      type: object
      properties:
        webhook:
          $ref: '#/components/schemas/Webhook' 
    
    ExtractionId:
      type: string
      format: uuid
      description: unique ID for the extraction, used to retreive the extraction
      example: 246a6f60-0e5b-11eb-b720-295a6fba723e
    
    ExtractionCreated:
      type: string
      format: date
      description: date the extraction was created.  
    
    ExtractionType:
      type: string
      description: the name of the document type.
      example: rate_confirmation  
    ExtractionStatus:
      type: string
      description: the extraction status (WAITING, COMPLETE, FAILED)
      example: COMPLETE
    
    Webhook:
      type: object
      description: |
        Specifies to return extraction results to the defined webhook as soon as they're complete, 
        so you don't have to poll for results status. Sensible also calls this webhook on error.
      properties:
        url:
          type: string
          format: url
          description: the webhook destination. Sensible will POST to this URL when the extraction is complete.
          example: YOUR_WEBHOOK_URL
        payload:
          type: string
          description: Include info additional to the API response, for example a UUID for verification.
          example: info extra to the default extraction payload
    DocumentUrl:
      type: string
      format: url 
      description:  |
        URL that responds to a GET request with the bytes of the PDF to be extracted. 
        This URL must be either publicly accessible, or presigned with a security token as part of the URL path. 
        To check if the URL meets these criteria, open the URL with a web browser. 
        The browser must either render the PDF as a full-page view with no other data, or download the PDF, without prompting for authentication.
      example: https://github.com/sensible-hq/sensible-docs/raw/main/readme-sync/assets/v0/pdfs/auto_insurance_anyco.pdf
  responses: 

    401:
      description: Not authorized
      content:
        text/plain:
          schema:
            title: Unauthorized
            type: string
            example: Unauthorized
    400:
      description: Bad Request
      content:
        text/plain:
          schema:
            title: Bad Request
            type: string
            example: |
              One of the following error messages -
              Must specify a document type
              Specified document type does not exist
              Must provide the Content-Type header when request body is present
              Missing request body or body.document
              Body must be a valid JSON object
              This PDF is invalid. If you submitted this PDF using Base64 encoding, please check that the encoding is correct
              This PDF is empty
              This PDF exceeds the maximum dimensions for OCR of 17 x 17 inches
              This PDF exceeds the maximum size for OCR of 20MB
    415:
      description: Unsupported Media Type
      content:
        text/plain:
          schema:
            title: Unsupported Media Type
            type: string
            example: Content-Type must be application/json or application/pdf
    500:
      description: Internal Server Error
      content:
        text/plain:
          schema:
            title: Sensible encountered an unknown error
            type: string
            example: Sensible encountered an unknown error      
  parameters:
    id:
      name: id
      required: true
      in: path
      description: unique ID for the extraction, used to retreive the extraction
      schema:
        $ref: '#/components/schemas/ExtractionId' 
    type:
      name: type
      required: true
      in: path
      description: |
        The document type of the PDF to extract from. 
        Create the type in the Sensible app (for example, `rate_confirmation`, `certificate_of_insurance`, or `home_inspection_report`). 
        As a convenience, Sensible automatically detects the best-fit extraction from among the extraction queries ("configs") in the document type. 
        For example, if you create an `auto_insurance_quotes` type, you can add `carrier 1`, `carrier 2`, and 
        `carrier 3` configs to the type in the Sensible app so that you can extract data from all these carriers using the same 
        `type`, without specifying the carrier in the API request.
      schema:
        type: string
      example: policy_declaration

    environment:
      name: environment
      in: query
      description: |
        If you specify `development`, extracts preferentially using config versions 
        published to the development environment in the Sensible app. The extraction runs all configs in the doc type before 
        picking the best fit. For each config, falls back to production version if no development version of the config exists.
      schema:
        type: string
        enum: [production, development]
        default: production
     

            
      
  securitySchemes:
    bearerAuth:       # arbitrary name for the security scheme
      type: http
      scheme: bearer
      description: |
        Sensible uses API keys to authenticate requests. You should have received a key as a part of onboarding, 
        but if you're having trouble with your current key, please reach out to support@sensible.so. 
        Keep your API keys secure and do not share them publicly accessible areas such as GitHub, client-side code, etc.
        Authentication to the API is performed via Bearer Authentication. Provide your API key as the bearer auth value.
# Apply the auth globally to all operations
security:
  - bearerAuth: []
