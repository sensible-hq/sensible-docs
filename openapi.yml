openapi: 3.0.3
servers: # TODO: fill in
  - url: https://api.example.com/v1
    description: Production server (uses live data)
  - url: https://sandbox-api.example.com:8443/v1
    description: Sandbox server (uses test data)
info:
  title: Sensible API
  version: 1.0.0
  license: # TODO: fill in
    name: TBD
    url: https://www.TBD.org/licenses/LICENSE-2.0.html

  description: |
    Extract structured data from PDF documents with the Sensible API
paths:
  /v0/extract/{type}:
    post:
      operationId: extract_doc
      summary: extract structured data from a PDF submitted as bytes array
      description:
        Submits a document of a particular type (e.g., a rate confirmation, 
        certificate of insurance, or home inspection report) to Sensible. 
        Sensible will automatically detect which format your document is in. 
        Note that this automatic detection only works for supported formats. 
        As part of your onboarding you've received a list of document types 
        and document formats enabled on your account.
        For a step-by-step tutorial on calling this endpoint, 
        see [Try synchronous extraction](doc:api-tutorial-sync).
      parameters:
        - $ref: '#/components/parameters/type'
      tags:
      - extract-sync
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Extraction'
          description: the structured data extracted from the document and metadata
        '404':
          $ref: '#/components/responses/404'
  
  /v0/generate_upload_url/{type}:
    post:
      operationId: extract_doc_at_url
      summary: extract structured data from a PDF at a URL. 
      description:
       TBD
      parameters:
        - $ref: '#/components/parameters/type'
      
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
      tags:
      - extract-async
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Extraction'
          description: the structured data extracted from the document and metadata
        '404':
          $ref: '#/components/responses/404'



components:
  schemas:
    ParsedDocument:
      type: object
      example:
        weight:
          source: 0.0lbs
          value: 0
          unit: pounds
          type: weight
        distance:
          source: 193mi
          value: 193
          unit: miles
          type: distance
        load_number:
          type: string
          value: Wk91242
        carrier_email: null
        price:
          source: $695.00
          value: 695
          unit: $
          type: currency
        pickup_date: null  
    
    Validation:
      type: object
      properties:
        description:
          type: string
        severity: 
          type: string
        message:
          type: string
    Validations:
      type: array
      items:
        $ref: '#/components/schemas/Validation' 
      example:
        - description: load weight should be over 1 ton
          severity: warning
        - description: carrier email must be in format string@string
          severity: skipped
          message: Missing prerequisites - carrier_email
        
    ValidationsSummary:
      type: object
      properties:
        fields:
          type: integer
          description: the numbers of fields specified in the config to extract from the document
          example: 6
        fields_present:
          type: integer
          description: the actual number of non-null fields extracted from the document
          example: 4
        errors:
          type: number
          description: the number of errors in the extraction
          example: 0
        warnings:
          type: number
          description: the number of warnings in the extraction
          example: 1
        skipped:
          type: number
          description: the number of fields skipped in the extraction because a prerequisite field was null
          example: 1          
    Extraction:
      type: object
      properties:
        id: 
          $ref: '#/components/schemas/ExtractionId'  
        created:
          type: string
          format: date
          description: date the extraction was created.
        type:
          type: string
          description: the name of the document type.
          example: rate_confirmation
        configuration:
          type: string
          description: the name of the config (SenseML query) used to extract the structured data. Sensible chooses the best config in the document type that fits the submitted document automatically 
          example: anyco_rate_confirmation
        status:
          type: string
          description: the extraction status (WAITING, COMPLETE, FAILED)
          example: COMPLETE
        parsed_document:
          $ref: '#/components/schemas/ParsedDocument'  
        validations:
          $ref: '#/components/schemas/Validations'  
        validations_summary:
          $ref: '#/components/schemas/ValidationsSummary' 
    AsyncExtractionResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ExtractionId'  
    ExtractionId:
      type: string
      format: uuid
      description: unique ID for the extraction, used to retreive the extraction
      example: 246a6f60-0e5b-11eb-b720-295a6fba723e
      
    
    Webhook:
      type: object
      description: If you include this parameter, Sensible will call the defined webhook when your document is processed (your results will be in the parsed_document field of the request body). Sensible will also call this webhook on error, in which case parsed_document will have a single field, error, with a status and error message
      properties: 
        url:
          type: string
          format: url
          example: YOUR_WEBHOOK_URL
        payload:
          type: string
          example: some info you want to include in addition to the default extraction payload
  responses: 
    404:
      description: Not found response
      content:
        text/plain:
          schema:
            title: Not found
            type: string
            example: Not found
  parameters:
    type:
      name: type
      required: true
      in: path
      description: The type of document you want to extract data from, e.g., rate_confirmation, certificate_of_insurance, or home_inspection_report. Define this in the Sensible app.
      schema:
        type: string
      example: policy_declaration
    environment:
      name: environment
      in: query
      description: Parse doc preferentially using config versions published to the development environment in the Sensible app. For each config run in the extraction, falls back to production version if no development version exists.
      schema:
        type: string
      example: development

            
      
  securitySchemes:
    # tokenAuth:
      # type: apiKey
      # in: header
      # name: Authorization
      # description: Token-based authentication with required prefix "Token"
    ApiKeyAuth:        # arbitrary name for the security scheme
      type: apiKey
      in: header       # can be "header", "query" or "cookie"
      name: X-API-KEY  # name of the header, query parameter or cookie
      description: Send API Key as request header named X-API-Key
# Apply the API key globally to all operations
security:
  - ApiKeyAuth: []
