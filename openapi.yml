openapi: 3.0.3
servers: # TODO: fill in # LEFT OFF: need to proofread the endpoints against existing doc; remember unpublished endpoint don't delete it cause can't add it here...
  - url: https://api.sensible.so/v0
    description: Production server (uses live data)
info:
  title: Sensible API
  version: 1.0.0
  license: # TODO: fill in
    name: TBD
    url: https://www.TBD.org/licenses/LICENSE-2.0.html

  description: |
    Extract structured data from PDF documents with the Sensible API. If you have any questions, 
    please reach out to support@sensible.so and we'd be happy to help you out.<br/>
    Sensible provides both synchronous and asynchronous endpoints for you to extract data out of your documents.
    <br/>The majority of our users can use our /extract endpoint, 
    which takes a PDF file and returns extracted data synchronously.
    <br/> Use the asynchronous endpoints for PDFs that are greater than 4.5MB in size or that require over 30 seconds of processing time. 
    <br/>You have two options for asynchronously processing your PDF: extract a doc at a URL you provide, our upload the doc to 
    a Sensible URL.  
    <br/>You can then call the `retreive results` endpoint to get the results, 
    or specify a webhook for us to push the results to as soon as they're ready.
    If you're new to APIs, then check out our [API tutorial](doc:api-tutorial) for a step-by-step guide to calling Sensible endpoints. 
paths:
  /extract/{type}:
    post:
      operationId: extract_doc
      summary: extract structured data from a document submitted as bytes array
      description:
        Submits a document of a particular type (e.g., a rate confirmation, 
        certificate of insurance, or home inspection report) to Sensible. 
        Sensible automatically detects which format your document is in. 
        Note that this automatic detection only works for supported formats. 
        As part of your onboarding you've received a list of document types 
        and document formats enabled on your account.
        For a step-by-step tutorial on calling this endpoint, 
        see [Try synchronous extraction](doc:api-tutorial-sync).
        
        There are two options for posting the PDF bytes.
          1. (often preferred) specify the non-encoded PDF bytes as the entire request body, 
          and specify the content-type as "application/pdf".   
          2. Base64 encode the PDF bytes, specify them in a body "document" field, and specify application/json for the content type. 
      parameters:
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/environment'         
      requestBody:
        description:  There are two options for posting the PDF bytes.
          1. (often preferred) specify the non-encoded PDF bytes as the entire request body, 
          and specify the content-type as "application/pdf".   
          2. Base64 encode the PDF bytes, specify them in a body "document" field, and specify application/json for the content type. 
        required: true
        content:
          application/pdf:
            schema:
              type: string
              format: binary

      tags:
      - extract_sync
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Extraction'
          description: the structured data extracted from the document and metadata
        '404':
          $ref: '#/components/responses/404'
  
  /generate_upload_url/{type}:
    post:
      operationId: extract_doc_at_sensible_url
      summary: extract doc at a Sensible URL
      description: |
        You must use this endpoint or extract_from_url to parse PDFs are over 4.5MB or require over 30 seconds to process.<br/>
        Generates an upload URL for a document of a particular type (for example, a rate confirmation, certificate of insurance, 
        or home inspection report). <br/>After calling this endpoint, PUT the PDF file to the pre-signed upload_url endpoint, and then 
        you can retrieve the parsed data with the GET documents/{id} endpoint.<br/>  
        This sample curl command will upload a PDF to the upload_url:<br/>
        `curl -T ./sample.pdf "YOUR_UPLOAD_URL"`<br/>
        Note: the pre-signed upload_url does not support 
        Base64 encoded PDFs. You PUT the PDF bytes directly to the endpoint and must omit the content-type header.<br/>
        For a step-by-step tutorial on calling this endpoint, see 
        [Try asynchronous extraction from a Sensible URL](https://docs.sensible.so/docs/api-tutorial-async-2).
       
      parameters:
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/environment' 
      
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateUrlRequest'
      tags:
      - extract_async
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncUploadResponse'
          description: returns the upload_url at which to PUT the PDF for extraction 
        '404':
          $ref: '#/components/responses/404'

  
  /extract_from_url/{type}:
    post:
      operationId: extract_doc_at_your_url
      summary: extract doc at your URL 
      description: |
        Use this endpoint or other async endpoints to parse PDFs that are over 4.5MB or require over 30 seconds to process.<br/>
        Retrieves a document of a particular document type (for example, a rate confirmation, certificate of insurance, or 
        home inspection report) from the provided document_url and runs an extraction.
        <br/>After the extraction is complete, 
        or to check on its status, you can retrieve the parsed data with the GET documents/{id} endpoint. 
        <br/>For a step-by-step tutorial on calling this endpoint, see Try asynchronous extraction from your URL.
      parameters:
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/environment' 
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtractFromUrlRequest'
      tags:
      - extract_async
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncResponse'
          description: returns the ID to use to retrieve the extraction 
        '404':
          $ref: '#/components/responses/404'

  /generate_upload_url:
    post:
      operationId: extract_portfolio_at_sensible_url
      summary: extract portfolio at a Sensible URL
      description:
       TBD
      parameters:
        - $ref: '#/components/parameters/environment' 
        
      
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioRequest'
                # PortfolioRequest
      tags:
      - extract_portfolio
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncUploadResponse'
          description: returns the upload_url at which to PUT the PDF for extraction 
        '404':
          $ref: '#/components/responses/404'         


  /documents/{id}:
    post:
      operationId: retrieve_extraction
      summary: Get extraction by id 
      description: |
        Retrieves results from asynchronous extractions,
        using the id returned by the asynchronous request.<br/> 
        You can also use this endpoint to retrieve the results for documents parsed using the synchronous /extract endpoint.<br/>
        After Sensible processes the document, it marks status as  COMPLETE and returns the the parsed_document in the response. 
        For fields in the parsed document that Sensible couldn't find any value for, the result is null.
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/environment' 
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtractFromUrlRequest'
      tags:
      - retrieve_extraction
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtractionAsyncResult'
          description: returns the extraction 
        '404':
          $ref: '#/components/responses/404'

  /extract_from_url/:
    post:
      operationId: extract_portfolio_at_your_url
      summary: extract portfolio at your URL. 
      description:
       TBD
      parameters:
        - $ref: '#/components/parameters/environment' 
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtractFromUrlRequest'
      tags:
      - extract_portfolio
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncResponse'
          description: returns the ID to use to retrieve the extraction 
        '404':
          $ref: '#/components/responses/404'

components:
  schemas:
    ParsedDocument:
      type: object
      example:
        weight:
          source: 0.0lbs
          value: 0
          unit: pounds
          type: weight
        distance:
          source: 193mi
          value: 193
          unit: miles
          type: distance
        load_number:
          type: string
          value: Wk91242
        carrier_email: null
        price:
          source: $695.00
          value: 695
          unit: $
          type: currency
        pickup_date: null  
    
    Validation:
      type: object
      properties:
        description:
          type: string
        severity: 
          type: string
        message:
          type: string
    Validations:
      type: array
      items:
        $ref: '#/components/schemas/Validation' 
      example:
        - description: load weight should be over 1 ton
          severity: warning
        - description: carrier email must be in format string@string
          severity: skipped
          message: Missing prerequisites - carrier_email
        
    ValidationsSummary:
      type: object
      properties:
        fields:
          type: integer
          description: the numbers of fields specified in the config to extract from the document
          example: 6
        fields_present:
          type: integer
          description: the actual number of non-null fields extracted from the document
          example: 4
        errors:
          type: number
          description: the number of errors in the extraction
          example: 0
        warnings:
          type: number
          description: the number of warnings in the extraction
          example: 1
        skipped:
          type: number
          description: the number of fields skipped in the extraction because a prerequisite field was null
          example: 1          
    PortfolioRequest:
      allOf:
        - $ref: '#/components/schemas/Webhook'
        - type: object
          properties:                
            types:
              required: true
              description: Specifies the document types contained in the PDF portfolio.
              schema:
                type: array
                items:
                  type: string
                example: tax_returns, bank_statements, credit_reports
    Extraction:
      type: object
      properties:
        id: 
          $ref: '#/components/schemas/ExtractionId'  
        created:
          $ref: '#/components/schemas/ExtractionCreated' 
        type:
         $ref: '#/components/schemas/ExtractionType' 
        configuration:
          type: string
          description: the name of the config (SenseML query) used to extract the structured data. Sensible chooses the best config in the document type that fits the submitted document automatically 
          example: anyco_rate_confirmation
        status:
         $ref: '#/components/schemas/ExtractionStatus'  
        parsed_document:
          $ref: '#/components/schemas/ParsedDocument'  
        validations:
          $ref: '#/components/schemas/Validations'  
        validations_summary:
          $ref: '#/components/schemas/ValidationsSummary' 
    ExtractionAsyncResult:
      allOf:
        - $ref: '#/components/schemas/Extraction'
        - type: object
          properties:
            download_url:
              type: string
              description: the URL of the PDF that was extracted from #question: true?
              example: https://sensible-so-document-type-bucket-dev-us-west-2.s3.us-west-2.amazonaws.com/sensible/fc3484c5-3f35-4129-bb29-0ad1291ee9f8/EXTRACTION/246a6f60-0e5b-11eb-b720-295a6fba723e.pdf?AWSAccessKeyId=REDACTED
    AsyncResponse:
      type: object
      properties:
        id: 
          $ref: '#/components/schemas/ExtractionId'  
        created:
          $ref: '#/components/schemas/ExtractionCreated' 
        type:
         $ref: '#/components/schemas/ExtractionType'
        status:
         $ref: '#/components/schemas/ExtractionStatus'  
    AsyncUploadResponse:
      type: object
      properties:
        id: 
          $ref: '#/components/schemas/ExtractionId'  
        created:
          $ref: '#/components/schemas/ExtractionCreated' 
        type:
         $ref: '#/components/schemas/ExtractionType'
        status:
         $ref: '#/components/schemas/ExtractionStatus' 
        upload_url:
         type: string
         format: url
         description: The URL at which to PUT the PDF bytes array for extraction. for example, curl -T ./sample.pdf "YOUR_UPLOAD_URL"
         example: https://sensible-so-utility-bucket-prod-us-west-2.s3.us-west-2.amazonaws.com/EXTRACTION_UPLOAD/sensible/fc3484c5-3f35-4129-bb29-0ad1291ee9f8/EXTRACTION/14d82783-c12b-4e70-b0ae-ca1ce35a9836.pdf?AWSAccessKeyId=REDACTED&Expires=1623861476&Signature=REDACTED&x-amz-security-token=REDACTED
          
    ExtractFromUrlRequest:
      type: object
      properties:
        webhook:
          $ref: '#/components/schemas/Webhook' 
        document_url:
          $ref: '#/components/schemas/DocumentUrl' 
    GenerateUrlRequest:
      type: object
      properties:
        webhook:
          $ref: '#/components/schemas/Webhook' 
    
    ExtractionId:
      type: string
      format: uuid
      description: unique ID for the extraction, used to retreive the extraction
      example: 246a6f60-0e5b-11eb-b720-295a6fba723e
    
    ExtractionCreated:
      type: string
      format: date
      description: date the extraction was created.  
    
    ExtractionType:
      type: string
      description: the name of the document type.
      example: rate_confirmation  
    ExtractionStatus:
      type: string
      description: the extraction status (WAITING, COMPLETE, FAILED)
      example: COMPLETE
    
    Webhook:
      type: object
      description: |
        If you include this, Sensible calls the defined webhook when your document is processed 
        (your results will be in the parsed_document field of the request body). 
        Sensible also calls this webhook on error, in which case parsed_document has a single field, error, 
        with a status and error message.
      properties:
        url:
          type: string
          format: url
          description: the webhook destination
          example: YOUR_WEBHOOK_URL
        payload:
          type: string
          description: additional information to send to the webhook besides the API response
          example: info extra to the default extraction payload
    DocumentUrl:
      type: string
      format: url 
      description: A URL that responds to a GET request with the bytes of the PDF to be extracted. This URL must be either publicly accessible, or presigned with a security token as part of the URL path. To check if the URL meets these criteria, open the URL with a web browser. The browser must either render the PDF as a full-page view with no other data, or download the PDF, without prompting for authentication. # TODO: how to indicate this is required whereas webhook is not? 
      example: https://github.com/sensible-hq/sensible-docs/raw/main/readme-sync/assets/v0/pdfs/auto_insurance_anyco.pdf
  responses: 
    404:
      description: Not found response
      content:
        text/plain:
          schema:
            title: Not found
            type: string
            example: Not found
  parameters:
    id:
      name: id
      required: true
      in: path
      description: unique ID for the extraction, used to retreive the extraction
      schema:
        $ref: '#/components/schemas/ExtractionId' 
    type:
      name: type
      required: true
      in: path
      description: The type of document you want to extract data from, e.g., rate_confirmation, certificate_of_insurance, or home_inspection_report. Define this in the Sensible app.
      schema:
        type: string
      example: policy_declaration

    environment:
      name: environment
      in: query
      description: Parse doc preferentially using config versions published to the development environment in the Sensible app. For each config run in the extraction, falls back to production version if no development version exists.
      schema:
        type: string
      example: development

            
      
  securitySchemes:
    bearerAuth:       # arbitrary name for the security scheme
      type: http
      scheme: bearer
      description: |
        Sensible uses API keys to authenticate requests. You should have received a key as a part of onboarding, 
        but if you're having trouble with your current key, please reach out to support@sensible.so. 
        Keep your API keys secure and do not share them publicly accessible areas such as GitHub, client-side code, etc.
        Authentication to the API is performed via Bearer Authentication. Provide your API key as the bearer auth value.
# Apply the auth globally to all operations
security:
  - bearerAuth: []
