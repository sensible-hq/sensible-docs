{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"contents": "\n\nSearching 161 files for \"invoice\"\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\layout-based-extractions\\3000 - portfolio.md:\n    4  ---\n    5  \n    6: Sometimes a single file contains multiple documents (a \"portfolio\"). For example, a portfolio file can contain an invoice, a tax document, and a contract. \n    7  \n    8: Sensible recommends extracting each document in a portfolio using its own document type, so you can write [validations](doc:validate-extractions)  for each type. For example, use an \"income tax\" doc type and an \"invoice\" doc type, rather than creating a \"combined_tax_and_invoice\" doc type.\n    9  \n   10  To extract from a portfolio, take the following steps:\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\llm-based extractions\\instruct\\1000 - query-group-tips.md:\n    5  ---\n    6  \n    7: This Sensible Instruct method extracts individual facts in a document, such as the date of an invoice, the liability limit of an insurance policy, or the destination address of a shipping container delivery.\n    8  \n    9  Sensible recommends grouping queries together if they share [context](doc:query-group#notes).  Queries share context when data exists in the same location or region of a document, for example, on the same page. You can configure context using [Advanced prompt configuration](doc:prompt). \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\llm-based extractions\\instruct\\2000 - list-tips.md:\n    3  hidden: false\n    4  ---\n    5: This Sensible Instruct method extracts repeating data in a document based on your description of the listâ€™s overall contents and each individual item. Data such as the work history or skills on a resume, the vehicles on an auto insurance policy, or the line items on an invoice are best suited for this method. \n    6  \n    7  This method is an alternative to the [NLP Table](doc:table-tips) method, when the data you want can appear either as a table or as another layout. The List method can find data in paragraphs of free text or in more structured layouts, such as key/value pairs or tables.  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\3000 - llm-based-methods\\1000 - list.md:\n    3  hidden: false\n    4  ---\n    5: Extracts repeating data in a document, such as the work history or skills on a resume, the vehicles on an auto insurance policy, or the line items on an invoice. It can find these facts in paragraphs of free text or in more structured layouts, such as key/value pairs or tables. \n    6  \n    7  For tips on authoring this method in Sensible Instruct, see [List tips](doc:list-tips).\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\3000 - llm-based-methods\\1500 - query-group.md:\n    5  ---\n    6  \n    7: Extracts individual facts in a document, such as the date of an invoice, the liability limit of an insurance policy, or the destination address of a shipping container delivery. Sensible uses a large language model (LLM)  to find these facts in paragraphs of free text, or in more structured layouts, for example key/value pairs or tables. Create a query group to extract... <skipped 97 characters> ...\n    8  \n    9  For tips and troubleshooting, see [Query Group](doc:query-group-tips) extraction tips.\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\6700 - config-settings\\1000 - fingerprint.md:\n   15  | ------------------------------------------------------------ | ------------------------------------------------------------ |\n   16  | [standalone documents ](doc:fingerprint#standalone-documents) | Improve performance by testing for matching text in a document before running or skipping a config in a given document type. By skipping configs that fail a fingerprint, you can save processing time. This is relevant if a config contains computationally expensive operations like selective OCR, table recognition, or box recognition methods.<br/>To test for matching text at the field level instead of the document type level, specify field fallbacks. For more information, see [Field query object](doc:field-query-object). |\n   17: | [portfolios ](doc:fingerprint#portfolios)                    | A portfolio contains multiple documents combined into one file, such as an invoice, a contract, and a tax form. Sensible uses fingerprints to segment a portfolio into documents. Fingerprints test for matching text that characterizes first, last, or other pages for documents in the portfolio. For more information, see [Multi-document extraction](doc:portfolio). |\n   18  \n   19  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\7000 - deprecated-methods\\1500 - deprecated-invoice.md:\n    1  ---\n    2: title: \"(Deprecated) Invoice\"\n    3  hidden: true\n    4  ---\n    .\n    9  ## Description\n   10  \n   11: This method is identical to the [(Deprecated) Table method](doc:deprecated-table), and also returns detected invoice metadata. This method accepts one invoice per document file. If the document contains multiple tables, the Invoice method returns the data for the table that is the best invoice candidate.\n   12  \n   13: It's a best practice to create a single, flexible config that works for a variety of invoice formats. This is because invoices typically come from such a wide variety of vendors that it would be unmanageable to create a config for each vendor. Create a flexible config by using synonymous terms to identify invoice elements. For more information, see the [Examples section](doc:invoice#examples). \n   14  \n   15: [**Parameters**](doc:invoice#parameters)\n   16: [**Examples**](doc:invoice#examples)\n   17  \n   18  Parameters\n   ..\n   23  | key                  | value     | description                                                  |\n   24  | :------------------- | :-------- | :----------------------------------------------------------- |\n   25: | id (**required**)    | `invoice` | When you specify this method, you must also specify `\"type\": \"table\"` in the field's parameters. |\n   26  | columns **required** | array     | An array of objects with the following parameters: <br/> -`id` (**required**): The id for the column in the extraction output. <br/> -`terms` (**required**): An array of terms to score positively during column recognition. For more information about scoring, see ... <skipped 397 characters> ...d` (default false): If true, Sensible omits a row if its cell is empty in this column. If false, Sensible returns nulls for empty cells in the row. Note that if you set this parameter to true for one column, Sensible omits the row for *all* columns, even if the row had content under other columns. |\n   27  \n   ..\n   30  ====\n   31  \n   32: The following example shows using the Invoice method:\n   33  \n   34: - It extracts the invoice table from a document that contains multiple tables.\n   35: - It extracts other invoice metadata from header and footer information in the invoice.\n   36: - This example uses a large number of synonymous terms for each invoice column, so it can parse invoices from a variety of vendors. \n   37  \n   38  **Config**\n   ..\n   43    \"fields\": [\n   44      {\n   45:       \"id\": \"invoice\",\n   46        \"type\": \"table\",\n   47        \"method\": {\n   48:         \"id\": \"invoice\",\n   49          \"columns\": [\n   50            {\n   ..\n  135  The following image shows the example document used with this example config:\n  136  \n  137: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main//readme-sync/assets/v0/images/final/invoice.png)\n  138  \n  139: | Example document | [Download link](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/pdfs/invoice.pdf) |\n  140  | ----------------------- | ------------------------------------------------------------ |\n  141  \n  ...\n  144  ```json\n  145  {\n  146:   \"invoice\": {\n  147      \"metadata\": {\n  148        \"billing_address_recipient\": {\n  ...\n  154          \"type\": \"string\"\n  155        },\n  156:       \"invoice_date\": {\n  157          \"source\": \"06/21/21\",\n  158          \"value\": \"2021-06-21T00:00:00.000Z\",\n  159          \"type\": \"date\"\n  160        },\n  161:       \"invoice_id\": {\n  162          \"value\": \"19288685\",\n  163          \"type\": \"string\"\n  164        },\n  165:       \"invoice_total\": {\n  166          \"source\": \"7,061.48\",\n  167          \"value\": 7061.48,\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\7000 - deprecated-methods\\1500 - deprecated-query.md:\n   11  ## Description\n   12  \n   13: This method extracts individual facts in a document, such as the date of an invoice, the liability limit of an insurance policy, or the destination address of a shipping container delivery. Sensible uses a large language model (LLM)  to find these facts in paragraphs of free text, or in more structured layouts, for example key/value pairs or tables.\n   14  \n   15  Sensible recommends framing each query, or prompt, so that it has a single, short answer.  For prompts with multi-part answers, use the [List method](doc:list). \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\welcome\\6000 - author.md:\n   24  |                              | LLM (Sensible Instruct)                                      | layout-based (SenseML)                                       |\n   25  | ---------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n   26: | Technical expertise required | For nontechnical users. Describe what you want to extract in a prompt to an LLM.  For example, \"the policy period\" or \"total amount invoiced\". | Offers highly configurable JSON-based extraction configuration for technical users. For example, write instructions in JSON to grab the second cell in a column headed by \"premium.\" |\n   27  | Workflow automation          | Suited to workflows that include human review or that are fault-tolerant. | Suited to automated workflows that require predictable results and validation. |\n   28  | Document variability         | Suited to documents that are unstructured or that have a large number of layout variations or revisions. | Suited to structured documents with a finite number of variations, where you know the layout of the document in advance. |\n\n36 matches across 9 files\n\n\nSearching 161 files for \"doc:invoice\"\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\7000 - deprecated-methods\\1500 - deprecated-invoice.md:\n   11  This method is identical to the [(Deprecated) Table method](doc:deprecated-table), and also returns detected invoice metadata. This method accepts one invoice per document file. If the document contains multiple tables, the Invoice method returns the data for the table that is the best invoice candidate.\n   12  \n   13: <skipped 74 characters> ...variety of invoice formats. This is because invoices typically come from such a wide variety of vendors that it would be unmanageable to create a config for each vendor. Create a flexible config by using synonymous terms to identify invoice elements. For more information, see the [Examples section](doc:invoice#examples). \n   14  \n   15: [**Parameters**](doc:invoice#parameters)\n   16: [**Examples**](doc:invoice#examples)\n   17  \n   18  Parameters\n\n3 matches in 1 file\n\n\nSearching 161 files for \"doc:invoice\"\n\n0 matches\n\nSearching 161 files for \"bounding box\"\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\2000 - methods\\1000 - box.md:\n   18  | ----------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n   19  | id (**required**) | `box`                                                        | Extracts all lines in a box. If you define an anchor that's outside the box borders, then use offset parameters to define a point that's inside the box borders so that Sensible recognizes the box. |\n   20: | position          | `right`, `left`, `below`, `above`. default: center of the anchor line's bounding box | Use this parameter to fine tune box recognition. Defines the starting point for the box recognition relative to the anchor. For example, `right` specifies starting at the midpoint of the anchor line's right boundary, and `below` specifies starting at the midpoint of the anchor line's bottom bound... <skipped 210 characters> ...\n   21  | offsetX           | number in inches default: 0                                  | Searches for a box starting at a point offset from the point defined by the Position parameter. Positive values offset to the right, negative values offset to the left. For an example of how to use this parameter, see the following [Examples section](doc:box#examples). |\n   22  | offsetY           | number in inches default: 0                                  | Searches for a box starting at a point offset from the point defined by the Position parameter. Positive values offset down the page, negative values offset up the page.  For an example of how to use this parameter, see the following [Examples section](doc:box#examples). |\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\2000 - methods\\1100 - checkbox.md:\n   23  | id (**required**) | `checkbox`                      |                                                              |\n   24  | position          | `left`, `right`                 | Searches horizontally for a checkbox starting at the left or right anchor line boundaries and ending at the page margin. <br/> |\n   25: | offsetX           | number in inches. default: 0    | Indicates a point inside the checkbox. Instead of searching horizontally, Sensible  expands the search out in all directions from the point specified to find the checkbox bounding box.<br/><br/> For difficult pixel recognition, for example for large checkboxes or selection marks with no borders,  use the offset parameters in combination with Width and Height parameters to define the selection mark region.<br/> |\n   26: | offsetY           | number in inches. default: 0    | Indicates a point inside the checkbox. Instead of searching horizontally, Sensible  expands the search out in all directions from the point specified to find the checkbox bounding box.<br/><br/>For difficult pixel recognition, for example for large checkboxes or selection marks with no borders,  use the offset parameters in combination with Width and Height parameters to define the selection mark region.<br/> |\n   27  | width             | number in inches. default: none | **For pixel recognition:**  Configure this parameter for pixel recognition of checkboxes larger than the default supported size, or for checkboxes with discontinuous or missing borders.<br/><br/>The Width and Height parameters define a region in which to find a selection mark. Specify a region inside the checkbox borders that doesn't touch the borders. <br/> |\n   28  | height            | number in inches. default: none | **For pixel recognition:**  Configure this parameter for pixel recognition of checkboxes larger than the default supported size, or for checkboxes with discontinuous or missing borders.<br/><br/>The Width and Height parameters define a region in which to find a selection mark. Specify a region inside the checkbox borders that doesn't touch the borders. <br/> |\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\8000 - concepts\\4500 - draft-senseml-order.md:\n   39  Take the raw text representation (from OCR or directly from the PDF), clean it, and put it in a standard format for Sensible to use.\n   40  \n   41: - Standardize the text to an array of pages, each containing an array of lines with bounding box data. Also capture transformation metadata (e.g., page rotation).\n   42  \n   43  - Apply non-configurable, global preprocessors (for example, clean up whitespaces, sort lines, merge and deduplicate lines).\n\n4 matches across 3 files\n\n\nSearching 161 files for \"superscr\"\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\2000 - field-query-object\\1300 - types.md:\n  757    {\n  758      \"id\": \"paragraph\",\n  759:     \"annotateSuperscriptAndSubscript\": true\n  760    }\n  761  ```\n  ...\n  765  For the following document:\n  766  \n  767: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/annotate_superscript_and_subscript.png) \n  768  \n  769: When you set`\"annotateSuperscriptAndSubscript\": true` , Sensible formats the footnote symbols to indicate they're superscripted, for example,  `[^1]`:\n  770  \n  771  ```json\n  ...\n  783  | ------------------------------- | ----------------------- | ------------------------------------------------------------ |\n  784  | id (**required**)               | `paragraph`             |                                                              |\n  785: | annotateSuperscriptAndSubscript | Boolean. default: false | When true:<br/>-  Sensible annotates subscript and superscript text with `[^...]` and `[_...]`, respectively.<br/>- Sensible annotates end-of-page breaks with `[EOP]`. |\n  786  | allNewlines                     | Boolean. default: false | When true, Sensible inserts a newline (`\\n`) in the output for every line break in the document text, and two newlines (`\\n\\n`), for every paragraph break.<br/>When false, Sensible inserts a newline for every paragraph break.<br/> |\n  787  | paragraphBreakThreshold         | default: 0.4            | By default, Sensible detects paragraph breaks when the vertical gap between two lines is larger than 40% of the font height of the output line. Use this parameter to change the percentage. |\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\2000 - methods\\1400 - fixed-table.md:\n   28  | stop                            | [Match object](doc:match) or array of Match objects. default: none | (**Recommended**)  Stops table recognition at the matched line. Otherwise, Sensible searches all pages for tables, which can impact performance.<br/>When you specify a stop, Sensible  uses an Ama... <skipped 131 characters> ...specify a stop, Sensible supports:<br/>- merged cells in tables. Sensible populates \"empty\" spanned cells with the spanned value. For an example, see [Merged cell example](doc:fixed-table#example-merged-cells).<br/> - checkboxes in cells. Returns checkbox selection status as `[true]` or `[false]`. |\n   29  | startOnRow                      | integer. default: 0                                          | Zero-indexed row number at which to start table extraction. For example, use this to exclude column headings from the output. As a stricter alternative, set the Is Required parameter on a column and set a type on the column (see example in Examples section). |\n   30: <skipped 365 characters> ...ed by your document type, or by using text embedded in the document file if present. For an example, see [Example: Troubleshoot Table OCR](doc:fixed-table#example-troubleshoot-table-ocr).<br/>If `\"detectTableStructureOnly\": true` causes incorrect [line sorting](doc:lines#line-sorting), set `annotateSuperscriptAndSubscript\": true` to correct the line sorting.<br/> |\n   31: | annotateSuperscriptAndSubscript | boolean. default: false                                      | Set to true only if the Detect Table Structure Only parameter is set to true. When true:<br/>-  Sensible annotates subscript and superscript text in the table with `[^...]` and `[_...]`, respectively.<br/>- Sensible annotates end-of-page breaks with `[EOP]`. |\n   32  \n   33  Examples\n   ..\n  350            results in incorrect line sorting, \n  351            set the following additional parameter:\n  352:           \"annotateSuperscriptAndSubscript\": true,\n  353          */\n  354          \"columns\": [\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\3000 - llm-based-methods\\1000 - nlp-table.md:\n   46  | rewriteTable                        | Boolean. default: true  | If true, you can use the column descriptions to prompt the LLM to split or merge columns or otherwise restructure the table.<br/>Configure this to false to improve performance, to avoid LLM token overflow errors caused by tables that ... <skipped 73 characters> ...leshoot an incomplete table extraction.<br/>If false, skips the full table restructure described in the Notes section. As a result, Sensible returns the table body unchanged from the OCR extraction, and the only change you can make is to rename the column headings using the columns' ID parameters. |\n   47  | pageSpanThreshold                   | object                  | Configure the Page Span Threshold parameter to troubleshoot automatic multi-page table recognition. <br/>By default, Sensible detects multi-page tables by checking if the table is near the top or bottom of the page. If it is, Sensible... <skipped 674 characters> ...ext page for a continuation of a multi-page table if the table ends in the bottom 20% of the page. Change the percent using this parameter.<br/>Sensible continues merging the multi-page table until the Page Span Threshold conditions are no longer met, or until Sensible encounters LLM token limits. |\n   48: <skipped 332 characters> ...ed by your document type, or by using text embedded in the document file if present. For an example, see [Example: Troubleshoot Table OCR](doc:fixed-table#example-troubleshoot-table-ocr).<br/>If `\"detectTableStructureOnly\": true` causes incorrect [line sorting](doc:lines#line-sorting), set `annotateSuperscriptAndSubscript\": true` to correct the line sorting.<br/> |\n   49: | annotateSuperscriptAndSubscript     | boolean. default: false | Set to true only if the Detect Table Structure Only parameter is set to true. When true:<br/>-  Sensible annotates subscript and superscript text in the table with `[^...]` and `[_...]`, respectively. |\n   50  | contextDescription                  |                         | For information about this parameter, see [Advanced prompt configuration](doc:prompt#parameters). |\n   51  | pageHinting                         |                         | For information about this parameter, see [Advanced prompt configuration](doc:prompt#parameters). |\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\5000 - preprocessors\\1060 - nlp.md:\n   18  | ---------------------- | ------ | ------------------------------------------------------------ |\n   19  | type (**required**)    | `nlp`  |                                                              |\n   20: | nlpTable               | object | Parameters:<br/>- `rewriteTable`<br/>- `pageSpanThreshold`<br/>- `detectTableStructureOnly`<br/>-`annotateSuperscriptAndSubscript`<br/>- (**Deprecated**) `promptIntroduction`<br/>For information about these parameters, see [NLP Table](doc:nlp-table#parameters). |\n   21  | list                   | object | Parameters:<br/>- `llmEngine`<br/>- (**Deprecated**) `promptIntroduction`<br/>For information about these parameters, see [List](doc:list#parameters). |\n   22  | (**Deprecated**) query | object | For information about this deprecated parameter see [Query](doc:deprecated-query). |\n\n14 matches across 4 files\n\n\nSearching 161 files for \"xmajor\"\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\2000 - field-query-object\\1200 - method.md:\n   25  | whitespaceFilter            | `spaces`, `all`                                              | Remove extra whitespaces.<br/> `spaces` - remove solely extra spaces.<br/> `all` - remove all whitespace characters, including newlines. |\n   26  | xRangeFilter                | object                                                       | Defines left and right boundaries in which to capture lines. For example, in combination with the Document Range method, the X Range Filter parameter defines a \"column\" that's bounded at the top and bottom... <skipped 202 characters> ...nt of the \"column\" at either the right or left boundary of the anchor line.<br/> `offsetX` - Adjusts the horizontal position of the starting point defined by the Start parameter. <br/> `width` - The width of the page region to capture, in inches.<br/><br/> For an example, see the Examples section. |\n   27: | **(Deprecated)** xMajorSort | boolean                                                      | **Deprecated:** Use the Sort Lines parameter instead.        |\n   28  | sortLines                   | `readingOrderLeftToRight`                                    | Set this parameter to `readingOrderLeftToRight` to sort lines whose height and vertical position are misaligned. For example, with misaligned handwritten text, slight jitter in the vertical positions of lines can cause Sensible to incorrectly sort lines that a human reader interprets as following left to right. The Sort Lines parameter corrects this problem by sorting lines by their likely reading order. |\n   29  \n   ..\n   38  In the following example, the handwritten text \"Nash\" is slightly taller than the text \"Steve\", so Sensible interprets \"Nash\" as *preceding* \"Steve\" (reversing the order interpreted by a human reader) and outputs `\"Nash Steve\"` as the name:\n   39  \n   40: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/xmajor_sort_1.png)\n   41  \n   42  **SOLUTION**\n   ..\n   79  ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/sort_lines_2.png)\n   80  \n   81: | Example document | [Download link](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/pdfs/xmajor_sort.pdf) |\n   82  | ----------- | ------------------------------------------------------------ |\n   83  \n\n3 matches in 1 file\n\n\nSearching 161 files for \"direct-text\"\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\best-practices\\5000 - guides\\2000 - troubleshoot.md:\n   15  -----\n   16  \n   17: Sometimes, the text you see in the rendered document doesn't match the direct-text extraction. To inspect all the text Sensible extracted from a document, use the following config:\n   18  \n   19  ```json\n\n1 match in 1 file\n\n\nSearching 161 files for \"handwriting\"\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\best-practices\\5000 - guides\\2500 - handwriting.md:\n    1  ---\n    2: title: \"Extracting handwriting and OCR text\"\n    3  hidden: false\n    4  ---\n    5  \n    6: This topic contains tips and tricks for extracting handwriting and OCR'd text, for example from scanned documents or images:\n    7  \n    8  OCR tips\n    .\n   14  \n   15  \n   16: Handwriting tips\n   17  ---\n   18  \n   ..\n   25    \n   26  \n   27: - **Defining regions:** Handwriting can occupy an unpredictable region or even overlap other lines. To capture handwriting, Sensible recommends defining a [region](doc:region) with a small height and long width that runs through the middle of the area that can contain the handwriting. The green boxes in the following image show this approach: \n   28  \n   29:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/handwriting_1.png) \n   30  \n   31    For more information about how Sensible determines whether to extract a line that partially overlaps a region, see [Region](doc:region).\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\2000 - field-query-object\\1100 - match.md:\n   50  | text  (**required**) | string                                                  | The string to match                                          |\n   51  | type (**required**)  | `equals`, `startsWith`, `endsWith`, `includes`          | `equals`: The matching line must equal the string<br/>`startsWith`: Match at beginning of line<br/>`endsWIth`: Match at end of line<br/>`includes`: Match anywhere in line |\n   52: | editDistance         | integer. the number of allowed edits for a fuzzy match. | Configure this parameter to allow *fuzzy*, or approximate, string matching. This is useful for OCR text, like poor-quality scans or handwriting. For example, if you configure 3, then Sensible matches `kitten` in the document for `sitting` in the Text parameter.  Sensible implements fuzzy matching using [Levenshtien distance](https://en.wikipedia.org/wiki/Levenshtein_distance). <br/>Sensible recommends avoiding setting this parameter on sho... <skipped 289 characters> ...\n   53  | isCaseSensitive      | boolean. Default: false.                                | If true, match the string taking into account upper- and lower-case characters. |\n   54  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\3000 - llm-based-methods\\1500 - draft-query-group.md:\n   22  |                  |        |                                                              |\n   23  |                  |        |                                                              |\n   24: | multimodalEngine | object | Configure this parameter to troubleshoot extracting from complex text layouts, such as handwriting and lines between lines.<br/>This parameter sends an image of the document region containing the target data to a multimodal LLM engine for extraction.  This bypasses Sensible's OCR and direct-text extraction processes. Note that this option doesn't support confidence signals.<br/><br/>This paramet... <skipped 615 characters> ...\n   25  |                  |        |                                                              |\n   26  |                  |        |                                                              |\n   ..\n   35  ## Multimodal example\n   36  \n   37: The following example shows using a multimodal LLM to extract from a scanned document containing complex layout in the form of handwriting. For an alternate approach to extracting from this document, see also the [Sort Lines](doc:method#sort-lines-example) example.\n   38  \n   39  **Config**\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\5000 - preprocessors\\1050 - merge-lines.md:\n   30  ====\n   31  \n   32: Handwriting OCR \n   33  ----\n   34  \n   35: Use the Merge Lines preprocessor to clean up OCRed handwriting text. This preprocessor is useful for Google OCR, which by default groups text into words rather than lines.\n   36  \n   37  **PROBLEM**\n   ..\n  174  ----\n  175  \n  176: The following example shows using the Y Overlap parameter to correct vertical misalignment or \"jitter\" in lines (for example, as the result of a low-quality scan or because of handwriting).\n  177  \n  178  **Config**\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\5000 - preprocessors\\1070 - ocr.md:\n    6  When you [extract document data with Sensible](doc:getting-started-ai), Sensible [automatically OCRs](doc:ocr-level) the document for you, except in advanced cases. This topic covers advanced cases.\n    7  \n    8: Use the OCR preprocessor to selectively OCR pages in a document. This preprocessor is useful when a document contains both embedded text and text images. Selectively OCRing the pages containing text images, rather than the entire document, improves extraction performance. Examples of text images include handwriting and scanned text.\n    9  \n   10  If the whole document is a scan or image file, you don't need to configure this preprocessor. In that case, Sensible automatically OCRs the whole document.\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\6800 - document-type-settings\\2000 - ocr-engine.md:\n   14  | Microsoft | Default engine for document types.<br/>Suited to typewritten documents and large documents up to 50 MB in size. |\n   15  | Lazarus   | Faster than Microsoft and produces similar output.           |\n   16: | Google    | Faster than Microsoft and suited to handwriting and documents that are 5 pages or fewer. The Google engine doesn't merge words into lines automatically. Use the Merge Lines preprocessor in your configurations to do so. |\n   17  \n   18  **Note:** Sensible  extracts from [portfolios](doc:portfolio), it uses Microsoft OCR, and ignores any OCR settings in document types.\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\8000 - concepts\\3000 - lines.md:\n   22  ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/line_sort_1.png)\n   23  \n   24: When text such as handwriting is slightly misaligned vertically, line sorting is less intuitive. In the following image, a human reader may interpret the red line as succeeding the target line, but for Sensible it *precedes* the target line because it's higher on the page:\n   25  \n   26  ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/line_sort_2.png)\n\n16 matches across 7 files\n\n\nSearching 161 files for \"query-group#\"\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\llm-based extractions\\3000 - prompt.md:\n   41  The following table shows global parameters, or parameters that are common to all Sensible Instruct methods. You can configure these parameters for all fields in a config, or on a field-by-field basis.\n   42  \n   43: For parameters specific to a Sensible instruct method, see its reference topic, for example, the [Query Group](doc:query-group#parameters) method reference topic. Like global parameters, method-specific parameters can be set for all fields in a config, or on a field-by-field basis.\n   44  \n   45  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\llm-based extractions\\instruct\\1000 - query-group-tips.md:\n    7  This Sensible Instruct method extracts individual facts in a document, such as the date of an invoice, the liability limit of an insurance policy, or the destination address of a shipping container delivery.\n    8  \n    9: Sensible recommends grouping queries together if they share [context](doc:query-group#notes).  Queries share context when data exists in the same location or region of a document, for example, on the same page. You can configure context using [Advanced prompt configuration](doc:prompt). \n   10  \n   11  For example, contact information can usually be found in the same location of a document:\n   ..\n   36  - For information about troubleshooting LLM error messages, see [Qualifying LLM accuracy](doc:confidence).\n   37  \n   38: - You can view the source text for an LLM's answer highlighted in the document. In the Sensible Instruct editor, click the **Location** button in the output of a query field to view its source text in the document. For more information about how location highlighting works and its limitations, see [Location highlighting](doc:query-group#notes).\n   39  \n   40    ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/location.png)\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\3000 - llm-based-methods\\1500 - query-group.md:\n    5  ---\n    6  \n    7: <skipped 114 characters> ...y, or the destination address of a shipping container delivery. Sensible uses a large language model (LLM)  to find these facts in paragraphs of free text, or in more structured layouts, for example key/value pairs or tables. Create a query group to extract multiple facts that share a [context](doc:query-group#notes), or are co-located in the document.\n    8  \n    9  For tips and troubleshooting, see [Query Group](doc:query-group-tips) extraction tips.\n   10  \n   11: For more information about how this method works, see [Notes](doc:query-group#notes).\n   12  \n   13: [**Parameters**](doc:query-group#parameters)\n   14: [**Examples**](doc:query-group#examples)\n   15: [**Notes**](doc:query-group#examples)\n   16  \n   17  Parameters\n   ..\n   29  | :-------------------- | :----- | :----------------------------------------------------------- |\n   30  | method (**required**) | object | For this object's parameters, see the following table.       |\n   31: <skipped 231 characters> .../>- Sensible ignores the anchor if it's present in the document.<br/>- Sensible returns null for the field if the anchor isn't present in the document.<br/><br/>If you specify an anchor and configure the Multimodal Engine parameter's region manually, then Sensible creates the prompt's [context](doc:query-group#notes) relative to the anchor. |\n   32  \n   33  ## Query group parameters\n   ..\n   39  | id (**required**)      | `queryGroup`     |                                                              |\n   40  | queries                | array of objects | An array of query objects, where each extracts a single fact and outputs a single field. Each query contains the following parameters:<br/>`id` (**required**) - The ID for the extracted field. <br/>`description`  (**required**) - A free-text question about information in the document. For example, `\"what's the policy period?\"` or `\"what's the client's first and last name?\"`. For more information about how to write questions (or \"prompts\"), see [Query Group](https://docs.sensible.so/docs/query-group-tips) extraction tips. |\n   41: <skipped 911 characters> ...d with newlines, then provide a snippet with an example street address that contains newlines, like `123 Main Street\\nLondon, England`. If the chunk contains a street address in a free-text paragraph, then provide an unformatted street address in the snippet.<br/>For an example, see [Example 3](doc:query-group#example-3). |\n   42: <skipped 809 characters> ...xtraction processes. Note that this option doesn't support confidence signals.<br/><br/>This parameter has the following parameters:<br/>`region`: The document region to send as an image to the multimodal LLM. Configurable with the following options :<br/>- To automatically select the [context](doc:query-group#notes) as the region, specify `\"region\": \"automatic\"`. <br/>- To manually specify a region relative to the field's anchor, specify the region using the [Region](doc:region) method's parameters, for example:<br/>`\"region\": { `<br/>          `\"start\": \"below\",`<br/>          `\"width\": 8,`<br/>        ... <skipped 103 characters> ...\n   43  | confidenceSignals      |                  | For information about this parameter, see [Advanced prompt configuration](doc:prompt). |\n   44  | contextDescription     |                  | For information about this parameter, see [Advanced prompt configuration](doc:prompt#parameters). |\n\n11 matches across 3 files\n\n\nSearching 161 files for \"query-group#exa\"\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\3000 - llm-based-methods\\1500 - query-group.md:\n   12  \n   13  [**Parameters**](doc:query-group#parameters)\n   14: [**Examples**](doc:query-group#examples)\n   15: [**Notes**](doc:query-group#examples)\n   16  \n   17  Parameters\n   ..\n   39  | id (**required**)      | `queryGroup`     |                                                              |\n   40  | queries                | array of objects | An array of query objects, where each extracts a single fact and outputs a single field. Each query contains the following parameters:<br/>`id` (**required**) - The ID for the extracted field. <br/>`description`  (**required**) - A free-text question about information in the document. For example, `\"what's the policy period?\"` or `\"what's the client's first and last name?\"`. For more information about how to write questions (or \"prompts\"), see [Query Group](https://docs.sensible.so/docs/query-group-tips) extraction tips. |\n   41: <skipped 911 characters> ...d with newlines, then provide a snippet with an example street address that contains newlines, like `123 Main Street\\nLondon, England`. If the chunk contains a street address in a free-text paragraph, then provide an unformatted street address in the snippet.<br/>For an example, see [Example 3](doc:query-group#example-3). |\n   42  | multimodalEngine       | object           | Configure this parameter to:<br/>- Troubleshoot extracting from complex text layouts, such as overlapping lines and lines between lines. Many such layouts can occur as a consequence of handwritten text. For example, use this as an alternative to the [Sig... <skipped 924 characters> ...the field's anchor, specify the region using the [Region](doc:region) method's parameters, for example:<br/>`\"region\": { `<br/>          `\"start\": \"below\",`<br/>          `\"width\": 8,`<br/>          `\"height\": 1.2,`<br/>          `\"offsetX\": -2.5,`<br/>         `\"offsetY\": -0.25`<br/>          `}` |\n   43  | confidenceSignals      |                  | For information about this parameter, see [Advanced prompt configuration](doc:prompt). |\n\n3 matches in 1 file\n",
			"settings":
			{
				"buffer_size": 41045,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			},
			"undo_stack":
			[
			]
		},
		{
			"contents": "",
			"file": "v0/senseml-reference/3000 - llm-based-methods/1500 - query-group.md",
			"file_size": 19828,
			"file_write_time": 133573353126294304,
			"settings":
			{
				"buffer_size": 0,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					4,
					7,
					"left_delete",
					null,
					"BwAAAAYRAAAAAAAABhEAAAAAAAA5AAAAb3IgYW4gZXhhbXBsZSwgc2VlIFtFeGFtcGxlIDNdKGRvYzpxdWVyeS1ncm91cCNleGFtcGxlLTMpBREAAAAAAAAFEQAAAAAAAAEAAABGBBEAAAAAAAAEEQAAAAAAAAEAAAA+AxEAAAAAAAADEQAAAAAAAAEAAAAvAhEAAAAAAAACEQAAAAAAAAEAAAByAREAAAAAAAABEQAAAAAAAAEAAABiABEAAAAAAAAAEQAAAAAAAAEAAAA8",
					"AQAAAAAAAAABAAAAPxEAAAAAAAAGEQAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"left_delete",
					null,
					"AQAAAP8QAAAAAAAA/xAAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAABEAAAAAAAAAEQAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA/xAAAAAAAAD/EAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "v0/senseml-reference/3000 - llm-based-methods/1000 - nlp-table.md",
			"settings":
			{
				"buffer_size": 15451,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF8aAAAAAAAAYBoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXxoAAAAAAABfGgAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"paste",
					null,
					"AQAAAGAaAAAAAAAAoxoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYBoAAAAAAABgGgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "v0/senseml-reference/2000 - methods/1400 - fixed-table.md",
			"settings":
			{
				"buffer_size": 13650,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": " This"
					},
					"BQAAAHcRAAAAAAAAeBEAAAAAAAAAAAAAeBEAAAAAAAB5EQAAAAAAAAAAAAB5EQAAAAAAAHoRAAAAAAAAAAAAAHoRAAAAAAAAexEAAAAAAAAAAAAAexEAAAAAAAB8EQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdxEAAAAAAAB3EQAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHwRAAAAAAAAfREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfBEAAAAAAAB8EQAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAAH0RAAAAAAAAfREAAAAAAAA6AAAAPGJyLz4tIFNlbnNpYmxlIGFubm90YXRlcyBlbmQtb2YtcGFnZSBicmVha3Mgd2l0aCBgW0VPUF1gLg",
					"AQAAAAAAAAABAAAAfREAAAAAAAC3EQAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "parameter"
					},
					"CQAAAH0RAAAAAAAAfhEAAAAAAAAAAAAAfhEAAAAAAAB/EQAAAAAAAAAAAAB/EQAAAAAAAIARAAAAAAAAAAAAAIARAAAAAAAAgREAAAAAAAAAAAAAgREAAAAAAACCEQAAAAAAAAAAAACCEQAAAAAAAIMRAAAAAAAAAAAAAIMRAAAAAAAAhBEAAAAAAAAAAAAAhBEAAAAAAACFEQAAAAAAAAAAAACFEQAAAAAAAIYRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfREAAAAAAAB9EQAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " doesn't"
					},
					"CAAAAIYRAAAAAAAAhxEAAAAAAAAAAAAAhxEAAAAAAACIEQAAAAAAAAAAAACIEQAAAAAAAIkRAAAAAAAAAAAAAIkRAAAAAAAAihEAAAAAAAAAAAAAihEAAAAAAACLEQAAAAAAAAAAAACLEQAAAAAAAIwRAAAAAAAAAAAAAIwRAAAAAAAAjREAAAAAAAAAAAAAjREAAAAAAACOEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhhEAAAAAAACGEQAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " support"
					},
					"CAAAAI4RAAAAAAAAjxEAAAAAAAAAAAAAjxEAAAAAAACQEQAAAAAAAAAAAACQEQAAAAAAAJERAAAAAAAAAAAAAJERAAAAAAAAkhEAAAAAAAAAAAAAkhEAAAAAAACTEQAAAAAAAAAAAACTEQAAAAAAAJQRAAAAAAAAAAAAAJQRAAAAAAAAlREAAAAAAAAAAAAAlREAAAAAAACWEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjhEAAAAAAACOEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " multi-"
					},
					"BwAAAJYRAAAAAAAAlxEAAAAAAAAAAAAAlxEAAAAAAACYEQAAAAAAAAAAAACYEQAAAAAAAJkRAAAAAAAAAAAAAJkRAAAAAAAAmhEAAAAAAAAAAAAAmhEAAAAAAACbEQAAAAAAAAAAAACbEQAAAAAAAJwRAAAAAAAAAAAAAJwRAAAAAAAAnREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlhEAAAAAAACWEQAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					12,
					"left_delete",
					null,
					"DAAAAJwRAAAAAAAAnBEAAAAAAAABAAAALZsRAAAAAAAAmxEAAAAAAAABAAAAaZoRAAAAAAAAmhEAAAAAAAABAAAAdJkRAAAAAAAAmREAAAAAAAABAAAAbJgRAAAAAAAAmBEAAAAAAAABAAAAdZcRAAAAAAAAlxEAAAAAAAABAAAAbZYRAAAAAAAAlhEAAAAAAAABAAAAIJURAAAAAAAAlREAAAAAAAABAAAAdJQRAAAAAAAAlBEAAAAAAAABAAAAcpMRAAAAAAAAkxEAAAAAAAABAAAAb5IRAAAAAAAAkhEAAAAAAAABAAAAcJERAAAAAAAAkREAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAnREAAAAAAACdEQAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "pport"
					},
					"BQAAAJERAAAAAAAAkhEAAAAAAAAAAAAAkhEAAAAAAACTEQAAAAAAAAAAAACTEQAAAAAAAJQRAAAAAAAAAAAAAJQRAAAAAAAAlREAAAAAAAAAAAAAlREAAAAAAACWEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkREAAAAAAACREQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " annotating"
					},
					"CwAAAJYRAAAAAAAAlxEAAAAAAAAAAAAAlxEAAAAAAACYEQAAAAAAAAAAAACYEQAAAAAAAJkRAAAAAAAAAAAAAJkRAAAAAAAAmhEAAAAAAAAAAAAAmhEAAAAAAACbEQAAAAAAAAAAAACbEQAAAAAAAJwRAAAAAAAAAAAAAJwRAAAAAAAAnREAAAAAAAAAAAAAnREAAAAAAACeEQAAAAAAAAAAAACeEQAAAAAAAJ8RAAAAAAAAAAAAAJ8RAAAAAAAAoBEAAAAAAAAAAAAAoBEAAAAAAAChEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlhEAAAAAAACWEQAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKERAAAAAAAAohEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoREAAAAAAAChEQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "multi"
					},
					"BQAAAKIRAAAAAAAAoxEAAAAAAAAAAAAAoxEAAAAAAACkEQAAAAAAAAAAAACkEQAAAAAAAKURAAAAAAAAAAAAAKURAAAAAAAAphEAAAAAAAAAAAAAphEAAAAAAACnEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAohEAAAAAAACiEQAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					5,
					"left_delete",
					null,
					"BQAAAKYRAAAAAAAAphEAAAAAAAABAAAAaaURAAAAAAAApREAAAAAAAABAAAAdKQRAAAAAAAApBEAAAAAAAABAAAAbKMRAAAAAAAAoxEAAAAAAAABAAAAdaIRAAAAAAAAohEAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAApxEAAAAAAACnEQAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "text"
					},
					"BAAAAKIRAAAAAAAAoxEAAAAAAAAAAAAAoxEAAAAAAACkEQAAAAAAAAAAAACkEQAAAAAAAKURAAAAAAAAAAAAAKURAAAAAAAAphEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAohEAAAAAAACiEQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAAKYRAAAAAAAApxEAAAAAAAAAAAAApxEAAAAAAACoEQAAAAAAAAAAAACoEQAAAAAAAKkRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAphEAAAAAAACmEQAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " multi-line"
					},
					"CwAAAKkRAAAAAAAAqhEAAAAAAAAAAAAAqhEAAAAAAACrEQAAAAAAAAAAAACrEQAAAAAAAKwRAAAAAAAAAAAAAKwRAAAAAAAArREAAAAAAAAAAAAArREAAAAAAACuEQAAAAAAAAAAAACuEQAAAAAAAK8RAAAAAAAAAAAAAK8RAAAAAAAAsBEAAAAAAAAAAAAAsBEAAAAAAACxEQAAAAAAAAAAAACxEQAAAAAAALIRAAAAAAAAAAAAALIRAAAAAAAAsxEAAAAAAAAAAAAAsxEAAAAAAAC0EQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqREAAAAAAACpEQAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " r"
					},
					"AgAAALQRAAAAAAAAtREAAAAAAAAAAAAAtREAAAAAAAC2EQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtBEAAAAAAAC0EQAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"left_delete",
					null,
					"AQAAALURAAAAAAAAtREAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAthEAAAAAAAC2EQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "cells."
					},
					"BgAAALURAAAAAAAAthEAAAAAAAAAAAAAthEAAAAAAAC3EQAAAAAAAAAAAAC3EQAAAAAAALgRAAAAAAAAAAAAALgRAAAAAAAAuREAAAAAAAAAAAAAuREAAAAAAAC6EQAAAAAAAAAAAAC6EQAAAAAAALsRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtREAAAAAAAC1EQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "v0/senseml-reference/2000 - methods/1000 - box.md",
			"settings":
			{
				"buffer_size": 12834,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "v0/senseml-reference/7000 - deprecated-methods/1500 - deprecated-invoice.md",
			"settings":
			{
				"buffer_size": 8197,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"",
					null,
					"AwAAAJ8DAAAAAAAAtQMAAAAAAAALAAAAZG9jOmludm9pY2V4AwAAAAAAAI4DAAAAAAAACwAAAGRvYzppbnZvaWNlTgMAAAAAAABkAwAAAAAAAAsAAABkb2M6aW52b2ljZQ",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAOQIAAAAAAAA5AgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "v0/senseml-reference/2000 - field-query-object/1300 - types.md",
			"settings":
			{
				"buffer_size": 31305,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					4,
					3,
					"left_delete",
					null,
					"AwAAAKl1AAAAAAAAqXUAAAAAAAAQAAAAciBJbnZvaWNlIG1ldGhvZKh1AAAAAAAAqHUAAAAAAAABAAAAb6d1AAAAAAAAp3UAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAqXUAAAAAAAC5dQAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAp3UAAAAAAACndQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "v0/integrations/4000 - quick-extraction/7600 - excel-reference.md",
			"settings":
			{
				"buffer_size": 14501,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					4,
					3,
					"left_delete",
					null,
					"AwAAAPAaAAAAAAAA8BoAAAAAAAANAAAAaW52b2ljZXMsIGFuZO8aAAAAAAAA7xoAAAAAAAABAAAAIO4aAAAAAAAA7hoAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAA8BoAAAAAAAD9GgAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": " and"
					},
					"BAAAAO4aAAAAAAAA7xoAAAAAAAAAAAAA7xoAAAAAAADwGgAAAAAAAAAAAADwGgAAAAAAAPEaAAAAAAAAAAAAAPEaAAAAAAAA8hoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7hoAAAAAAADuGgAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA8hoAAAAAAADyGgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "v0/senseml-reference/2000 - methods/1300 - document-range.md",
			"settings":
			{
				"buffer_size": 10363,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					7,
					38,
					"left_delete",
					null,
					"JgAAAIELAAAAAAAAgQsAAAAAAAABAAAAIIALAAAAAAAAgAsAAAAAAAABAAAALn8LAAAAAAAAfwsAAAAAAAABAAAAbn4LAAAAAAAAfgsAAAAAAAABAAAAb30LAAAAAAAAfQsAAAAAAAABAAAAaXwLAAAAAAAAfAsAAAAAAAABAAAAdHsLAAAAAAAAewsAAAAAAAABAAAAY3oLAAAAAAAAegsAAAAAAAABAAAAZXkLAAAAAAAAeQsAAAAAAAABAAAAc3gLAAAAAAAAeAsAAAAAAAABAAAAIHcLAAAAAAAAdwsAAAAAAAABAAAAc3YLAAAAAAAAdgsAAAAAAAABAAAAZXULAAAAAAAAdQsAAAAAAAABAAAAbHQLAAAAAAAAdAsAAAAAAAABAAAAcHMLAAAAAAAAcwsAAAAAAAABAAAAbXILAAAAAAAAcgsAAAAAAAABAAAAYXELAAAAAAAAcQsAAAAAAAABAAAAeHALAAAAAAAAcAsAAAAAAAABAAAARW8LAAAAAAAAbwsAAAAAAAABAAAAIG4LAAAAAAAAbgsAAAAAAAABAAAAZW0LAAAAAAAAbQsAAAAAAAABAAAAaGwLAAAAAAAAbAsAAAAAAAABAAAAdGsLAAAAAAAAawsAAAAAAAABAAAAIGoLAAAAAAAAagsAAAAAAAABAAAAZWkLAAAAAAAAaQsAAAAAAAABAAAAZWgLAAAAAAAAaAsAAAAAAAABAAAAc2cLAAAAAAAAZwsAAAAAAAABAAAAIGYLAAAAAAAAZgsAAAAAAAABAAAALGULAAAAAAAAZQsAAAAAAAABAAAAZWQLAAAAAAAAZAsAAAAAAAABAAAAbGMLAAAAAAAAYwsAAAAAAAABAAAAcGILAAAAAAAAYgsAAAAAAAABAAAAbWELAAAAAAAAYQsAAAAAAAABAAAAYWALAAAAAAAAYAsAAAAAAAABAAAAeF8LAAAAAAAAXwsAAAAAAAABAAAAZV4LAAAAAAAAXgsAAAAAAAABAAAAIF0LAAAAAAAAXQsAAAAAAAABAAAAblwLAAAAAAAAXAsAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAggsAAAAAAACCCwAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					10,
					"left_delete",
					null,
					"CgAAAFsLAAAAAAAAWwsAAAAAAAABAAAAIFoLAAAAAAAAWgsAAAAAAAABAAAAclkLAAAAAAAAWQsAAAAAAAABAAAAb1gLAAAAAAAAWAsAAAAAAAABAAAARlcLAAAAAAAAVwsAAAAAAAABAAAAIFYLAAAAAAAAVgsAAAAAAAABAAAAPlULAAAAAAAAVQsAAAAAAAABAAAAL1QLAAAAAAAAVAsAAAAAAAABAAAAclMLAAAAAAAAUwsAAAAAAAABAAAAYlILAAAAAAAAUgsAAAAAAAABAAAAPA",
					"AQAAAAAAAAABAAAAXAsAAAAAAABcCwAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA1iMAAAAAAADWIwAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA1iMAAAAAAADWIwAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA1iMAAAAAAADWIwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "v0/llm-based extractions/instruct/index.md",
			"settings":
			{
				"buffer_size": 1585,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"left_delete",
					null,
					"AQAAAMoAAAAAAAAAygAAAAAAAAABAAAALQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLAAAAAAAAAMsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMoAAAAAAAAAywAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKAAAAAAAAAMoAAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAAAxBgAALS0tCnRpdGxlOiAiUHJvbXB0IHRpcHMiCmhpZGRlbjogZmFsc2UKLS0tCgpUbyBleHRyYWN0IGZyb20gZG9jdW1lbnRzLCBkZXNjcmliZSB5b3VyIHRhcmdldCBkYXRhIHVzaW5nIFNlbnNpYmxlJ3MgcHJvbXB0LWF1dGhvcmluZyBlbnZpcm9ubWVudCwgKlNlbnNpYmxlIEluc3RydWN0Ki4gU2Vuc2libGUgSW5zdHJ1Y3QgaXMgYSBsYXJnZSBsYW5ndWFnZSBtb2RlbCAoTExNKS1iYXNlZCBzdWJzZXQgb2YgKlNlbnNlTUwqLCBTZW5zaWJsZSdzIEpTT04tYmFzZWQgZG9jdW1lbnQgZXh0cmFjdGlvbiBxdWVyeSBsYW5ndWFnZS4gQnkgY29tYmluaW5nIFNlbnNpYmxlIEluc3RydWN0IGFuZCBTZW5zZU1MLCB5b3UgY2FuIGV4dHJhY3QgZGF0YSBmcm9tIGEgcmFuZ2Ugb2YgZG9jdW1lbnQgdHlwZXMsIGZyb20gaGlnaGx5IHN0cnVjdHVyZWQgYnVzaW5lc3MgZm9ybXMgdG8gdW5zdHJ1Y3R1cmVkIHJlc2VhcmNoIGRvY3VtZW50cy4KClNlZSB0aGUgZm9sbG93aW5nIHRvcGljcyBmb3IgdGlwcyBvbiBjb25maWd1cmluZyBleHRyYWN0aW9ucyBpbiBTZW5zaWJsZSBJbnN0cnVjdDoKCnwgTWV0aG9kICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEV4YW1wbGUgdXNlIGNhc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE5vdGVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8CnwgW0xpc3RdKGRvYzpsaXN0LXRpcHMpIG1ldGhvZCAgICAgICB8IEZvciBlYWNoIHZlaGljbGUgaW4gYW4gYXV0byBpbnN1cmFuY2UgZGVjbGFyYXRpb24sIGV4dHJhY3QgdGhlIFZJTiwgbW9kZWwsIGFuZCB5ZWFyLiB8IEV4dHJhY3RzIGEgbGlzdCBvZiBkYXRhIG91dCBvZiBhIGRvY3VtZW50LCB3aGVyZSB5b3UgZG9uJ3Qga25vdyBob3cgdGhlIGRhdGEgYXJlIHJlcHJlc2VudGVkLiB8CnwgW05MUCBUYWJsZV0oZG9jOnRhYmxlLXRpcHMpIG1ldGhvZCB8IEZvciBlYWNoIHRyYW5zYWN0aW9uIGluIGEgYmFuayBzdGF0ZW1lbnQgdGFibGUsIGV4dHJhY3QgdGhlIGRhdGUgYW5kIGFtb3VudC4gfCBFeHRyYWN0cyBhIGxpc3Qgb2YgZGF0YSBvdXQgb2YgYSBkb2N1bWVudCwgd2hlcmUgeW91IGtub3cgdGhleSdyZSBpbiBhIHRhYmxlLiB8CnwgW1F1ZXJ5IEdyb3VwXShkb2M6cXVlcnktZ3JvdXAtdGlwcykgbWV0aG9kICAgICB8ICJXaGVuIGRvZXMgdGhlIHBvbGljeSBwZXJpb2QgZW5kPyI8YnIvPiJXaGF0IGFyZSB0aGUgbGFzdCA0IG51bWJlcnMgb2YgdGhlIGFjY291bnQ/IiB8IEV4dHJhY3RzIGEgc2luZ2xlIGZhY3Qgb3IgZGF0YSBwb2ludC4gICAgICAgICAgICAgICAgICAgICAgICB8CgpOb3Rlcwo9PT09CgpGb3IgbGF5b3V0LWJhc2VkIGV4dHJhY3Rpb24gbWV0aG9kcywgc2VlIFttZXRob2RzXShkb2M6bWV0aG9kcykuCgAAAAAAAAAAMQYAAAAAAAAAAAAAAAAAAAAAAAAxBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLAAAAAAAAAMsAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "v0/llm-based extractions/3000 - prompt.md",
			"settings":
			{
				"buffer_size": 9725,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"cut",
					null,
					"AQAAAOcWAAAAAAAA5xYAAAAAAAAaAAAAUXVlcnkgR3JvdXAgbWV0aG9kLW1ldGhvZHM",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnFgAAAAAAAAEXAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "llmpba"
					},
					"BgAAAOcWAAAAAAAA6BYAAAAAAAAAAAAA6BYAAAAAAADpFgAAAAAAAAAAAADpFgAAAAAAAOoWAAAAAAAAAAAAAOoWAAAAAAAA6xYAAAAAAAAAAAAA6xYAAAAAAADsFgAAAAAAAAAAAADsFgAAAAAAAO0WAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnFgAAAAAAAOcWAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					3,
					"left_delete",
					null,
					"AwAAAOwWAAAAAAAA7BYAAAAAAAABAAAAYesWAAAAAAAA6xYAAAAAAAABAAAAYuoWAAAAAAAA6hYAAAAAAAABAAAAcA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtFgAAAAAAAO0WAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "-based-methods"
					},
					"DgAAAOoWAAAAAAAA6xYAAAAAAAAAAAAA6xYAAAAAAADsFgAAAAAAAAAAAADsFgAAAAAAAO0WAAAAAAAAAAAAAO0WAAAAAAAA7hYAAAAAAAAAAAAA7hYAAAAAAADvFgAAAAAAAAAAAADvFgAAAAAAAPAWAAAAAAAAAAAAAPAWAAAAAAAA8RYAAAAAAAAAAAAA8RYAAAAAAADyFgAAAAAAAAAAAADyFgAAAAAAAPMWAAAAAAAAAAAAAPMWAAAAAAAA9BYAAAAAAAAAAAAA9BYAAAAAAAD1FgAAAAAAAAAAAAD1FgAAAAAAAPYWAAAAAAAAAAAAAPYWAAAAAAAA9xYAAAAAAAAAAAAA9xYAAAAAAAD4FgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADqFgAAAAAAAOoWAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiGAAAAAAAAGIYAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "v0/best-practices/5000 - guides/1000 - performance.md",
			"settings":
			{
				"buffer_size": 3752,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAACoDgAALS0tCnRpdGxlOiAiT3B0aW1pemluZyBleHRyYWN0aW9uIHBlcmZvcm1hbmNlIgpoaWRkZW46IGZhbHNlCgotLS0KClRvIGltcHJvdmUgZXh0cmFjdGlvbiBwZXJmb3JtYW5jZSwgeW91IGNhbiBvcHRpbWl6ZToKCi0gZG9jdW1lbnQgcGVyZm9ybWFuY2UKLSBkb2N1bWVudCB0eXBlIHBlcmZvcm1hbmNlCgpOb3RlIHRoYXQgdGhlIG51bWJlciBvZiBkb2N1bWVudHMgeW91IHN1Ym1pdCBmb3IgZXh0cmFjdGlvbiBoYXMgbm8gbm90aWNlYWJsZSBlZmZlY3Qgb24gcGVyZm9ybWFuY2UuIEVhY2ggZG9jdW1lbnQgZ2V0cyBpdHMgb3duIHdvcmtlciBpbiBwYXJhbGxlbC4KCkRvY3VtZW50IHBlcmZvcm1hbmNlCi0tLS0KCgpJbiBhbiBpZGVhbCBwZXJmb3JtYW5jZSBzY2VuYXJpbywgeW91IGV4dHJhY3QgZGF0YSBmcm9tIGRpZ2l0YWxseSBnZW5lcmF0ZWQgUERGcyB1c2luZyB0ZXh0LWJhc2VkIG9yIGNvb3JkaW5hdGUtYmFzZWQgU2Vuc2libGUgbWV0aG9kcywgc3VjaCBhcyBMYWJlbCwgUm93LCBSZWdpb24sIFRleHQgVGFibGUsIGFuZCBEb2N1bWVudCBSYW5nZS4KCkluIG9yZGVyIG9mIGxhcmdlc3QgdG8gc21hbGxlc3QgaW1wYWN0LCB0aGVzZSBmYWN0b3JzIGFkZCBzZWNvbmRzIHRvIHRoZSBpZGVhbCBkb2N1bWVudCBwcm9jZXNzaW5nIHRpbWU6CgoqKk92ZXIgMTAgc2Vjb25kcyBwZXIgZG9jdW1lbnQqKgoKfCBGYWN0b3IgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBOb3RlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAp8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8Cnwgd2hvbGUtZG9jdW1lbnQgT0NSIGZvciBkb2N1bWVudCBpbWFnZXMgfCBTZW5zaWJsZSB0YWtlcyAxMCBzZWNvbmRzIG9yIG1vcmUgdG8gT0NSIGFuIGVudGlyZSBkb2N1bWVudC4gWW91IGNhbiBzcGVlZCBPQ1IgdXAgZm9yIGRvY3VtZW50cyB0aGF0IGFyZSAyNSBwYWdlcyBhbmQgc2hvcnRlciBieSBjaG9vc2luZyBTZW5zaWJsZSdzIEdvb2dsZSBPQ1Igb3B0aW9uIGZvciBhIGRvY3VtZW50IHR5cGUuIHwKfCB3aG9sZS1kb2N1bWVudCB0YWJsZSByZWNvZ25pdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBBdm9pZCBjb25maWd1cmluZyBTZW5zaWJsZSB0byBzZWFyY2ggYSB3aG9sZSBkb2N1bWVudCBmb3IgdGFibGVzLiBJbnN0ZWFkLCBjb25maWd1cmUgYSB0YWJsZSBzdG9wLiBGb3IgZXhhbXBsZXMsIHNlZSBhbnkgb2YgdGhlIHRhYmxlIFttZXRob2RzXShkb2M6dGFibGUtbWV0aG9kcykuIHwKCiAqKlVuZGVyIDUgc2Vjb25kcyBwZXIgZG9jdW1lbnQqKgoKfCBGYWN0b3IgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTm90ZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwKfCBPQ1IgcHJlcHJvY2Vzc29yICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU29tZSBkb2N1bWVudHMgbWl4IGRpZ2l0YWwgdGV4dCB3aXRoIHRleHQgaW1hZ2VzLCBmb3IgZXhhbXBsZSBieSBlbWJlZGRpbmcgc2Nhbm5lZCBwYWdlcyBpbiBhIGRpZ2l0YWwgUERGLiBTcGVlZCB0aGlzIHVwIGJ5IE9DUmluZyBzZWxlY3QgcGFnZXMsIG5vdCB0aGUgd2hvbGUgZG9jdW1lbnQuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtPQ1IgcHJlcHJvY2Vzc29yXShkb2M6b2NyKS4gfAp8IEZpeGVkIFRhYmxlcyB3aXRoIHN0b3BzLDxici8+TmVhcmVzdCBDaGVja2JveCBtZXRob2QgfCBTZW5zaWJsZSBwcm9jZXNzZXMgRml4ZWQgVGFibGVzIHRoYXQgaW5jbHVkZSBhIFN0b3AgcGFyYW1ldGVyIGluIGxlc3MgdGhhbiA1IHNlY29uZHMuIE9yLCBjb252ZXJ0IHRvIHRoZSBmYXN0ZXIgW1RleHQgVGFibGVdKGRvYzp0ZXh0LXRhYmxlKSBtZXRob2QsIHdoaWNoIHNraXBzIHRhYmxlIHJlY29nbml0aW9uLiB8CnwgTExNLWJhc2VkIG1ldGhvZHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEZvciBtZXRob2RzIGJhc2VkIG9uIGxhcmdlIGxhbmd1YWdlIG1vZGVscyAoTExNcyksIHNlZSBbU2Vuc2libGUgSW5zdHJ1Y3RdKGRvYzppbnN0cnVjdCkgfAoKICoqVW5kZXIgMSBzZWNvbmQgcGVyIGRvY3VtZW50KioKClNvbWUgU2Vuc2libGUgbWV0aG9kcyB1c2UgcGl4ZWxzLCBmb3IgZXhhbXBsZSB0byByZWNvZ25pemUgYm9yZGVycy4gUGl4ZWwgcmVjb2duaXRpb24gZm9yIFBERiBkb2N1bWVudHMgcmVxdWlyZXMgcmVuZGVyaW5nIGEgUERGIHBhZ2UsIHdoaWNoIGNhbiB0YWtlIGh1bmRyZWRzIG9mIG1pbGxpc2Vjb25kcy4gVG8gaW1wcm92ZSBwcm9jZXNzaW5nIHRpbWUsIHVzZSBjb29yZGluYXRlLWJhc2VkIGFsdGVybmF0aXZlcyB0byB0aGVzZSBtZXRob2RzLiAKCnwgRmFjdG9yICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTm90ZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfAp8IEJveCBtZXRob2QgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFRvIGltcHJvdmUgcHJvY2Vzc2luZyBzcGVlZCwgY29udmVydCB0aGUgbW9yZSBmbGV4aWJsZSBCb3ggbWV0aG9kIHRvIHRoZSBzdHJpY3RseSBjb29yZGluYXRlLWJhc2VkIFJlZ2lvbiBtZXRob2QuIHwKfCBTaWduYXR1cmUgbWV0aG9kLDxici8+IENoZWNrYm94IG1ldGhvZCw8YnIvPltpbWFnZSBjb29yZGluYXRlIGV4dHJhY3Rpb25dKGRvYzpkb2N1bWVudC1yYW5nZSkgfCBUaGVzZSBtZXRob2RzIGhhdmUgbm8gYWx0ZXJuYXRpdmVzLiBTZWUgdGhlIGZvbGxvd2luZyBzZWN0aW9uIGZvciB3YXlzIHRvIGF2b2lkIHJ1bm5pbmcgdGhlc2UgbWV0aG9kcyBleGNlcHQgd2hlbiBuZWNlc3NhcnkuIHwKCkRvY3VtZW50IHR5cGUgcGVyZm9ybWFuY2UKLS0tLQoKCkJ5IGRlZmF1bHQsIFNlbnNpYmxlIHJ1bnMgYWxsIHRoZSBjb25maWdzIGluIGEgZG9jdW1lbnQgdHlwZSBiZWZvcmUgY2hvb3NpbmcgdGhlIGJlc3Qgb25lIGZvciBhIGdpdmVuIGRvY3VtZW50LiBJZiB5b3VyIGRvY3VtZW50IHR5cGUgY29udGFpbnMgY29uZmlncyB3aXRoIGNvbXB1dGF0aW9uYWxseSBleHBlbnNpdmUgbWV0aG9kcywgeW91IGNhbiBpbXByb3ZlIHBlcmZvcm1hbmNlIGJ5IHNlbGVjdGl2ZWx5IHJ1bm5pbmcgYW5kIHNraXBwaW5nIGNvbmZpZ3MuICBVc2UgZmluZ2VycHJpbnRzIHRvIHRlc3Qgd2hldGhlciBkb2N1bWVudHMgY29udGFpbiBtYXRjaGluZyB0ZXh0IGJlZm9yZSBza2lwcGluZyBvciBydW5uaW5nIGNvbmZpZ3MuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgW2ZpbmdlcnByaW50XShkb2M6ZmluZ2VycHJpbnQpLgoAAAAAAAAAAKgOAAAAAAAAAAAAAAAAAAAAAAAAqA4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPCAAAAAAAAI8IAAAAAAAAAAAAAAAA8L8"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ui:",
				"UI: Select Color Scheme"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/franc/Documents/GitHub/sensible-docs",
		"/C/Users/franc/Documents/GitHub/sensible-docs/.github",
		"/C/Users/franc/Documents/GitHub/sensible-docs/.github/workflows",
		"/C/Users/franc/Documents/GitHub/sensible-docs/scripts",
		"/C/Users/franc/Documents/GitHub/sensible-docs/scripts/check_links",
		"/C/Users/franc/Documents/GitHub/sensible-sdk-js",
		"/C/Users/franc/Documents/GitHub/sensible-api-py"
	],
	"file_history":
	[
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - natural-language-methods/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/llm-based extractions/instruct/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/welcome/00 - draft-overview.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/welcome/2000 - getting-started-ai.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/8000 - concepts/0300 - accuracy-measures.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/7000 - deprecated-methods/1500 - deprecated-query.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/5000 - preprocessors/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - natural-language-methods/1500 - query-group.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - natural-language-methods/1000 - list.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - field-query-object/1300 - types.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/1000 - senseml-reference-introduction.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/llm-based extractions/3000 - prompt.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/layout-based-extractions/1000 - getting-started.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - field-query-object/1200 - method.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - field-query-object/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/best-practices/3000 - confidence.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - methods/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/7000 - deprecated-methods/2100 - deprecated-table.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/7000 - deprecated-methods/2000 - deprecated-tfidf.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/7000 - deprecated-methods/1000 - deprecated-key-value.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/5000 - preprocessors/1100 - page-filter.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - natural-language-methods/2000 - topic.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - methods/1500 - invoice.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/best-practices/5000 - guides/1000 - performance.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/welcome/6000 - author.md",
		"/C/Users/franc/Documents/GitHub/sensible-sdk-js/README.md",
		"/C/Users/franc/Documents/GitHub/sensible-api-py/README.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/8000 - concepts/4600 - table-methods.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - natural-language-methods/1600 - summarizer.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - natural-language-methods/1000 - nlp-table.md",
		"/C/Users/franc/Documents/GitHub/sensible-code-examples/readme.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/8000 - concepts/1600 - file-types.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/7500 - advanced-computed-field-methods/0700 - get-file-metadata.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/6800 - document-type-settings/4000 - ocr-level.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/6500 - sections/6000 - sections-example-table-grid.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/6500 - sections/4000 - sections-example-nested-columns.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/4000 - quick-extraction/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/2000 - zapier/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/2000 - zapier/1000 - zapier-getting-started.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/best-practices/5000 - guides/3000 - go-live.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/best-practices/5000 - guides/2000 - troubleshoot.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/best-practices/5000 - guides/1000 - test-before-integrating-configs.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/6700 - config-settings/2000 - verbosity.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - methods/2100 - deprecated-table.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/llm-based extractions/instruct/2000 - list-tips.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - methods/1400 - fixed-table.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/7500 - advanced-computed-field-methods/0100 - add-computed-fields.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/welcome/cheat/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/6000 - computed-field-methods/1500 - zip.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - methods/2200 - text-table.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - methods/2000 - row.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/llm-based extractions/instruct/3000 - table-tips.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/4000 - quick-extraction/7600 - excel-reference.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/llm-based extractions/instruct/1000 - query-group-tips.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - natural-language-methods/1500 - draft-group.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - natural-language-methods/1500 - query.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/llm-based extractions/instruct/1000 - query-tips.md",
		"/C/Users/franc/Documents/GitHub/bekindtoyourspine/CNAME",
		"/C/Users/franc/Documents/GitHub/sensible-docs/openapi_extraction.yml",
		"/C/Users/franc/Downloads/for the following table represented in json,",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/5000 - preprocessors/1060 - nlp.md",
		"/C/Users/franc/Downloads/bal",
		"/C/Users/franc/Downloads/balasdf",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/6800 - document-type-settings/1000 - fingerprint-mode.md",
		"/C/Users/franc/Downloads/asdfasdf",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - field-query-object/1100 - match.md",
		"/C/Users/franc/Downloads/fdas.yaml",
		"/C/Users/franc/Documents/GitHub/sensible/.git/info/exclude",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/assets/v0/json/verbose_extraction_3_verbosity.json",
		"/C/Users/franc/Pictures/greenshot pics/2023-12-15 12_52_16-Franco Fontana _ Basilicata (1986) _ Available for Sale _ Artsy.png",
		"/C/Users/franc/Documents/GitHub/sensible-code-examples/node/readme.md",
		"/C/Users/franc/Documents/GitHub/sensible-code-examples/python/readme.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/welcome/3000 - integrate.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/layout-based-extractions/2000 - library-quickstart.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/openapi_configuration.yml",
		"/C/Users/franc/Documents/GitHub/sensible-docs/scripts/check_links/check_links.rb",
		"/C/Users/franc/Documents/GitHub/sensible-docs/.github/workflows/check_links.yml",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/best-practices/4000 - validate-extractions.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/6500 - sections/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/api/1000 - api-tutorial/1000 - api-tutorial-sync.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - field-query-object/1000 - anchor.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/8000 - concepts/3600 - section-nuances.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - methods/1300 - document-range.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/3000 - quickstart.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/openapi_classification.yml",
		"/C/Users/franc/Documents/GitHub/sensible-docs/README.md",
		"/?wsl.localhost/Ubuntu-20.04/home/franc/sensible-typescript/extract_dir_1_excel.mjs",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/draft-python.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/api/1000 - api-tutorial/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/layout-based-extractions/5000 - concepts/1600 - file-types.md",
		"/C/Users/franc/Documents/GitHub/sensible-api-py/draft_python.md",
		"/C/Users/franc/Documents/GitHub/sensible-code-examples/python/extract_doc.py",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/sdk-quickstarts.md",
		"/C/ProgramData/Vanta/vanta.conf",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/sdk-reference/draft-node-example.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/sdk-reference/sdk-node.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/write-prompts/instruct/1000 - query-tips.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/SDK quickstarts/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/SDK quickstarts/quickstart-node.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/sdk-reference/draft-javascript-example.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/sdk-reference/sdk-javascript.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/SDK quickstarts/quickstart-javascript.md"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 125.6,
		"where_history":
		[
			"*.md, *.yaml, *.yml",
			"*.md, ",
			"*.md, *.yaml, *.yml",
			"*.md",
			"*.md, *.yaml, *.yml",
			"*.md, ",
			"*.md, *.yaml, *.yml",
			"*.md, ",
			"*.md, *.yaml, *.yml",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync, C:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js, C:\\Users\\franc\\Documents\\GitHub\\sensible-code-examples,*.md, *.yaml, *.yml",
			"<open files>",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync, C:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js, C:\\Users\\franc\\Documents\\GitHub\\sensible-code-examples,*.md, *.yaml, *.yml",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\sdk-reference\\, C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\sdk-reference\\",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync, C:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js, C:\\Users\\franc\\Documents\\GitHub\\sensible-code-examples,*.md, *.yaml, *.yml",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync, C:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js,*.md, *.yaml, *.yml",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0, C:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js,*.md, *.yaml, *.yml",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0, C:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0; C:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"query-group#exa",
			"query-group#",
			"handwriting",
			"direct-text",
			"xmajor",
			"superscr",
			"bounding box",
			"doc:invoice",
			"invoice",
			"hard to mat",
			"stopoffsety",
			"\"all\"",
			"layout based",
			"are also",
			"language-",
			"Query Group method-methods",
			"method-method",
			"based",
			"power",
			"powered",
			"LLM-powered",
			"powered",
			"large-language",
			"signature",
			"paragraph",
			"large-language",
			"doc:methods#",
			"methods#",
			"large-lan",
			"nlp [^t]",
			"nlp ^[t]",
			"nlp",
			"llm",
			"natural",
			"llm-based-methods",
			"[Natural-language methods](doc:llm-based-methods)",
			"llm-based-methods",
			"llm-based",
			"[NLP methods](doc:llm-based-methods)",
			"[Natural language methods](doc:llm-based-methods)",
			"doc:llm-based-methods",
			"doc:natural-language-methods",
			"natural-language",
			"or query",
			"natural-language",
			"natural language",
			"natural-language",
			"api",
			"`document_name` p",
			"API",
			"sdk",
			"API",
			"zapier.com",
			"retrocedant",
			"doc:tf",
			"deprecate",
			"doc:regex",
			"doc:signature",
			"doc:key-value",
			"key-value",
			"key-balue",
			"advanced-methods",
			"\"fixedTable",
			"fixedTable",
			"\"not\"",
			"annotateS",
			"detectTableStructureOnly",
			"doc\\:table",
			"doc\\:table^-",
			"doc:table#",
			"doc:table)",
			"doc:table",
			"table",
			"Table",
			"fixed-table_merged_cells.pdf",
			"\\\"id\\\"\\: \\\"table\\\"",
			"process",
			"sensible process ",
			"\"id\": \"table\"",
			"\"id\": \"ta",
			"\"table\"",
			"Table",
			"query-tips",
			"(doc:query",
			"(query",
			"query-tips",
			"pagehin",
			"page hinting",
			"Query",
			"query",
			"Query method",
			"(doc:query#",
			"[Query](doc:query#",
			"doc:query#",
			"doc:query",
			"(doc:query-group-tips",
			"(doc:query-tips",
			"(query-tips",
			"(query",
			"[query",
			"(doc:query-tips)",
			"[Query](doc:query-tips)",
			"(doc:query-tips)",
			"(doc:query)",
			"Query method",
			"[Query method](doc:query)",
			"[Query](doc:query)",
			"\"query\"",
			"column id",
			"2do",
			"todo",
			"annotate",
			"line-sort",
			"2do",
			"todo",
			"tips",
			"fingerprint.*50",
			"orange",
			"the filename in the extraction re",
			"producer",
			"filename",
			"gas_dec",
			"accord_25_test",
			"rate_confirmation_ch",
			"file t",
			"docx",
			"micros",
			"thorough"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"doc:deprecated-invoice",
			"LLM-based",
			"large language",
			"[LLM-based methods](doc:llm-based-methods)",
			"doc:llm-based-methods",
			"Query Group method",
			"(doc:query-group#",
			"[Query Group](doc:query-group#",
			"[Query Group](doc:query-group-tips)",
			"[Query Group](doc:query-group)",
			"model",
			"insurer",
			"**Publish configuration**",
			"from sensibleapi",
			"index.py",
			"Python",
			"size and types",
			"https://github.com/sensible-hq/sensible-api-js#readme",
			"Node",
			"node",
			"-node",
			"node",
			"Node",
			"node",
			"doc:config-settings"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 41045,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										284,
										291
									],
									[
										553,
										560
									],
									[
										613,
										620
									],
									[
										943,
										950
									],
									[
										1784,
										1791
									],
									[
										2426,
										2433
									],
									[
										2874,
										2881
									],
									[
										4322,
										4329
									],
									[
										4803,
										4810
									],
									[
										4995,
										5002
									],
									[
										5037,
										5044
									],
									[
										5110,
										5117
									],
									[
										5173,
										5180
									],
									[
										5292,
										5299
									],
									[
										5325,
										5332
									],
									[
										5514,
										5521
									],
									[
										5585,
										5592
									],
									[
										5641,
										5648
									],
									[
										5687,
										5694
									],
									[
										5984,
										5991
									],
									[
										6813,
										6820
									],
									[
										6862,
										6869
									],
									[
										6950,
										6957
									],
									[
										7009,
										7016
									],
									[
										7089,
										7096
									],
									[
										7121,
										7128
									],
									[
										7244,
										7251
									],
									[
										7331,
										7338
									],
									[
										7615,
										7622
									],
									[
										7772,
										7779
									],
									[
										7933,
										7940
									],
									[
										8082,
										8089
									],
									[
										8248,
										8255
									],
									[
										8361,
										8368
									],
									[
										8696,
										8703
									],
									[
										9741,
										9748
									],
									[
										11262,
										11273
									],
									[
										11318,
										11329
									],
									[
										11364,
										11375
									],
									[
										12181,
										12193
									],
									[
										13923,
										13935
									],
									[
										14402,
										14414
									],
									[
										15864,
										15876
									],
									[
										16330,
										16338
									],
									[
										16568,
										16576
									],
									[
										16637,
										16645
									],
									[
										16729,
										16737
									],
									[
										17076,
										17084
									],
									[
										17179,
										17187
									],
									[
										19320,
										19328
									],
									[
										19405,
										19413
									],
									[
										19623,
										19631
									],
									[
										19921,
										19929
									],
									[
										21739,
										21747
									],
									[
										21824,
										21832
									],
									[
										22009,
										22017
									],
									[
										22906,
										22914
									],
									[
										24481,
										24487
									],
									[
										25529,
										25535
									],
									[
										25871,
										25877
									],
									[
										26259,
										26270
									],
									[
										26602,
										26613
									],
									[
										26726,
										26737
									],
									[
										26853,
										26864
									],
									[
										26944,
										26955
									],
									[
										27031,
										27042
									],
									[
										27193,
										27204
									],
									[
										27403,
										27414
									],
									[
										28338,
										28349
									],
									[
										29320,
										29331
									],
									[
										30041,
										30052
									],
									[
										30357,
										30368
									],
									[
										30452,
										30463
									],
									[
										30809,
										30820
									],
									[
										31491,
										31502
									],
									[
										32100,
										32111
									],
									[
										32724,
										32735
									],
									[
										33641,
										33653
									],
									[
										34250,
										34262
									],
									[
										35032,
										35044
									],
									[
										35685,
										35697
									],
									[
										35923,
										35935
									],
									[
										35979,
										35991
									],
									[
										36029,
										36041
									],
									[
										36074,
										36086
									],
									[
										36673,
										36685
									],
									[
										37798,
										37810
									],
									[
										38159,
										38171
									],
									[
										39084,
										39099
									],
									[
										39129,
										39144
									],
									[
										40216,
										40231
									],
									[
										41045,
										41045
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								40194,
								40194
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 57,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 14725.6,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "v0/senseml-reference/3000 - llm-based-methods/1500 - query-group.md",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1082.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "v0/senseml-reference/3000 - llm-based-methods/1000 - nlp-table.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15451,
						"regions":
						{
						},
						"selection":
						[
							[
								5242,
								5242
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1456.2,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "v0/senseml-reference/2000 - methods/1400 - fixed-table.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13650,
						"regions":
						{
						},
						"selection":
						[
							[
								4539,
								4472
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 856.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "v0/senseml-reference/2000 - methods/1000 - box.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12834,
						"regions":
						{
						},
						"selection":
						[
							[
								1065,
								1065
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 223.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "v0/senseml-reference/7000 - deprecated-methods/1500 - deprecated-invoice.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8197,
						"regions":
						{
						},
						"selection":
						[
							[
								569,
								569
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 244.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "v0/senseml-reference/2000 - field-query-object/1300 - types.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31305,
						"regions":
						{
						},
						"selection":
						[
							[
								30119,
								30119
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 27402.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "v0/integrations/4000 - quick-extraction/7600 - excel-reference.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14501,
						"regions":
						{
						},
						"selection":
						[
							[
								6898,
								6898
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5177.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "v0/senseml-reference/2000 - methods/1300 - document-range.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10363,
						"regions":
						{
						},
						"selection":
						[
							[
								9174,
								9174
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8185.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "v0/llm-based extractions/instruct/index.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1585,
						"regions":
						{
						},
						"selection":
						[
							[
								203,
								203
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "v0/llm-based extractions/3000 - prompt.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9725,
						"regions":
						{
						},
						"selection":
						[
							[
								6242,
								6242
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1631.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "v0/best-practices/5000 - guides/1000 - performance.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3752,
						"regions":
						{
						},
						"selection":
						[
							[
								2191,
								2191
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 531.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "f_project.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 257.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 592.0
	},
	"selected_group": 0,
	"settings":
	{
		"last_automatic_layout":
		[
			[
				0,
				0,
				1,
				1
			]
		]
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 285.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
