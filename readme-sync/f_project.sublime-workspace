{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"contents": "Searching 148 files for \"API\" (case sensitive)\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\internal-doc-guidelines.md:\n    5  ### Publishing the docs to readme\n    6  \n    7: To publish the markdown docs in this repository to ReadMe.io at https://docs.sensible.so/docs, commit to main. This triggers GitHub Actions that perform actions conditionally, such as syncing the API reference, syncing the guide docs, checking links, and styling images.\n    8  \n    9  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\1500 - examples.md:\n    3  hidden: false\n    4  ---\n    5: For starter code calling the Sensible API, see the [code example repo](https://github.com/sensible-hq/sensible-code-examples).\n    6  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\2000 - api-reference.md:\n    1  ---\n    2: title: \"API reference\"\n    3  hidden: false\n    4  ---\n    5: To integrate Sensible with your application, see the [API reference](https://docs.sensible.so/reference).\n    6  \n    7  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\batch-api.md:\n   22     curl 'https://api.sensible.so/v0/extract/batch' \\\n   23     --header 'Content-Type: application/json' \\\n   24:    --header 'Authorization: Bearer YOUR_API_KEY' \\\n   25     --data '{\"documentNames\":[\"doc1.pdf\", \"doc2.pdf\"],\n   26     \"description\":\"test batch\",\n   ..\n   52     curl 'https://api.sensible.so/v0/extract/batch/upload_urls/c73c7932-82c0-438c-a339-175d7d0771bd/0/1' \\\n   53     --header 'Content-Type: application/json' \\\n   54:    --header 'Authorization: Bearer YOUR_API_KEY' \\\n   55  ```\n   56  \n   ..\n   98  ```json\n   99     curl 'https://api.sensible.so/v0/documents/0b34ce99-bf15-4e0d-a391-b03e4c830414' \\\n  100:    --header 'Authorization: Bearer YOUR_API_KEY'\n  101  ```\n  102  \n  ...\n  123     ```curl\n  124     curl 'https://api.sensible.so/v0/generate_excel_from_batch/c73c7932-82c0-438c-a339-175d7d0771bd' \\\n  125:    --header 'Authorization: Bearer YOUR_API_KEY'\n  126     ```\n  127  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\1000 - api-tutorial\\1000 - api-tutorial-sync.md:\n    9  ---\n   10  \n   11: If you're new to APIs, use this tutorial to return document data from an example tax form.\n   12  \n   13: Or, if you're familiar with APIs:\n   14  \n   15: - see the [API quickstart](doc:quickstart) to get a sample API response.\n   16  \n   17  - explore the Sensible Postman collection:\n   ..\n   27  ----\n   28  \n   29: To run a Sensible API request in Postman, follow these steps:\n   30  \n   31: 1. Copy the following code sample, and replace `YOUR_API_KEY` with your [API key](https://app.sensible.so/account/):\n   32  \n   33  \n   ..\n   35  curl --request POST \\\n   36    --url 'https://api.sensible.so/v0/extract/tax_forms' \\\n   37:   --header 'Authorization: Bearer YOUR_API_KEY' \\\n   38    --header 'Content-Type: application/pdf' \\\n   39    --data-binary '@/PATH_TO_DOWNLOADED_DOCUMENT.pdf'\n   ..\n   96  ```\n   97  \n   98: **Note:**  Did you notice that this API call doesn't specify a config (`1040_2021`)? As a convenience, Sensible evaluates all the configs for the document type  (`tax_forms`), and **automatically** chooses the one that fits best.\n   99  \n  100  (Optional) See how it works in the Sensible app\n  ...\n  107  2. Navigate to the [1040 configuration](https://app.sensible.so/editor/?d=tax_forms&c=1040_2021&g=1040_2021_sample) in the **tax forms** document type.\n  108  \n  109: 3. Visually examine the example document (middle pane), config (left pane), and extracted data (right pane) to better understand the configuration for the API call you just ran:\n  110  \n  111  ![q](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_app.png)\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\1000 - api-tutorial\\2000 - api-tutorial-async-1.md:\n   30  To try out the [extract_from_url](https://sensiblehq.readme.io/reference#extract-from-url) endpoint, let's use an example document hosted in GitHub:\n   31  \n   32: 1. Copy the following code sample and replace YOUR_API_KEY with your [API key](https://app.sensible.so/account/):\n   33  \n   34     ```json\n   35     curl --request POST 'https://api.sensible.so/v0/extract_from_url/tax_forms' \\\n   36:    --header 'Authorization: Bearer YOUR_API_KEY' \\\n   37     --header 'Content-Type: application/json' \\\n   38     --data-raw '{\"document_url\":\"https://github.com/sensible-hq/sensible-configuration-library/raw/main/tax_forms/1040/2021/1040_2021_sample.pdf\"}'\n   ..\n   80     Copy the document extraction `id` from that response. You'll use it to download the document extraction.\n   81     \n   82: 3. Copy the following code sample and replace YOUR_EXTRACTION_ID and YOUR_API_KEY:\n   83  \n   84  ```json\n   85  curl --request GET 'https://api.sensible.so/v0/documents/YOUR_EXTRACTION_ID' \\\n   86: --header 'Authorization: Bearer YOUR_API_KEY'\n   87  ```\n   88  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\1000 - api-tutorial\\2100 - api-tutorial-async-2.md:\n   29  Generate a temporary, one-time Sensible URL for a document: \n   30  \n   31:   1. Copy the following code sample and replace `YOUR_API_KEY` with your [API key](https://app.sensible.so/account/):\n   32  \n   33  \n   ..\n   35  curl --request POST 'https://api.sensible.so/v0/generate_upload_url/tax_forms' \\\n   36  --header 'Content-Type: application/json' \\\n   37: --header 'Authorization: Bearer YOUR_API_KEY' \\\n   38  --data '{\"content_type\":\"application/pdf\"}'\n   39  ```\n   ..\n  121  2. Copy the document extraction `id` from that response.\n  122  \n  123: 3. Copy the following code sample and replace YOUR_EXTRACTION_ID and YOUR_API_KEY:\n  124  \n  125  ```json\n  126  curl --request GET 'https://api.sensible.so/v0/documents/YOUR_EXTRACTION_ID' \\\n  127: --header 'Authorization: Bearer YOUR_API_KEY'\n  128  ```\n  129  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\1000 - api-tutorial\\3000 - api-tutorial-webhook.md:\n    4  ---\n    5  \n    6: For asynchronous extractions, you can retrieve extraction results using either API endpoints or a webhook. A webhook allows you to receive the extraction as a push, rather than waiting for responses from API endpoints. \n    7  \n    8  For this tutorial, let's try a webhook in combination with the `/extract_from_url` endpoint. Note you can also use the webhook with the `/generate_upload_url` endpoint and other asynchronous endpoints. \n    .\n   26  ```json\n   27  curl --location --request POST 'https://api.sensible.so/v0/extract_from_url/tax_forms' \\\n   28: --header 'Authorization: Bearer YOUR_API_TOKEN' \\\n   29  --header 'Content-Type: application/json' \\\n   30  --data-raw '{\"document_url\":\"https://github.com/sensible-hq/sensible-configuration-library/raw/main/tax_forms/1040/2021/1040_2021_sample.pdf\",\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\1000 - api-tutorial\\index.md:\n    1  ---\n    2: title: \"API tutorial\"\n    3  hidden: false\n    4  ---\n    5  \n    6: Get started with extracting structured data from documents using the Sensible API.\n    7  \n    8: If you're new to APIs in general, these tutorials are a good starting point.\n    9  \n   10: Or, if you're familiar with APIs:\n   11  \n   12: - see the [API quickstart](doc:quickstart) to get a sample API response.\n   13  \n   14  - explore the Sensible Postman collection:\n   ..\n   22  To follow these tutorials, you need:\n   23  \n   24: - An [API key](https://app.sensible.so/account). Create this key after you sign up for a [Sensible account](https://app.sensible.so/register). \n   25  -  [Postman](https://www.postman.com/) desktop app, or a command line with cURL installed.\n   26  -  An example extraction configuration. See the following section.\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\best-practices\\5000 - guides\\1000 - test-before-integrating-configs.md:\n    7  \n    8  1. In the Sensible app, click **Publish configuration** and choose **Development** to save your updates to a development environment.\n    9: 2. Add the query parameter `?environment=development` to your extraction [API calls](https://docs.sensible.so/reference) to test your updated config.\n   10  \n   11  Environment fallback behavior\n   12  ----\n   13  \n   14: When you  specify `?environment=development` in an API endpoint, Sensible falls back to the production version for each configuration if it can't find a development version.\n   15  \n   16  To understand fallback behavior, imagine the document type `test_doc_type` has the following config versions, which fit a `document_a` with varying degrees of accuracy:\n   ..\n   26   -   `configB` in production (OK fit)\n   27  \n   28: And returns output from  `configB`  (OK fit) in production. Notice that even though the API call specifies  the Development environment, the call returns output from a *production* config because of fallback behavior.\n   29  \n   30  If you don't specify an environment, Sensible ignores development versions and compares:\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\best-practices\\5000 - guides\\2000 - troubleshoot.md:\n    6  Sensible offers you several ways to troubleshoot your configs and extractions.\n    7  \n    8: API logging levels\n    9  ----\n   10  \n   11: To troubleshoot extractions in API responses, you can add a verbosity level to a config. For more information, see [verbosity](doc:verbosity).\n   12  \n   13  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\best-practices\\5000 - guides\\3000 - go-live.md:\n   10  - [ ] If you're working with multiple configurations per document type, is the variable naming consistent across different configurations? (for example, if you extract a field with the ID `customer_full_name` in one config, you shouldn't name it `customer_fullname` in another config).\n   11  - [ ] In your code, have you handled the case where a field in the response object can be null?\n   12: - [ ] Does your system properly handle an error response from the Sensible API or SDK? \n   13: - [ ] Do you have logging around which API calls triggered an error response so that you can retry those documents? \n   14  \n   15  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\document-type-classification\\1000 - classify.md:\n   18  To improve classification results, Sensible recommends that a document type includes a sample set of reference documents that represent the diversity you expect to see in the document type. To use a document type for classification, Sensible requires that the type contains at least one reference document.\n   19  \n   20: To classify documents, use the Sensible API or SDKs.\n   21  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\3000 - quickstart.md:\n    1  ---\n    2: title: \"API quickstart\"\n    3  hidden: false\n    4  \n    .\n    7  Introduction\n    8  ====\n    9: In this quickstart, use an example SenseML configuration and example document to get a quick \"hello world\" API response. \n   10  \n   11  \n   ..\n   19  =====\n   20  \n   21: To run an API call and return extracted, structured data from a downloaded example document: \n   22  \n   23  \n   ..\n   26      **NOTE** In the Sensible app, don't rename the default doc type (**senseml_basics**) or delete the **1_extract_your_first_data** config, or this example fails. \n   27  \n   28: 1. Copy your API key from your [account page](https://app.sensible.so/account/).\n   29  \n   30: 2. Copy the following code example into a plain-text application and replace <YOUR_API_TOKEN> with your API key:\n   31  \n   32  [block:code]\n   ..\n   34    \"codes\": [\n   35      {\n   36:       \"code\": \"curl -L https://github.com/sensible-hq/sensible-docs/raw/main/readme-sync/assets/v0/pdfs/1_extract_your_first_data.pdf \\\\\\n  --output 1_extract_your_first_data.pdf && \\\\\\ncurl --request POST \\\\\\n  --url \\\"https://api.sensible.so/v0/extract/senseml_basics\\\" \\\\\\n  --header \\\"Authorization: Bearer <YOUR_API_TOKEN>\\\" \\\\\\n  --header \\\"Content-Type: application/pdf\\\" \\\\\\n  --data-binary \\\"@1_extract_your_first_data.pdf\\\" \\n\",\n   37        \"language\": \"shell\",\n   38        \"name\": \"Linux/Mac\"\n   39      },\n   40      {\n   41:       \"code\": \"curl -L https://github.com/sensible-hq/sensible-docs/raw/main/readme-sync/assets/v0/pdfs/1_extract_your_first_data.pdf ^\\n  --output 1_extract_your_first_data.pdf && ^\\ncurl --request POST ^\\n  --url \\\"https://api.sensible.so/v0/extract/senseml_basics\\\" ^\\n  --header \\\"Authorization: Bearer <YOUR_API_TOKEN>\\\" ^\\n  --header \\\"Content-Type: application/pdf\\\" ^\\n  --data-binary \\\"@1_extract_your_first_data.pdf\\\" \\n\",\n   42        \"language\": \"shell\",\n   43        \"name\": \"Windows\"\n   ..\n   47  [/block]\n   48  \n   49: 3. Run the code sample in a command prompt. The code downloads an example document (`1_extract_your_first_data.pdf` ) and runs it against an example document type (`senseml_basics`). The following excerpt of the API response shows the extracted document text in the `parsed_document` object: \n   50  \n   51  ```json\n   ..\n   71  2. Navigate to the [first tutorial](https://app.sensible.so/editor/?d=senseml_basics&c=1_extract_your_first_data&g=1_extract_your_first_data) config.\n   72     \n   73: 3. Visually examine the example document (middle pane), config (left pane), and extracted data (right pane) to better understand the API call you just ran:\n   74     \n   75  \n   ..\n   81  ===\n   82  \n   83: - See the [API reference](https://docs.sensible.so/reference/choosing-an-endpoint) and [example code](https://github.com/sensible-hq/sensible-code-examples)\n   84: - If you're new to APIs, see [API tutorials](doc:api-tutorial)\n   85  - To get started with authoring extraction configurations, or configs, for your custom documents, see [Getting Started](doc:getting-started-ai).\n   86  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\2000 - zapier\\1000 - zapier-getting-started.md:\n   96  **Limitations**\n   97  \n   98: - You can configure single-value field output with the Sensible-Zapier integration. For multi-value output such as tables and sections, you can compile document extractions into a spreadsheet or CSV file using Sensible's API or SDK. For more information, see [SenseML to Excel reference](doc:excel-reference).\n   99: - You can extract from single-document files with Zapier. If you want to extract from portfolio files (files that contain multiple documents, for example, insurance application bundles), use the Sensible API or SDKs. \n  100  \n  101  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\2000 - zapier\\2000 - zapier-tutorial-2.md:\n  100  **General Limitations**\n  101  \n  102: - You can configure single-value field output with the Sensible-Zapier integration. For multi-value output such as tables and sections, you can compile document extractions into a spreadsheet or CSV file using Sensible's API. For more information, see [SenseML to Excel reference](doc:excel-reference).\n  103: - You can extract from single-document files with Zapier. If you want to extract from portfolio files (documents that contain multiple documents, for example, insurance application bundles), use the Sensible app, API, or SDK. \n  104  \n  105  **Sensible action limitations**\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\2000 - zapier\\index.md:\n   24  \n   25  \n   26: Every time you run an extraction using the Sensible [app](https://app.sensible.so/quick-extraction), API, or SDK, you can automatically send the data to a destination, for example an email or database, using a **Sensible trigger**: \n   27  \n   28  ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_trigger.png)\n   ..\n   33  ---\n   34  \n   35: You can bypass the Sensible app, API, or SDK and instead trigger Sensible extractions with file actions in Google drive, email, or other supported Zapier apps. Then send the extraction to the destination of your choice with a **Sensible action**.\n   36  \n   37  ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_action.png)\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\4000 - quick-extraction\\index.md:\n   48  [/block]\n   49  \n   50: **Note** Each downloaded Excel file contains the data from one document. To combine extracted documents into one Excel file, use the [Sensible API](https://docs.sensible.so/reference/get-excel-extraction) or Sensible SDKs.\n   51  \n   52  ## Extract from multiple files\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\layout-based-extractions\\1000 - getting-started.md:\n   14  \n   15  - If you instead want to explore without much explanation, then [sign up](https://app.sensible.so/register) for an account and check out our interactive in-app tutorials in the `sensible_instruct_basics` document type.\n   16: - If you want a quick \"hello world\" API response, see the [API quickstart](doc:quickstart).\n   17  \n   18  Get structured data from an auto insurance quote\n   ..\n   29  - [Learn how the config works](doc:getting-started#how-it-works), including key concepts like lines, anchors, and methods\n   30  - [Test the config](doc:getting-started#test-the-config) by running your config against a second, similar auto insurance document\n   31: - [Use the API](doc:getting-started#integrate-with-your-application) or [SDKs](doc:sdk-guides) to integrate your Sensible config with your application\n   32  - [Validate extractions in production](doc:getting-started#validate-extractions-in-production) by using JsonLogic to define expected extracted values and flag unexpected values as warnings or errors\n   33  \n   ..\n  193  - For a deep dive on how the config works, see [the following section](doc:getting-started#how-it-works).\n  194  \n  195: - If you want to skip ahead and try out the API or SDKs, see [Integrate with your application](doc:getting-started#integrate-with-your-application). \n  196  \n  197  How layout-based extraction works\n  ...\n  557  ====\n  558  \n  559: When you're ready to integrate with your application, enable using the config with the Sensible SDKs or API by taking the following steps:\n  560  \n  561  1. Click **Publish configuration**.  The config is still a work in progress, so click **Development**.  Now you can use the query parameter `env=development`  to test the integration before you go to production:![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/quickstart_publish_config.png).\n  562: 2. Use the Sensible SDKs or API to integrate with your application.\n  563  \n  564  Validate extractions in production \n  565  ====\n  566  \n  567: In a previous section, you tested a couple of documents manually. Now it's time to scale up and quality control the extractions by writing tests that run for all API extractions in a doc type.\n  568  \n  569  Use JsonLogic to validate that the extracted information makes sense for the car insurance document:\n  ...\n  608  \n  609  \n  610: 5. To test the validations with a document that's missing information, [try out an API call](doc:api-tutorial-async-1) with the following example document that has these errors:\n  611  \n  612     -  the policy number is missing\n  ...\n  616  | ----------------------------- | ------------------------------------------------------------ |\n  617  \n  618: You should receive a response with errors and warnings in the Validations array, as shown in the following API response excerpt:\n  619  \n  620  ```json\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\layout-based-extractions\\3000 - portfolio.md:\n   16      - Sensible app: Click the **Portfolio** button on the **Extract** tab.\n   17      - SDKs: Specify the Document Types parameter in the Extract method.\n   18:     - API:  Use one of the Portfolio extraction endpoints. \n   19  \n   20  \n   21:   - In the request, specify the doc types that exist in the portfolio. For example, using the API, `\"types\": [\"insurance_quote\", \"insurance_loss_run\"]`. The extraction response includes document extractions and their page ranges in the portfolio.\n   22  \n   23  \n   ..\n  101  For the preceding configurations, doc types, and example document portfolio, the following asynchronous request returns a list of document extractions:\n  102  \n  103: 1. Make an extraction request. For example, through the API:\n  104  \n  105  ```\n  106  curl --request POST 'https://api.sensible.so/v0/extract_from_url/' \\\n  107: --header 'Authorization: Bearer {API_TOKEN}' \\\n  108  --header 'Content-Type: application/json' \\\n  109  --data-raw '{\"document_url\":\"https://github.com/sensible-hq/sensible-docs/raw/main/readme-sync/assets/v0/pdfs/portfolio.pdf\",\n  ...\n  113  ```\n  114  curl --request GET 'https://api.sensible.so/v0/documents/{EXTRACTION_ID}' \\\n  115: --header 'Authorization: Bearer {API_TOKEN}'\n  116  ```\n  117  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\llm-based extractions\\instruct\\1000 - query-group-tips.md:\n   30    -  [Prompt engineering](https://platform.openai.com/docs/guides/prompt-engineering)\n   31    -  [Introduction to prompt engineering](https://learn.microsoft.com/en-us/azure/cognitive-services/openai/concepts/prompt-engineering)\n   32:   -  [Short course: Building systems with the ChatGPT API](https://www.deeplearning.ai/short-courses/building-systems-with-chatgpt/) and [Short course: ChatGPT Prompt Engineering for Developers](https://www.deeplearning.ai/short-courses/chatgpt-prompt-engineering-for-developers/). \n   33  \n   34  ## Troubleshooting\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\2000 - field-query-object\\index.md:\n   50  | Parameter                                                    | Value                                              | Description                                                  |\n   51  | ------------------------------------------------------------ | -------------------------------------------------- | ------------------------------------------------------------ |\n   52: | id (**required**)                                            | string                                             | Sensible uses the ID as the key in the structured key/value output. In the API response, this output is in the `parsed_document` section.<br/>To specify fallbacks, use the same ID in multiple fields. Succeeding fields act as fallbacks if the first returns null.<br/>For example, to capture differences in wording between document revisions, define two fields with the same ID, w... <skipped 516 characters> ...\n   53  | anchor (**required**) except for fields that use [NLP methods](doc:natural-language-methods) | object                                             | The anchor identifies one or more lines of text in the document at which Sensible starts executing a method. Can be a string, Match object, or array of Match objects. For more information, see [Anchor object](doc:anchor) and [Match object](doc:match). |\n   54  | method (**required**)                                        | object                                             | The method describes how Sensible expands from the anchor and extracts the target data. For more information, see [Methods](doc:methods), [Natural language methods](doc:natural-language-methods), and [Method object](doc:method). |\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\3000 - natural-language-methods\\1000 - nlp-table.md:\n  327     - Sensible concatenates all your column descriptions with your overall table description. \n  328     - Sensible splits the document into equal-sized, overlapping chunks. \n  329:    - Sensible scores your concatenated table descriptions against each chunk using the OpenAI Embeddings API.\n  330     - Sensible gets a list of page numbers from the top-scoring chunks.\n  331  2. Sensible extracts all the tables on the pages most likely to contain your table, using an OCR provider. Sensible supports multi-page tables.\n  ...\n  336     - Sensible concatenates the first two rows of the table with the table title.  Sensible uses the table title extracted by the table OCR provider, or falls back to using the text in a region above the table if the OCR provider doesn't find a title.\n  337  \n  338:    - Sensible compares the two concatenations using the OpenAI Embeddings API. \n  339  4. Sensible creates a full prompt for the LLM (GPT-4) that includes the top-scoring table, page hinting data, and your prompts. For more information about the full prompt, see [Advanced prompt configuration](doc:prompt). The full prompt instructs the LLM to restructure the best-scoring table based on your column descriptions and your overall table description. \n  340  6. Sensible returns the restructured table.\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\3000 - natural-language-methods\\1500 - query-group.md:\n  174  \n  175  - To meet the LLM's token limit for input, Sensible splits the document into equal-sized, overlapping chunks.\n  176: - Sensible scores each chunk by its similarity to either the concatenated Description parameters for the queries in the group, or by the `chunkScoringText` parameter. Sensible scores each chunk using the OpenAPI Embeddings API.\n  177  - Sensible selects a number of the top-scoring chunks and combines them into \"context\". The chunks can be non-consecutive in the document. Sensible deduplicates overlapping text in consecutive chunks. If you set chunk-related parameters that cause the context to exceed the LLM's token limit, Sensible automatically reduces the chunk count until the context meets the token limit.\n  178  - Sensible creates a full prompt for the LLM (GPT-3.5 Turbo) that includes the chunks, page hinting data, and your Description parameters. For more information about the full prompt, see [Advanced prompt configuration](doc:prompt).\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\6000 - computed-field-methods\\index.md:\n   19  | key                   | value                      | description                                                  |\n   20  | :-------------------- | :------------------------- | :----------------------------------------------------------- |\n   21: | id (**required**)     | string                     | Sensible uses the ID as the key in the structured key/value output. In the API response, this output is in the `parsed_document` section. To specify fallbacks, use the same ID for multiple Computed Field methods. Succeeding fields act as fallbacks if the first returns null. For example, to capture differences in wording between document revisions, define two fields with the s... <skipped 104 characters> ...\n   22  | method (**required**) | object                     | The method describes the Computed Field method used to transform fields. This object's ID parameter specifies the method. The possible ID values are:<br/>[Concatenate](doc:concatenate)<br/>[Constant](doc:constant)<br/>[Mapper](doc:mapper)<br/>[pickValues](doc:pick-values)<br/>[Split](doc:split)<br/>[suppressOutput](doc:suppress-output)<br/>[Zip](doc:zip) |\n   23  | type                  | string (default: `string`) | Specifies the type of the output value. For more information about types, see [Field query object](doc:field-query-object). |\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\6500 - sections\\4000 - sections-example-nested-columns.md:\n   55  ```\n   56  \n   57: With this approach, you can output something like the following, using abbreviated YML notation to give an overview of the more complex JSON API response:\n   58  \n   59  ```yml\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\6500 - sections\\6000 - sections-example-table-grid.md:\n   63  ```\n   64  \n   65: With this approach, you can output something like the following, using abbreviated YML notation to give a brief idea of the more complex JSON API response:\n   66  \n   67  ```yml\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\6500 - sections\\8000 - sections-example-copy-from-sections.md:\n   21  If you [zip the child sections together](doc:sections-example-zip), you can output something like the following example output, and then clean it up with the Copy From Sections method. \n   22  \n   23: The following uses abbreviated YML notation to give an overview of the more complex JSON API response:\n   24  \n   25  ```yaml\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\6800 - document-type-settings\\4000 - ocr-level.md:\n   24  The following table shows the enums available for the OCR Level parameter. \n   25  \n   26: **Note:** Set this parameter in the [Sensible API](ref:create-document-type).\n   27  \n   28  | enum | description                                                  |\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\7000 - deprecated-methods\\1500 - deprecated-query.md:\n  262  \n  263  - To meet the LLM's token limit for input, Sensible splits the document into equal-sized, overlapping chunks.\n  264: - Sensible scores each chunk by its similarity to either the `description` or the `chunkScoringText` parameters. Sensible scores each chunk using the OpenAPI Embeddings API.\n  265  - Sensible selects a number of the top-scoring chunks and combines them into \"context\". The chunks can be non-consecutive in the document. Sensible deduplicates overlapping text in consecutive chunks. If you set chunk-related parameters that cause the context to exceed the LLM's token limit, Sensible automatically reduces the chunk count until the context meets the token limit.\n  266  - Sensible creates a full prompt for the LLM (GPT-3.5 Turbo) that includes the chunks, page hinting data, and your prompt. For more information about the full prompt, see [Advanced prompt configuration](doc:prompt).\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\7500 - advanced-computed-field-methods\\0700 - get-file-metadata.md:\n   14  | :---------------- | :---------------- | :----------------------------------------------------------- |\n   15  | id (**required**) | `getFileMetadata` |                                                              |\n   16: | type              | `filename`        | Copies the document's filename without the file extension to the extraction output. Sensible gets the filename from the `document_name` parameter if you extract through the API or SDK, or assigns a document name on upload if you use the Sensible app. |\n   17  \n   18  Examples\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\8000 - concepts\\1500 - coverage.md:\n   29  In the preceding screenshot, get a coverage breakdown by viewing the extraction. You can view the extraction by clicking the extraction date in the **Recent extractions** column or downloading the Excel file.\n   30  \n   31: For example, in the preceding screenshot, you can click  `Sept 25, 2023, 7:30 PM`  in the **Created**  column to count the extracted fields in the SenseML editor and find that the score of `61.1%` means that 33 of 54 total fields output were valid and non-null. Or, you can retrieve the information from the [Sensible API](ref:retrieving-results) or SDK. The following code sample shows an except from an API response with the `validation_summary` used to calculate the `coverage` for the Sept 25 extraction:\n   32  \n   33  ```json\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\8000 - concepts\\1600 - file-types.md:\n   11  | -------------------------------------- | ---- | ---------------------------------- | --------------------------------------- | --------------------------------------- |\n   12  | Sensible app's Extract tab    | ✅    | ✅                                  | ✅                                 | ❌                                       |\n   13: | Single-file extraction with SDK or API | ✅    | ✅                                  | ✅                                 | ✅                                       |\n   14: | Portfolio extraction with SDK or API   | ✅    | ✅                                  | ✅                                 | ❌                                       |\n   15: | Classification with SDK or API         | ✅    | ✅                                  | ✅                                 | ✅                                       |\n   16  \n   17  ## File sizes\n   ..\n   19  Sensible supports the following file sizes:\n   20  \n   21: | Operation              | Synchronous size limit (API only)                | Asynchronous size limit |\n   22  | ---------------------- | ------------------------------------------------ | ----------------------- |\n   23  | Single-document file extraction | under 4.5MB, or under 30 seconds processing time | 6 GB                    |\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\8000 - concepts\\4500 - draft-senseml-order.md:\n  120  ----\n  121  \n  122: Return the extraction, and other information, to the user as an API response. \n  123  \n  124  - Use the winning configuration data from the previous step\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\welcome\\2000 - getting-started-ai.md:\n   15  \n   16  - **Learn** to extract data, or use out-of-the-box supported document types\n   17: - [**Integrate**](doc:integrate) using Sensible's API, SDK, quick-extract UI, or other tools\n   18  - [**Quality control**](doc:validate-extractions) extracted data\n   19  -  [**Monitor**](doc:metrics) extracted data in production \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\welcome\\3000 - integrate.md:\n   10  | SDKs | [SDK guides](doc:sdk-guides) | Extract and classify documents. |\n   11  | [Zapier](doc:zapier)           | [Zapier tutorial](doc:zapier-getting-started) | Transform data in PDFs and other document file types into emails, databases, Google sheets, and other Zapier-supported destinations. |\n   12: | [API](ref:choosing-an-endpoint) | [API quickstart](doc:quickstart)              | Extract and classify documents and manage extraction configuration. |\n   13  | Quick extraction | [Quick extraction](doc:quick-extraction) | Drag and drop documents to extract data from documents in the Sensible app.  Upload files in bulk, and download extracted data as JSON or Excel files. |\n   14  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\welcome\\cheat\\4000 - cheat-4.md:\n   74  \n   75  - Check out the [SenseML method reference docs](doc:methods) to write your own extractions.\n   76: - See the [API quickstart](doc:quickstart) to try out calling an Sensible extraction API endpoint.\n   77  - Learn about other SenseML features such as preprocessors. For an overview of all features, see [SenseML reference introduction](doc:senseml-reference-introduction).\n   78  - Learn more about [validations](doc:validate-extractions) to test the quality of your extractions in production.\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js\\README.md:\n    6  ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/intro_SDK_2.png)\n    7  \n    8: This open-source Sensible SDK offers convenient access to the [Sensible API](https://docs.sensible.so/reference/choosing-an-endpoint). Use this SDK to:\n    9  \n   10: - [Extract](#usage-extract-document-data): Extract structured data from your custom documents. Configure the extractions for a set of similar documents, or *document type*, in the Sensible app or Sensible API, then run extractions for documents of the type with this SDK.\n   11  - [Classify](#usage-classify-documents-by-type): Classify documents by the types you define, for example, bank statements or tax forms. Use classification to determine which documents to extract prior to calling a Sensible extraction endpoint, or route each document in a system of record.\n   12  \n   13  ## Documentation\n   14  \n   15: - For extraction and classification response schemas, see the [Sensible API reference](https://docs.sensible.so/reference/choosing-an-endpoint).\n   16  - For configuring document extractions, see [SenseML reference](https://docs.sensible.so/docs/senseml-reference-introduction).\n   17  \n   ..\n   19  \n   20  - The latest version of this SDK is v0.\n   21: - The latest version of the Sensible API is v0.\n   22  \n   23  ## Node and Typescript support\n   ..\n   47  Get an account at [sensible.so](https://app.sensible.so/register) if you don't have one already.\n   48  \n   49: To initialize the SDK, paste the following code into your `index.mjs` file and replace `YOUR_API_KEY` with your [API key](https://app.sensible.so/account/):\n   50  \n   51  ```node\n   52: const sensible = new SensibleSDK(YOUR_API_KEY);\n   53  ```\n   54  \n   55: **Note:** Ensure you secure your API key in production, for example as a GitHub secret.\n   56  \n   57  ## Quickstart\n   ..\n   65  import { SensibleSDK } from \"sensible-api\";\n   66  \n   67: const sensible = new SensibleSDK(YOUR_API_KEY); //replace with your API key\n   68  const request = await sensible.extract({\n   69        url: \"https://github.com/sensible-hq/sensible-docs/raw/main/readme-sync/assets/v0/pdfs/contract.pdf\",\n   ..\n   75  ```\n   76  \n   77: 2. Replace `YOUR_API_KEY` with your [API key](https://app.sensible.so/account/).\n   78  3. In a command prompt in the same directory as your `index.mjs` file, run the code with the following command:\n   79  \n   ..\n  155  | documentName      | string                                                     | If you specify the file name of the document using this parameter, then Sensible returns the file name in the extraction response and populates the file name in the Sensible app's list of recent extractions. |\n  156  | environment       | `\"production\"` or `\"development\"`. default: `\"production\"` | If you specify `development`, Sensible extracts preferentially using config versions published to the development environment in the Sensible app. The extraction runs all configs in the doc type before picking the best fit. For each config, falls back to production version if no development version of the config exists. |\n  157: <skipped 212 characters> ...sults status. Sensible also calls this webhook on error.<br/> The webhook object has the following parameters:<br/>`url`:  string. Webhook destination. Sensible posts to this URL when the extraction is complete.<br/>`payload`: string, number, boolean, object, or array. Information additional to the API response, for example a UUID for verification. |\n  158  \n  159  ### Extraction results\n  ...\n  178  import { SensibleSDK } from \"sensible-api\";\n  179  import got from \"got\";\n  180: const apiKey = process.env.SENSIBLE_APIKEY;\n  181  const sensible = new SensibleSDK(apiKey);\n  182  const dir = \"ABSOLUTE_PATH_TO_DOCUMENTS_DIR\";\n  ...\n  228  import { SensibleSDK } from \"sensible-api\";\n  229  \n  230: const sensible = new SensibleSDK(\"YOUR_API_KEY\");\n  231  const request = await sensible.classify({\n  232    path:\"./boa_sample.pdf\"\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-api-py\\README.md:\n    6  ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/intro_SDK_2.png)\n    7  \n    8: This open-source Sensible SDK offers convenient access to the [Sensible API](https://docs.sensible.so/reference/choosing-an-endpoint). Use this SDK to:\n    9  \n   10: - [Extract](#usage-extract-document-data): Extract structured data from your custom documents. Configure the extractions for a set of similar documents, or *document type*, in the Sensible app or Sensible API, then run extractions for documents of the type with this SDK.\n   11  - [Classify](#usage-classify-documents-by-type): Classify documents by the types you define, for example, bank statements or tax forms. Use classification to determine which documents to extract prior to calling a Sensible extraction endpoint, or route each document in a system of record.\n   12  \n   13  ## Documentation\n   14  \n   15: - For extraction and classification response schemas, see the [Sensible API reference](https://docs.sensible.so/reference/choosing-an-endpoint).\n   16  - For configuring document extractions, see [SenseML reference](https://docs.sensible.so/docs/senseml-reference-introduction).\n   17  \n   ..\n   19  \n   20  - The latest version of this SDK is v0.\n   21: - The latest version of the Sensible API is v0.\n   22  \n   23  ## Python support\n   ..\n   45  Get an account at [sensible.so](https://app.sensible.so/register) if you don't have one already.\n   46  \n   47: To initialize the SDK, paste the following code into your `index.py` file and replace `YOUR_API_KEY` with your [API key](https://app.sensible.so/account/):\n   48  \n   49  ```python\n   50: sensible = SensibleSDK(\"YOUR_API_KEY\")\n   51  ```\n   52  \n   53: **Note:** Ensure you secure your API key in production, for example as a GitHub secret.\n   54  \n   55  ## Quickstart<a id=\"quickstart\"></a>\n   ..\n   63  from sensibleapi import SensibleSDK\n   64  \n   65: sensible = SensibleSDK(\"YOUR_API_KEY\")  # replace with your API key\n   66  request = sensible.extract(\n   67      url=\"https://github.com/sensible-hq/sensible-docs/raw/main/readme-sync/assets/v0/pdfs/contract.pdf\",\n   ..\n   73  ```\n   74  \n   75: 2. Replace `YOUR_API_KEY` with your [API key](https://app.sensible.so/account/).\n   76  3. In a command prompt in the same directory as your `index.py` file, run the code with the following command:\n   77  \n   ..\n  153  | document_name      | string                                                     | If you specify the file name of the document using this parameter, then Sensible returns the file name in the extraction response and populates the file name in the Sensible app's list of recent extractions. |\n  154  | environment       | `\"production\"` or `\"development\"`. default: `\"production\"` | If you specify `development`, Sensible extracts preferentially using config versions published to the development environment in the Sensible app. The extraction runs all configs in the doc type before picking the best fit. For each config, falls back to production version if no development version of the config exists. |\n  155: <skipped 216 characters> ...s status. Sensible also calls this webhook on error.<br/> The webhook object has the following parameters:<br/>`url`:  string. Webhook destination. Sensible will POST to this URL when the extraction is complete.<br/>`payload`: string, number, boolean, object, or array. Information additional to the API response, for example a UUID for verification. |\n  156  \n  157  ### Extraction results\n  ...\n  180  from pathlib import Path\n  181  \n  182: api_key = os.environ.get(SENSIBLE_APIKEY)\n  183  sensible = SensibleSDK(api_key)\n  184  dir_path = Path(\"ABSOLUTE_PATH_TO_DOCUMENTS_DIR\")\n  ...\n  237  from sensibleapi import SensibleSDK\n  238  \n  239: sensible = SensibleSDK(api_key=\"YOUR_API_KEY\")  # Replace with your API key\n  240  request = sensible.classify(path=\"./boa_sample.pdf\")\n  241  results = sensible.wait_for(request)\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-code-examples\\readme.md:\n    1: This example code calls Sensible [extraction APIs](https://docs.sensible.so/reference#extract-data-from-a-document) and returns structured data from a PDF. You'll need an [API key](https://www.sensible.so/get-early-access). To run the examples, see the readme for your programming language: \n    2  \n    3  - [node](./node)\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-code-examples\\node\\readme.md:\n    1: This starter code calls Sensible [extraction APIs](https://docs.sensible.so/reference#extract-data-from-a-document) and returns structured data from a PDF. You'll need an [API key]([https://www.sensible.so/get-early-access](https://app.sensible.so/account/?t=api_keys)).\n    2  \n    3  \n    .\n    9  - To install dependencies, open a command prompt at this cloned directory and run `npm install`.\n   10  - Open extract-doc.js in a text editor and specify:\n   11:   - your API key. Be sure to secure this key before committing.\n   12    - the local path to your PDF.\n   13    - the name of the doc type that you created in the [Sensible app](https://app.sensible.so/).\n   ..\n   19  To see example data in a response quickly, run extract-doc.js with an example PDF and config:\n   20  \n   21: - Clone this directory, install dependencies, and add your API key (see previous steps).\n   22  - Download an example [auto insurance quote PDF](https://github.com/sensible-hq/sensible-docs/blob/main/readme-sync/assets/v0/pdfs/auto_insurance_anyco.pdf).\n   23  - In the [Sensible app](https://app.sensible.so/):\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-code-examples\\python\\readme.md:\n    1: This starter code calls Sensible [extraction APIs](https://docs.sensible.so/reference#extract-data-from-a-document) and returns structured data from a PDF. You'll need an [API key](https://app.sensible.so/account/?t=api_keys).\n    2  \n    3  \n    .\n   10    - To install dependencies, run `python -m pip install requests`.\n   11  - Open extract_docs.py in a text editor and specify:\n   12:   - your API key. Be sure to secure this key before committing.\n   13    - the local path to your PDF.\n   14    - the name of the doc type that you created in the [Sensible app](https://app.sensible.so/).\n   ..\n   20  To see example data in a response quickly, run extract_doc.py with an example PDF and config:\n   21  \n   22: - Clone this directory, install dependencies, and add your API key (see previous steps).\n   23  - Download an example [auto insurance quote PDF](https://github.com/sensible-hq/sensible-docs/blob/main/readme-sync/assets/v0/pdfs/auto_insurance_anyco.pdf).\n   24  - In the [Sensible app](https://app.sensible.so/):\n\n147 matches across 42 files\n\n\nSearching 148 files for \"`document_name` p\" (case sensitive)\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\7500 - advanced-computed-field-methods\\0700 - get-file-metadata.md:\n   14  | :---------------- | :---------------- | :----------------------------------------------------------- |\n   15  | id (**required**) | `getFileMetadata` |                                                              |\n   16: | type              | `filename`        | Copies the document's filename without the file extension to the extraction output. Sensible gets the filename from the `document_name` parameter if you extract through the API or SDKs, or assigns a document name on upload if you use the Sensible app. |\n   17  \n   18  Examples\n\n1 match in 1 file\n\n\nSearching 148 files for \"api\" (case sensitive)\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\internal-doc-guidelines.md:\n   28  You can author the docs in GitHub-flavored Markdown, with the following minor restrictions and caveats:\n   29  \n   30: - **links** - The preferred linking method is to use Readme's syntax like this: `[some title](doc:some-doc-slug)`. or `[Some title](ref:some-api-endpoint-slug)`. (Not recommended: you can also use relative links, but  then you have to leave out the .md extension. Like this: `[syntax for relative link to a doc](./readme-sync/v0/some-file-name-no-textension)`. (Future improvement: should be easy to modify readme-sync code to strip out .md ext... <skipped 75 characters> ...\n   31  \n   32  - **images** - You can't use relative links,   `[like this syntax](./images/some-image)`. We'll use hyperlinks instead to images stored on the master branch like this: `![](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/images/v0/some_image.png)` . \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\batch-api.md:\n   20  \n   21  ```curl\n   22:    curl 'https://api.sensible.so/v0/extract/batch' \\\n   23     --header 'Content-Type: application/json' \\\n   24     --header 'Authorization: Bearer YOUR_API_KEY' \\\n   ..\n   50  \n   51  ```curl\n   52:    curl 'https://api.sensible.so/v0/extract/batch/upload_urls/c73c7932-82c0-438c-a339-175d7d0771bd/0/1' \\\n   53     --header 'Content-Type: application/json' \\\n   54     --header 'Authorization: Bearer YOUR_API_KEY' \\\n   ..\n   97  \n   98  ```json\n   99:    curl 'https://api.sensible.so/v0/documents/0b34ce99-bf15-4e0d-a391-b03e4c830414' \\\n  100     --header 'Authorization: Bearer YOUR_API_KEY'\n  101  ```\n  ...\n  122  \n  123     ```curl\n  124:    curl 'https://api.sensible.so/v0/generate_excel_from_batch/c73c7932-82c0-438c-a339-175d7d0771bd' \\\n  125     --header 'Authorization: Bearer YOUR_API_KEY'\n  126     ```\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\1000 - api-tutorial\\1000 - api-tutorial-sync.md:\n   22  ---\n   23  \n   24: See [prerequisites](doc:api-tutorial#prerequisites).\n   25  \n   26  Run the request in Postman\n   ..\n   34  ```curl\n   35  curl --request POST \\\n   36:   --url 'https://api.sensible.so/v0/extract/tax_forms' \\\n   37    --header 'Authorization: Bearer YOUR_API_KEY' \\\n   38    --header 'Content-Type: application/pdf' \\\n   ..\n   42  2. In your Postman workspace, click **Import**, select **Raw text**, paste the code sample, and follow the prompts to import to code sample.\n   43  \n   44:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_import.png)\n   45  \n   46  3. Download the following example document, which works with the prerequisite  **tax_forms**  document type:\n   ..\n   51  4.  Correct the path to the downloaded document: In the request, click the **Body** tab, select **binary**, then click **Select file** and select the document you downloaded:\n   52  \n   53:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_file.png)\n   54  \n   55  \n   ..\n  109  3. Visually examine the example document (middle pane), config (left pane), and extracted data (right pane) to better understand the configuration for the API call you just ran:\n  110  \n  111: ![q](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_app.png)\n  112  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\1000 - api-tutorial\\2000 - api-tutorial-async-1.md:\n   14  This topic covers providing your own URLs. This is a good option if you host your documents at either publicly accessible or a pre-signed URLs. The URL must respond to GET requests with document bytes.\n   15  \n   16: For either option, you can get the results as soon as they're ready by specifying a [webhook](doc:api-tutorial-webhook).\n   17  \n   18  Extract from a URL you provide \n   ..\n   23  ----\n   24  \n   25: See [prerequisites](doc:api-tutorial#prerequisites).\n   26  \n   27  Extract the data \n   ..\n   33  \n   34     ```json\n   35:    curl --request POST 'https://api.sensible.so/v0/extract_from_url/tax_forms' \\\n   36     --header 'Authorization: Bearer YOUR_API_KEY' \\\n   37     --header 'Content-Type: application/json' \\\n   ..\n   43  3. In your Postman workspace, click **Import**, select **Raw text**, paste the code sample, and follow the prompts to import to code sample.\n   44  \n   45:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_1.png)\n   46  \n   47  3. Click **Send**, and you should see a response like:\n   ..\n   64  \n   65  - Use the `/documents` endpoint. See the following steps.\n   66: - Use a webhook. See [Try a webhook](doc:api-tutorial-webhook).\n   67  \n   68  \n   ..\n   83  \n   84  ```json\n   85: curl --request GET 'https://api.sensible.so/v0/documents/YOUR_EXTRACTION_ID' \\\n   86  --header 'Authorization: Bearer YOUR_API_KEY'\n   87  ```\n   ..\n   89  3. In your Postman workspace, click **Import**, select **Raw text**, paste the code sample, and follow the prompts to import to code sample.\n   90  \n   91:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_2.png)\n   92  \n   93  4. Click **Send**. The response includes a `parsed_document` object that looks something like the following:\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\1000 - api-tutorial\\2100 - api-tutorial-async-2.md:\n   12  This topic covers using URLs provided by Sensible. This is a good option if you can't create either publicly accessible or pre-signed URLs for your documents.\n   13  \n   14: For either option, you can get the results as soon as they're ready by specifying a [webhook](doc:api-tutorial-webhook).\n   15  \n   16  Extract from a URL Sensible provides\n   ..\n   20  ----\n   21  \n   22: See [prerequisites](doc:api-tutorial#prerequisites).\n   23  \n   24  \n   ..\n   33  \n   34  ```json\n   35: curl --request POST 'https://api.sensible.so/v0/generate_upload_url/tax_forms' \\\n   36  --header 'Content-Type: application/json' \\\n   37  --header 'Authorization: Bearer YOUR_API_KEY' \\\n   ..\n   41  2. In your Postman workspace, click **Import**, select **Raw text**, paste the code sample, and follow the prompts to import the code sample.\n   42  \n   43:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_3.png)\n   44  \n   45  3. Click **Send**. The response looks something like the following:\n   ..\n   71  2. In your Postman workspace, click **Import**, select **Raw text**, paste the code sample, and follow the prompts to import to code sample.\n   72  \n   73:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_4.png)\n   74  \n   75  **Troubleshoot**: Postman can automatically add authorization and content-type headers that cause errors:\n   ..\n   77  - If Postman automatically specifies authorization for the request, then specify **No Auth** in the request's **Auth** tab :\n   78  \n   79: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_no_auth.png)\n   80  \n   81  - If Postman automatically specifies a content type header, then ensure that the value of the Content-Type header matches that of the `content_type` body parameter in the request in step 1. In this case, it must be `application/pdf`.\n   82  \n   83: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_headers_2.png)\n   84  \n   85  3. If you haven't already, download the following example document, which works with the example `tax_forms` document type you created in the **Prerequisites** section:\n   ..\n   90  4. Correct the path to the downloaded document in your request: click the **Body** tab, select **binary**, then click **Select file** and select the document:\n   91  \n   92:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_file.png)\n   93  \n   94    \n   ..\n   96  5. Click **Send** to send the request. The response is  `200`:\n   97  \n   98: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_200.png) \n   99  \n  100  \n  ...\n  105  \n  106  - Use the `/documents` endpoint. See the following steps.\n  107: - Use a webhook. See [Try a webhook](doc:api-tutorial-webhook).\n  108  \n  109  \n  ...\n  124  \n  125  ```json\n  126: curl --request GET 'https://api.sensible.so/v0/documents/YOUR_EXTRACTION_ID' \\\n  127  --header 'Authorization: Bearer YOUR_API_KEY'\n  128  ```\n  ...\n  130  3. In your Postman workspace, click **Import**, select **Raw text**, paste the code sample, and follow the prompts to import to code sample.\n  131  \n  132: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_2.png)\n  133  \n  134  4. Click **Send**. The response includes a `parsed_document` object that looks something like the following:\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\1000 - api-tutorial\\3000 - api-tutorial-webhook.md:\n   11  ====\n   12  \n   13: See [prerequisites](doc:api-tutorial#prerequisites). \n   14  \n   15  \n   ..\n   19  1. Generate a destination for the webhook: navigate to [https://webhook.site/](https://webhook.site/) to automatically create a unique test page:\n   20  \n   21:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_webhook_1.png)\n   22  **Note:** Use this website [solely for testing](https://webhook.site/terms). In production, make your own destination for the webhook payload.\n   23  \n   ..\n   25  \n   26  ```json\n   27: curl --location --request POST 'https://api.sensible.so/v0/extract_from_url/tax_forms' \\\n   28  --header 'Authorization: Bearer YOUR_API_TOKEN' \\\n   29  --header 'Content-Type: application/json' \\\n   ..\n   36     \n   37  \n   38:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_webhook_2.png)\n   39  \n   40  4. Click **Send** in Postman.\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\1000 - api-tutorial\\index.md:\n   39  Try out the endpoints with these tutorials:\n   40  \n   41: - [Try synchronous extraction](doc:api-tutorial-sync)\n   42: - [Try asynchronous extraction](doc:api-tutorial-async-1)\n   43: - [Try a webhook](doc:api-tutorial-webhook)\n   44  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\3000 - quickstart.md:\n   34    \"codes\": [\n   35      {\n   36:       \"code\": \"curl -L https://github.com/sensible-hq/sensible-docs/raw/main/readme-sync/assets/v0/pdfs/1_extract_your_first_data.pdf \\\\\\n  --output 1_extract_your_first_data.pdf && \\\\\\ncurl --request POST \\\\\\n  --url \\\"https://api.sensible.so/v0/extract/senseml_basics\\\" \\\\\\n  --header \\\"Authorization: Bearer <YOUR_API_TOKEN>\\\" \\\\\\n  --header \\\"Content-Type: application/pdf\\\" \\\\\\n  --data-binary \\\"@1_extract_your_first_data.pdf\\\" \\n\",\n   37        \"language\": \"shell\",\n   38        \"name\": \"Linux/Mac\"\n   39      },\n   40      {\n   41:       \"code\": \"curl -L https://github.com/sensible-hq/sensible-docs/raw/main/readme-sync/assets/v0/pdfs/1_extract_your_first_data.pdf ^\\n  --output 1_extract_your_first_data.pdf && ^\\ncurl --request POST ^\\n  --url \\\"https://api.sensible.so/v0/extract/senseml_basics\\\" ^\\n  --header \\\"Authorization: Bearer <YOUR_API_TOKEN>\\\" ^\\n  --header \\\"Content-Type: application/pdf\\\" ^\\n  --data-binary \\\"@1_extract_your_first_data.pdf\\\" \\n\",\n   42        \"language\": \"shell\",\n   43        \"name\": \"Windows\"\n   ..\n   82  \n   83  - See the [API reference](https://docs.sensible.so/reference/choosing-an-endpoint) and [example code](https://github.com/sensible-hq/sensible-code-examples)\n   84: - If you're new to APIs, see [API tutorials](doc:api-tutorial)\n   85  - To get started with authoring extraction configurations, or configs, for your custom documents, see [Getting Started](doc:getting-started-ai).\n   86  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\sdk-guides.md:\n    8  | Language        | Quickstart                                                   | Guides                                                       |\n    9  | --------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n   10: | Node/Typescript | [Node quickstart](https://github.com/sensible-hq/sensible-api-js#quickstart) | [Node readme](https://github.com/sensible-hq/sensible-api-js#readme) |\n   11: | Python          | [Python quickstart](https://github.com/sensible-hq/sensible-api-py#quickstart) | [Python readme](https://github.com/sensible-hq/sensible-api-py#readme) |\n   12  \n   13  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\2000 - zapier\\1000 - zapier-getting-started.md:\n    1  ---\n    2: title: \"Zapier tutorial\"\n    3  hidden: false\n    4  \n    5  ---\n    6  \n    7: This topic describes sending extracted data from example documents into an Airtable database using Sensible's Zapier integration. \n    8  \n    9: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_0.png)\n   10  \n   11  Create an example Sensible extraction\n   12  ----\n   13  \n   14: To configure Zapier, you'll use a recent example of a document extraction. Follow the steps in [Getting started with out-of-the-box extractions](doc:library-quickstart) to create a JSON extraction from an example 1040 tax form. \n   15  \n   16: **Note** Ensure your example extraction contains non-null values for all fields you intend to configure in Zapier.\n   17  \n   18  Create an empty destination database\n   ..\n   24  2. Create a destination Airtable base using the following image as a guide, with **extraction id**, **adjusted gross income**, and **taxpayer name**:\n   25  \n   26: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_7.png)\n   27  \n   28: The base contains a field (displayed as a column), for each piece of document data to extract.  Zapier adds a record (displayed as a row), for each new document you extract from.\n   29  \n   30  3. (Optional) examine the [example extraction](https://app.sensible.so/quick-extraction/) you created in the previous section. To add more data from the extraction, create corresponding Airtable fields. For example, create a `Total taxes owed` field.\n   31  \n   32: Configure Zapier\n   33  ----\n   34  \n   35: Take the following steps to connect Sensible to Airtable using Zapier:\n   36  \n   37: 1. Sign in or create a [Zapier account](https://zapier.com/).\n   38  2. Create a new Zap. For your trigger, search for and select **Sensible**.\n   39: 3. Take the following steps to connect your Sensible account to Zapier:\n   40     1. Click to expand the **Trigger** section.\n   41     2. Click to expand the **Choose account** section, then follow the prompts to connect your Sensible account.\n   42  4. In the **Set up trigger** section, select the **tax_forms** document type you created in the previous steps, select the **Production** environment, and select the **Complete** status. \n   43  \n   44: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_1.png)\n   45  \n   46  5. Continue to the **Test trigger** section and follow the prompts to test. Verify that the recent document extraction you created in previous steps is selected:\n   47  \n   48:  ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_2.png)\n   49  \n   50  6. Continue to the **Action** section, search for and select **Airtable**:\n   51     1. For the **Event**, choose **Create records (With Line Item Support)** \n   52:    2. Follow the prompts to connect your Airtable account to Zapier. \n   53  \n   54: 7. In the **Set up action** section, map Sensible extracted field ids to the corresponding Airtable field names. Zapier displays the data from the recent document extraction as examples. Use the following screenshot to complete the configuration:\n   55  \n   56:  ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_3.png)\n   57  \n   58  8. (Optional) If you created extra fields in the database, map each one.\n   ..\n   60  9. Follow the prompts to test the action. You should see the extracted data from the [1040 example document](https://github.com/sensible-hq/sensible-configuration-library/raw/main/tax_forms/1040/2021/1040_2021_sample.pdf) as a row in Airtable:\n   61  \n   62: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_4.png)\n   63  \n   64  9. Follow the prompts to publish your Zap. \n   ..\n   75     - [2020 1040 example document](https://github.com/sensible-hq/sensible-configuration-library/tree/main/tax_forms/1040/2020)\n   76  \n   77: 3. Zapier can take up to 15 minutes to pull data from Sensible. To avoid waiting, navigate to the **Zaps** tab in Zapier, right-click the Zap's ellipsis (...) icon and click **Run**.\n   78  \n   79  4. Verify the extractions show up in Airtable: \n   80  \n   81: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_5.png)\n   82  \n   83  \n   ..\n   86  ---\n   87  \n   88: You can extract from more documents automatically by building a more complex Zap so that you can trigger Sensible extractions with file actions in Google drive, email, or other supported Zapier apps.\n   89: Then send the extraction to the destination of your choice with a Sensible action.  For more information, see [Advanced Zapier tutorial](doc:zapier-tutorial-2).![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_action.png)\n   90  \n   91  \n   ..\n   96  **Limitations**\n   97  \n   98: - You can configure single-value field output with the Sensible-Zapier integration. For multi-value output such as tables and sections, you can compile document extractions into a spreadsheet or CSV file using Sensible's API or SDKs. For more information, see [SenseML to Excel reference](doc:excel-reference).\n   99: - You can extract from single-document files with Zapier. If you want to extract from portfolio files (files that contain multiple documents, for example, insurance application bundles), use the Sensible API or SDKs. \n  100  \n  101  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\2000 - zapier\\2000 - zapier-tutorial-2.md:\n    1  ---\n    2: title: \"Advanced Zapier tutorial\"\n    3  hidden: false\n    4  \n    5  ---\n    6  \n    7: This topic describes how to configure an example two-Zap workflow for Zapier. The example workflow extracts data from emailed documents and uploads them as spreadsheets to Google Drive. \n    8  \n    9: You can use the example Zaps in this topic as templates. For example, modify this workflow to trigger extractions based on other file actions in Zapier-support apps (for example, a new document uploaded to Google Drive instead of a new email in Gmail). Or, output to different destinations (for example, a database record instead of spreadsheet files in Google Drive).\n   10  \n   11  Zap 1\n   12  ---\n   13  \n   14: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_action_1.png)\n   15  \n   16: Every time you receive an email in Gmail with a 1040 document attached, Zapier triggers Sensible to extract data from it.\n   17  \n   18  Zap 2\n   19  ---\n   20  \n   21: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_action_2.png)\n   22  \n   23: Every time Sensible extracts a document, Zapier checks that it's a 1040 document. If so, Zapier triggers Sensible to create a spreadsheet of the extracted data, and uploads the spreadsheet to a folder in Google drive.\n   24  \n   25  Take the following steps to run these Zaps with example data, then modify them for your needs.\n   ..\n   35  1. Choose a Gmail account for the Zaps. Send a test email to it with an [example 1040 document](https://github.com/sensible-hq/sensible-configuration-library/raw/main/tax_forms/1040/2021/1040_2021_sample.pdf)  attached and make sure the subject line includes the text `1040`.\n   36  2. Create an empty Google Drive folder as a destination for the spreadsheets of extracted data.\n   37: 3. (Optional) In the Google Drive folder, create a spreadsheet named `Zapier-Sensible Extractions Logs` to log each time the Zaps run. Create columns to record information about each extraction, for example, `Extraction ID` , `Extraction Date` , `Email link`, and `Extraction link`.\n   38  \n   39  Zap 1: Extract emailed 1040 doc with Sensible\n   ..\n   80  Congratulations, your integration is now published and running! Take the following steps to continue populating a Google folder from example documents:\n   81  \n   82: 1. Email the following example 1040 documents to the Gmail account, ensuring that they match the search criteria you created in Zapier:\n   83     - [2018 1040 example document](https://github.com/sensible-hq/sensible-configuration-library/tree/main/tax_forms/1040/2018)\n   84     - [2019 1040 example document](https://github.com/sensible-hq/sensible-configuration-library/tree/main/tax_forms/1040/2019)\n   85     - [2020 1040 example document](https://github.com/sensible-hq/sensible-configuration-library/tree/main/tax_forms/1040/2020)\n   86  \n   87: 2. Zapier can take up to 15 minutes to pull data from Sensible. To avoid waiting, navigate to the **Zaps** tab in Zapier, right-click the Zap's ellipsis (...) icon and click **Run**.\n   88  \n   89  3. Wait a few minutes, then verify the extractions show up in your Google Drive folder as spreadsheets:\n   90  \n   91:    ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_action_3.png)\n   92  \n   93  4. Verify the extractions show up in your optionally configured logs:\n   94  \n   95:    ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_action_4.png)\n   96  \n   97  Notes\n   ..\n  100  **General Limitations**\n  101  \n  102: - You can configure single-value field output with the Sensible-Zapier integration. For multi-value output such as tables and sections, you can compile document extractions into a spreadsheet or CSV file using Sensible's API. For more information, see [SenseML to Excel reference](doc:excel-reference).\n  103: - You can extract from single-document files with Zapier. If you want to extract from portfolio files (documents that contain multiple documents, for example, insurance application bundles), use the Sensible app, API, or SDK. \n  104  \n  105  **Sensible action limitations**\n  106  \n  107: - If you select **New file in folder**  event in Google drive folder as the trigger for the Sensible action, Zapier ignores uploaded files whose create or modified date is older than 4 days. \n  108: - When setting up the Sensible action, run an extraction on the same file you intend to use for your Zapier sample setup a minute or so before you start configuring the Zap in order to get sample data. Otherwise, Zapier returns an incomplete extraction during configuration.\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\2000 - zapier\\index.md:\n    1  ---\n    2: title: \"Zapier overview\"\n    3  hidden: false\n    4  \n    5  ---\n    6  \n    7: With Sensible's Zapier integration, you can transform data in PDFs and other document file types into emails, databases, Google sheets, and other Zapier-supported destinations.\n    8  \n    9  For example, you can extract data in 1040 tax forms: \n   10  \n   11: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_6.png)\n   12  \n   13: And send the data to a database. The following image shows how Zapier can send extracted data from each document to a record, or row, in an Airtable database: \n   14  \n   15: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_5.png)\n   16  \n   17: When creating a Zapier integration, you can either:\n   18  \n   19  - Run extractions in Sensible and then act on the data with a **Sensible trigger**.\n   ..\n   26  Every time you run an extraction using the Sensible [app](https://app.sensible.so/quick-extraction), API, or SDKs, you can automatically send the data to a destination, for example an email or database, using a **Sensible trigger**: \n   27  \n   28: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_trigger.png)\n   29  \n   30: For more information, see the [Zapier getting started guide](doc:zapier-getting-started).\n   31  \n   32  Sensible action\n   33  ---\n   34  \n   35: You can bypass the Sensible app, API, or SDKs and instead trigger Sensible extractions with file actions in Google drive, email, or other supported Zapier apps. Then send the extraction to the destination of your choice with a **Sensible action**.\n   36  \n   37: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_action.png)\n   38  \n   39: For more information, see [Advanced Zapier tutorial](zapier-tutorial-2). \n   40  \n   41  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\4000 - quick-extraction\\7600 - excel-reference.md:\n   65  ​        In the preceding example, Sensible recommends using either `car_year` or `manufacture_year`, not both.\n   66  \n   67: - To configure multi-document spreadsheet output using different rules than those described here, configure rules with Sensible's [Zapier](doc:zapier) integration. You can map single-value field output with this integration, but not multi-value field output.\n   68  \n   69  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\layout-based-extractions\\1000 - getting-started.md:\n  608  \n  609  \n  610: 5. To test the validations with a document that's missing information, [try out an API call](doc:api-tutorial-async-1) with the following example document that has these errors:\n  611  \n  612     -  the policy number is missing\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\layout-based-extractions\\3000 - portfolio.md:\n  104  \n  105  ```\n  106: curl --request POST 'https://api.sensible.so/v0/extract_from_url/' \\\n  107  --header 'Authorization: Bearer {API_TOKEN}' \\\n  108  --header 'Content-Type: application/json' \\\n  ...\n  112  2. This request returns an EXTRACTION_ID. Use it to retrieve the extractions:\n  113  ```\n  114: curl --request GET 'https://api.sensible.so/v0/documents/{EXTRACTION_ID}' \\\n  115  --header 'Authorization: Bearer {API_TOKEN}'\n  116  ```\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\2000 - field-query-object\\1300 - types.md:\n  629    {\n  630      \"id\": \"name\",\n  631:     \"capitalization\": \"allCaps\"\n  632    }\n  633  ```\n  ...\n  650  | ----------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n  651  | id (**required**) | `name`                                                       |                                                              |\n  652: | capitalization    | `allCaps`, `firstLetter`. Default: no change to source capitalization | Formats the output in all uppercase, or with the first letter of each word capitalized. |\n  653  \n  654  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\3000 - natural-language-methods\\1600 - summarizer.md:\n   27  | source_id (**required**) | field ID     | Specifies a field whose output is a snippet of text with the key/value information you want to extract. If the snippet doesn't occur at a predictable location in the document, then you can use the [Topic](doc:topic) method to find it. |\n   28  | fields (**required**)    | string array | Names of the keys you want to extract. These names have an impact on the free-text extraction, so choose names that have a meaningful relationship to the target data to extract. For example, for a dollar amount of rent to extract,  `rent`, `rents`, and `rent_in_dollars` are good naming choices. |\n   29: <skipped 72 characters> ...s about how to extract information from the text in the Source ID parameter.<br/>For more information about how to write instructions (or \"prompts\"), see [Best practices for prompt engineering with OpenAI](https://help.openai.com/en/articles/6654000-best-practices-for-prompt-engineering-with-openai-api).<br/>For an example of using this parameter, see the Examples section. |\n   30  | samples                  | object array | Short snippets of text similar to the text in the Source ID parameter, with examples of the information to extract. <br/>Use in addition to the Instructions parameter to increase the LLM's accuracy. <br/>Contains these parameters:<br/>`prompt` (string): An... <skipped 370 characters> ...ary value. To override this behavior, specify a Sample parameter whose Prompt parameter has a text snippet that's missing the target data, and whose Values array indicates the data is missing (for example, \"N/A\" or \"not found\").<br/>For an example of using this parameter, see the Examples section. |\n   31  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\6500 - sections\\9000 - sections-example-copy-to-section.md:\n  181    \"_raw_policy_name\": {\n  182      \"type\": \"string\",\n  183:     \"value\": \"National Landscaping Solutions\"\n  184    },\n  185    \"monthly_total_unprocessed_claims\": [\n  ...\n  210        },\n  211        \"policy_name_and_number\": {\n  212:         \"value\": \"National Landscaping Solutions 5501234567\",\n  213          \"type\": \"string\"\n  214        }\n  ...\n  222        \"phone_number\": null,\n  223        \"policy_name_and_number\": {\n  224:         \"value\": \"National Landscaping Solutions 5501234567\",\n  225          \"type\": \"string\"\n  226        }\n  ...\n  238        },\n  239        \"policy_name_and_number\": {\n  240:         \"value\": \"National Landscaping Solutions 5501234567\",\n  241          \"type\": \"string\"\n  242        }\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\welcome\\3000 - integrate.md:\n    9  | ------------------------------ | --------------------------------------------- | ------------------------------------------------------------ |\n   10  | SDKs | [SDK guides](doc:sdk-guides) | Extract and classify documents. |\n   11: | [Zapier](doc:zapier)           | [Zapier tutorial](doc:zapier-getting-started) | Transform data in PDFs and other document file types into emails, databases, Google sheets, and other Zapier-supported destinations. |\n   12  | [API](ref:choosing-an-endpoint) | [API quickstart](doc:quickstart)              | Extract and classify documents and manage extraction configuration. |\n   13  | Quick extraction | [Quick extraction](doc:quick-extraction) | Drag and drop documents to extract data from documents in the Sensible app.  Upload files in bulk, and download extracted data as JSON or Excel files. |\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js\\README.md:\n   40  \n   41  ```shell\n   42: npm install sensible-api\n   43  ```\n   44  \n   ..\n   63  \n   64  ```node\n   65: import { SensibleSDK } from \"sensible-api\";\n   66  \n   67  const sensible = new SensibleSDK(YOUR_API_KEY); //replace with your API key\n   ..\n  176  ```node\n  177  import { promises as fs } from \"fs\";\n  178: import { SensibleSDK } from \"sensible-api\";\n  179  import got from \"got\";\n  180: const apiKey = process.env.SENSIBLE_APIKEY;\n  181: const sensible = new SensibleSDK(apiKey);\n  182  const dir = \"ABSOLUTE_PATH_TO_DOCUMENTS_DIR\";\n  183  const files = (await fs.readdir(dir)).filter((file) => file.match(/\\.pdf$/));\n  ...\n  226  \n  227  ```node\n  228: import { SensibleSDK } from \"sensible-api\";\n  229  \n  230  const sensible = new SensibleSDK(\"YOUR_API_KEY\");\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-api-py\\README.md:\n   38  \n   39  ```shell\n   40: pip install sensibleapi\n   41  ```\n   42  \n   ..\n   61  \n   62  ```python\n   63: from sensibleapi import SensibleSDK\n   64  \n   65  sensible = SensibleSDK(\"YOUR_API_KEY\")  # replace with your API key\n   ..\n  177  import json\n  178  import requests\n  179: from sensibleapi import SensibleSDK\n  180  from pathlib import Path\n  181  \n  182: api_key = os.environ.get(SENSIBLE_APIKEY)\n  183: sensible = SensibleSDK(api_key)\n  184  dir_path = Path(\"ABSOLUTE_PATH_TO_DOCUMENTS_DIR\")\n  185  pdf_files = [file for file in dir_path.glob(\"*.pdf\")]\n  ...\n  235  \n  236  ```python\n  237: from sensibleapi import SensibleSDK\n  238  \n  239: sensible = SensibleSDK(api_key=\"YOUR_API_KEY\")  # Replace with your API key\n  240  request = sensible.classify(path=\"./boa_sample.pdf\")\n  241  results = sensible.wait_for(request)\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-code-examples\\node\\readme.md:\n    1: This starter code calls Sensible [extraction APIs](https://docs.sensible.so/reference#extract-data-from-a-document) and returns structured data from a PDF. You'll need an [API key]([https://www.sensible.so/get-early-access](https://app.sensible.so/account/?t=api_keys)).\n    2  \n    3  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-code-examples\\python\\readme.md:\n    1: This starter code calls Sensible [extraction APIs](https://docs.sensible.so/reference#extract-data-from-a-document) and returns structured data from a PDF. You'll need an [API key](https://app.sensible.so/account/?t=api_keys).\n    2  \n    3  \n\n137 matches across 23 files\n\n\nSearching 148 files for \"api\" (case sensitive)\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\internal-doc-guidelines.md:\n   28  You can author the docs in GitHub-flavored Markdown, with the following minor restrictions and caveats:\n   29  \n   30: - **links** - The preferred linking method is to use Readme's syntax like this: `[some title](doc:some-doc-slug)`. or `[Some title](ref:some-api-endpoint-slug)`. (Not recommended: you can also use relative links, but  then you have to leave out the .md extension. Like this: `[syntax for relative link to a doc](./readme-sync/v0/some-file-name-no-textension)`. (Future improvement: should be easy to modify readme-sync code to strip out .md ext... <skipped 75 characters> ...\n   31  \n   32  - **images** - You can't use relative links,   `[like this syntax](./images/some-image)`. We'll use hyperlinks instead to images stored on the master branch like this: `![](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/images/v0/some_image.png)` . \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\batch-api.md:\n   20  \n   21  ```curl\n   22:    curl 'https://api.sensible.so/v0/extract/batch' \\\n   23     --header 'Content-Type: application/json' \\\n   24     --header 'Authorization: Bearer YOUR_API_KEY' \\\n   ..\n   50  \n   51  ```curl\n   52:    curl 'https://api.sensible.so/v0/extract/batch/upload_urls/c73c7932-82c0-438c-a339-175d7d0771bd/0/1' \\\n   53     --header 'Content-Type: application/json' \\\n   54     --header 'Authorization: Bearer YOUR_API_KEY' \\\n   ..\n   97  \n   98  ```json\n   99:    curl 'https://api.sensible.so/v0/documents/0b34ce99-bf15-4e0d-a391-b03e4c830414' \\\n  100     --header 'Authorization: Bearer YOUR_API_KEY'\n  101  ```\n  ...\n  122  \n  123     ```curl\n  124:    curl 'https://api.sensible.so/v0/generate_excel_from_batch/c73c7932-82c0-438c-a339-175d7d0771bd' \\\n  125     --header 'Authorization: Bearer YOUR_API_KEY'\n  126     ```\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\1000 - api-tutorial\\1000 - api-tutorial-sync.md:\n   22  ---\n   23  \n   24: See [prerequisites](doc:api-tutorial#prerequisites).\n   25  \n   26  Run the request in Postman\n   ..\n   34  ```curl\n   35  curl --request POST \\\n   36:   --url 'https://api.sensible.so/v0/extract/tax_forms' \\\n   37    --header 'Authorization: Bearer YOUR_API_KEY' \\\n   38    --header 'Content-Type: application/pdf' \\\n   ..\n   42  2. In your Postman workspace, click **Import**, select **Raw text**, paste the code sample, and follow the prompts to import to code sample.\n   43  \n   44:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_import.png)\n   45  \n   46  3. Download the following example document, which works with the prerequisite  **tax_forms**  document type:\n   ..\n   51  4.  Correct the path to the downloaded document: In the request, click the **Body** tab, select **binary**, then click **Select file** and select the document you downloaded:\n   52  \n   53:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_file.png)\n   54  \n   55  \n   ..\n  109  3. Visually examine the example document (middle pane), config (left pane), and extracted data (right pane) to better understand the configuration for the API call you just ran:\n  110  \n  111: ![q](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_app.png)\n  112  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\1000 - api-tutorial\\2000 - api-tutorial-async-1.md:\n   14  This topic covers providing your own URLs. This is a good option if you host your documents at either publicly accessible or a pre-signed URLs. The URL must respond to GET requests with document bytes.\n   15  \n   16: For either option, you can get the results as soon as they're ready by specifying a [webhook](doc:api-tutorial-webhook).\n   17  \n   18  Extract from a URL you provide \n   ..\n   23  ----\n   24  \n   25: See [prerequisites](doc:api-tutorial#prerequisites).\n   26  \n   27  Extract the data \n   ..\n   33  \n   34     ```json\n   35:    curl --request POST 'https://api.sensible.so/v0/extract_from_url/tax_forms' \\\n   36     --header 'Authorization: Bearer YOUR_API_KEY' \\\n   37     --header 'Content-Type: application/json' \\\n   ..\n   43  3. In your Postman workspace, click **Import**, select **Raw text**, paste the code sample, and follow the prompts to import to code sample.\n   44  \n   45:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_1.png)\n   46  \n   47  3. Click **Send**, and you should see a response like:\n   ..\n   64  \n   65  - Use the `/documents` endpoint. See the following steps.\n   66: - Use a webhook. See [Try a webhook](doc:api-tutorial-webhook).\n   67  \n   68  \n   ..\n   83  \n   84  ```json\n   85: curl --request GET 'https://api.sensible.so/v0/documents/YOUR_EXTRACTION_ID' \\\n   86  --header 'Authorization: Bearer YOUR_API_KEY'\n   87  ```\n   ..\n   89  3. In your Postman workspace, click **Import**, select **Raw text**, paste the code sample, and follow the prompts to import to code sample.\n   90  \n   91:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_2.png)\n   92  \n   93  4. Click **Send**. The response includes a `parsed_document` object that looks something like the following:\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\1000 - api-tutorial\\2100 - api-tutorial-async-2.md:\n   12  This topic covers using URLs provided by Sensible. This is a good option if you can't create either publicly accessible or pre-signed URLs for your documents.\n   13  \n   14: For either option, you can get the results as soon as they're ready by specifying a [webhook](doc:api-tutorial-webhook).\n   15  \n   16  Extract from a URL Sensible provides\n   ..\n   20  ----\n   21  \n   22: See [prerequisites](doc:api-tutorial#prerequisites).\n   23  \n   24  \n   ..\n   33  \n   34  ```json\n   35: curl --request POST 'https://api.sensible.so/v0/generate_upload_url/tax_forms' \\\n   36  --header 'Content-Type: application/json' \\\n   37  --header 'Authorization: Bearer YOUR_API_KEY' \\\n   ..\n   41  2. In your Postman workspace, click **Import**, select **Raw text**, paste the code sample, and follow the prompts to import the code sample.\n   42  \n   43:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_3.png)\n   44  \n   45  3. Click **Send**. The response looks something like the following:\n   ..\n   71  2. In your Postman workspace, click **Import**, select **Raw text**, paste the code sample, and follow the prompts to import to code sample.\n   72  \n   73:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_4.png)\n   74  \n   75  **Troubleshoot**: Postman can automatically add authorization and content-type headers that cause errors:\n   ..\n   77  - If Postman automatically specifies authorization for the request, then specify **No Auth** in the request's **Auth** tab :\n   78  \n   79: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_no_auth.png)\n   80  \n   81  - If Postman automatically specifies a content type header, then ensure that the value of the Content-Type header matches that of the `content_type` body parameter in the request in step 1. In this case, it must be `application/pdf`.\n   82  \n   83: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_headers_2.png)\n   84  \n   85  3. If you haven't already, download the following example document, which works with the example `tax_forms` document type you created in the **Prerequisites** section:\n   ..\n   90  4. Correct the path to the downloaded document in your request: click the **Body** tab, select **binary**, then click **Select file** and select the document:\n   91  \n   92:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_file.png)\n   93  \n   94    \n   ..\n   96  5. Click **Send** to send the request. The response is  `200`:\n   97  \n   98: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_200.png) \n   99  \n  100  \n  ...\n  105  \n  106  - Use the `/documents` endpoint. See the following steps.\n  107: - Use a webhook. See [Try a webhook](doc:api-tutorial-webhook).\n  108  \n  109  \n  ...\n  124  \n  125  ```json\n  126: curl --request GET 'https://api.sensible.so/v0/documents/YOUR_EXTRACTION_ID' \\\n  127  --header 'Authorization: Bearer YOUR_API_KEY'\n  128  ```\n  ...\n  130  3. In your Postman workspace, click **Import**, select **Raw text**, paste the code sample, and follow the prompts to import to code sample.\n  131  \n  132: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_2.png)\n  133  \n  134  4. Click **Send**. The response includes a `parsed_document` object that looks something like the following:\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\1000 - api-tutorial\\3000 - api-tutorial-webhook.md:\n   11  ====\n   12  \n   13: See [prerequisites](doc:api-tutorial#prerequisites). \n   14  \n   15  \n   ..\n   19  1. Generate a destination for the webhook: navigate to [https://webhook.site/](https://webhook.site/) to automatically create a unique test page:\n   20  \n   21:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_webhook_1.png)\n   22  **Note:** Use this website [solely for testing](https://webhook.site/terms). In production, make your own destination for the webhook payload.\n   23  \n   ..\n   25  \n   26  ```json\n   27: curl --location --request POST 'https://api.sensible.so/v0/extract_from_url/tax_forms' \\\n   28  --header 'Authorization: Bearer YOUR_API_TOKEN' \\\n   29  --header 'Content-Type: application/json' \\\n   ..\n   36     \n   37  \n   38:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_webhook_2.png)\n   39  \n   40  4. Click **Send** in Postman.\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\1000 - api-tutorial\\index.md:\n   39  Try out the endpoints with these tutorials:\n   40  \n   41: - [Try synchronous extraction](doc:api-tutorial-sync)\n   42: - [Try asynchronous extraction](doc:api-tutorial-async-1)\n   43: - [Try a webhook](doc:api-tutorial-webhook)\n   44  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\3000 - quickstart.md:\n   34    \"codes\": [\n   35      {\n   36:       \"code\": \"curl -L https://github.com/sensible-hq/sensible-docs/raw/main/readme-sync/assets/v0/pdfs/1_extract_your_first_data.pdf \\\\\\n  --output 1_extract_your_first_data.pdf && \\\\\\ncurl --request POST \\\\\\n  --url \\\"https://api.sensible.so/v0/extract/senseml_basics\\\" \\\\\\n  --header \\\"Authorization: Bearer <YOUR_API_TOKEN>\\\" \\\\\\n  --header \\\"Content-Type: application/pdf\\\" \\\\\\n  --data-binary \\\"@1_extract_your_first_data.pdf\\\" \\n\",\n   37        \"language\": \"shell\",\n   38        \"name\": \"Linux/Mac\"\n   39      },\n   40      {\n   41:       \"code\": \"curl -L https://github.com/sensible-hq/sensible-docs/raw/main/readme-sync/assets/v0/pdfs/1_extract_your_first_data.pdf ^\\n  --output 1_extract_your_first_data.pdf && ^\\ncurl --request POST ^\\n  --url \\\"https://api.sensible.so/v0/extract/senseml_basics\\\" ^\\n  --header \\\"Authorization: Bearer <YOUR_API_TOKEN>\\\" ^\\n  --header \\\"Content-Type: application/pdf\\\" ^\\n  --data-binary \\\"@1_extract_your_first_data.pdf\\\" \\n\",\n   42        \"language\": \"shell\",\n   43        \"name\": \"Windows\"\n   ..\n   82  \n   83  - See the [API reference](https://docs.sensible.so/reference/choosing-an-endpoint) and [example code](https://github.com/sensible-hq/sensible-code-examples)\n   84: - If you're new to APIs, see [API tutorials](doc:api-tutorial)\n   85  - To get started with authoring extraction configurations, or configs, for your custom documents, see [Getting Started](doc:getting-started-ai).\n   86  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\sdk-guides.md:\n    8  | Language        | Quickstart                                                   | Guides                                                       |\n    9  | --------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n   10: | Node/Typescript | [Node quickstart](https://github.com/sensible-hq/sensible-api-js#quickstart) | [Node readme](https://github.com/sensible-hq/sensible-api-js#readme) |\n   11: | Python          | [Python quickstart](https://github.com/sensible-hq/sensible-api-py#quickstart) | [Python readme](https://github.com/sensible-hq/sensible-api-py#readme) |\n   12  \n   13  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\2000 - zapier\\1000 - zapier-getting-started.md:\n    1  ---\n    2: title: \"Zapier tutorial\"\n    3  hidden: false\n    4  \n    5  ---\n    6  \n    7: This topic describes sending extracted data from example documents into an Airtable database using Sensible's Zapier integration. \n    8  \n    9: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_0.png)\n   10  \n   11  Create an example Sensible extraction\n   12  ----\n   13  \n   14: To configure Zapier, you'll use a recent example of a document extraction. Follow the steps in [Getting started with out-of-the-box extractions](doc:library-quickstart) to create a JSON extraction from an example 1040 tax form. \n   15  \n   16: **Note** Ensure your example extraction contains non-null values for all fields you intend to configure in Zapier.\n   17  \n   18  Create an empty destination database\n   ..\n   24  2. Create a destination Airtable base using the following image as a guide, with **extraction id**, **adjusted gross income**, and **taxpayer name**:\n   25  \n   26: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_7.png)\n   27  \n   28: The base contains a field (displayed as a column), for each piece of document data to extract.  Zapier adds a record (displayed as a row), for each new document you extract from.\n   29  \n   30  3. (Optional) examine the [example extraction](https://app.sensible.so/quick-extraction/) you created in the previous section. To add more data from the extraction, create corresponding Airtable fields. For example, create a `Total taxes owed` field.\n   31  \n   32: Configure Zapier\n   33  ----\n   34  \n   35: Take the following steps to connect Sensible to Airtable using Zapier:\n   36  \n   37: 1. Sign in or create a [Zapier account](https://zapier.com/).\n   38  2. Create a new Zap. For your trigger, search for and select **Sensible**.\n   39: 3. Take the following steps to connect your Sensible account to Zapier:\n   40     1. Click to expand the **Trigger** section.\n   41     2. Click to expand the **Choose account** section, then follow the prompts to connect your Sensible account.\n   42  4. In the **Set up trigger** section, select the **tax_forms** document type you created in the previous steps, select the **Production** environment, and select the **Complete** status. \n   43  \n   44: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_1.png)\n   45  \n   46  5. Continue to the **Test trigger** section and follow the prompts to test. Verify that the recent document extraction you created in previous steps is selected:\n   47  \n   48:  ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_2.png)\n   49  \n   50  6. Continue to the **Action** section, search for and select **Airtable**:\n   51     1. For the **Event**, choose **Create records (With Line Item Support)** \n   52:    2. Follow the prompts to connect your Airtable account to Zapier. \n   53  \n   54: 7. In the **Set up action** section, map Sensible extracted field ids to the corresponding Airtable field names. Zapier displays the data from the recent document extraction as examples. Use the following screenshot to complete the configuration:\n   55  \n   56:  ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_3.png)\n   57  \n   58  8. (Optional) If you created extra fields in the database, map each one.\n   ..\n   60  9. Follow the prompts to test the action. You should see the extracted data from the [1040 example document](https://github.com/sensible-hq/sensible-configuration-library/raw/main/tax_forms/1040/2021/1040_2021_sample.pdf) as a row in Airtable:\n   61  \n   62: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_4.png)\n   63  \n   64  9. Follow the prompts to publish your Zap. \n   ..\n   75     - [2020 1040 example document](https://github.com/sensible-hq/sensible-configuration-library/tree/main/tax_forms/1040/2020)\n   76  \n   77: 3. Zapier can take up to 15 minutes to pull data from Sensible. To avoid waiting, navigate to the **Zaps** tab in Zapier, right-click the Zap's ellipsis (...) icon and click **Run**.\n   78  \n   79  4. Verify the extractions show up in Airtable: \n   80  \n   81: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_5.png)\n   82  \n   83  \n   ..\n   86  ---\n   87  \n   88: You can extract from more documents automatically by building a more complex Zap so that you can trigger Sensible extractions with file actions in Google drive, email, or other supported Zapier apps.\n   89: Then send the extraction to the destination of your choice with a Sensible action.  For more information, see [Advanced Zapier tutorial](doc:zapier-tutorial-2).![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_action.png)\n   90  \n   91  \n   ..\n   96  **Limitations**\n   97  \n   98: - You can configure single-value field output with the Sensible-Zapier integration. For multi-value output such as tables and sections, you can compile document extractions into a spreadsheet or CSV file using Sensible's API or SDKs. For more information, see [SenseML to Excel reference](doc:excel-reference).\n   99: - You can extract from single-document files with Zapier. If you want to extract from portfolio files (files that contain multiple documents, for example, insurance application bundles), use the Sensible API or SDKs. \n  100  \n  101  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\2000 - zapier\\2000 - zapier-tutorial-2.md:\n    1  ---\n    2: title: \"Advanced Zapier tutorial\"\n    3  hidden: false\n    4  \n    5  ---\n    6  \n    7: This topic describes how to configure an example two-Zap workflow for Zapier. The example workflow extracts data from emailed documents and uploads them as spreadsheets to Google Drive. \n    8  \n    9: You can use the example Zaps in this topic as templates. For example, modify this workflow to trigger extractions based on other file actions in Zapier-support apps (for example, a new document uploaded to Google Drive instead of a new email in Gmail). Or, output to different destinations (for example, a database record instead of spreadsheet files in Google Drive).\n   10  \n   11  Zap 1\n   12  ---\n   13  \n   14: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_action_1.png)\n   15  \n   16: Every time you receive an email in Gmail with a 1040 document attached, Zapier triggers Sensible to extract data from it.\n   17  \n   18  Zap 2\n   19  ---\n   20  \n   21: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_action_2.png)\n   22  \n   23: Every time Sensible extracts a document, Zapier checks that it's a 1040 document. If so, Zapier triggers Sensible to create a spreadsheet of the extracted data, and uploads the spreadsheet to a folder in Google drive.\n   24  \n   25  Take the following steps to run these Zaps with example data, then modify them for your needs.\n   ..\n   35  1. Choose a Gmail account for the Zaps. Send a test email to it with an [example 1040 document](https://github.com/sensible-hq/sensible-configuration-library/raw/main/tax_forms/1040/2021/1040_2021_sample.pdf)  attached and make sure the subject line includes the text `1040`.\n   36  2. Create an empty Google Drive folder as a destination for the spreadsheets of extracted data.\n   37: 3. (Optional) In the Google Drive folder, create a spreadsheet named `Zapier-Sensible Extractions Logs` to log each time the Zaps run. Create columns to record information about each extraction, for example, `Extraction ID` , `Extraction Date` , `Email link`, and `Extraction link`.\n   38  \n   39  Zap 1: Extract emailed 1040 doc with Sensible\n   ..\n   80  Congratulations, your integration is now published and running! Take the following steps to continue populating a Google folder from example documents:\n   81  \n   82: 1. Email the following example 1040 documents to the Gmail account, ensuring that they match the search criteria you created in Zapier:\n   83     - [2018 1040 example document](https://github.com/sensible-hq/sensible-configuration-library/tree/main/tax_forms/1040/2018)\n   84     - [2019 1040 example document](https://github.com/sensible-hq/sensible-configuration-library/tree/main/tax_forms/1040/2019)\n   85     - [2020 1040 example document](https://github.com/sensible-hq/sensible-configuration-library/tree/main/tax_forms/1040/2020)\n   86  \n   87: 2. Zapier can take up to 15 minutes to pull data from Sensible. To avoid waiting, navigate to the **Zaps** tab in Zapier, right-click the Zap's ellipsis (...) icon and click **Run**.\n   88  \n   89  3. Wait a few minutes, then verify the extractions show up in your Google Drive folder as spreadsheets:\n   90  \n   91:    ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_action_3.png)\n   92  \n   93  4. Verify the extractions show up in your optionally configured logs:\n   94  \n   95:    ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_action_4.png)\n   96  \n   97  Notes\n   ..\n  100  **General Limitations**\n  101  \n  102: - You can configure single-value field output with the Sensible-Zapier integration. For multi-value output such as tables and sections, you can compile document extractions into a spreadsheet or CSV file using Sensible's API. For more information, see [SenseML to Excel reference](doc:excel-reference).\n  103: - You can extract from single-document files with Zapier. If you want to extract from portfolio files (documents that contain multiple documents, for example, insurance application bundles), use the Sensible app, API, or SDK. \n  104  \n  105  **Sensible action limitations**\n  106  \n  107: - If you select **New file in folder**  event in Google drive folder as the trigger for the Sensible action, Zapier ignores uploaded files whose create or modified date is older than 4 days. \n  108: - When setting up the Sensible action, run an extraction on the same file you intend to use for your Zapier sample setup a minute or so before you start configuring the Zap in order to get sample data. Otherwise, Zapier returns an incomplete extraction during configuration.\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\2000 - zapier\\index.md:\n    1  ---\n    2: title: \"Zapier overview\"\n    3  hidden: false\n    4  \n    5  ---\n    6  \n    7: With Sensible's Zapier integration, you can transform data in PDFs and other document file types into emails, databases, Google sheets, and other Zapier-supported destinations.\n    8  \n    9  For example, you can extract data in 1040 tax forms: \n   10  \n   11: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_6.png)\n   12  \n   13: And send the data to a database. The following image shows how Zapier can send extracted data from each document to a record, or row, in an Airtable database: \n   14  \n   15: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_5.png)\n   16  \n   17: When creating a Zapier integration, you can either:\n   18  \n   19  - Run extractions in Sensible and then act on the data with a **Sensible trigger**.\n   ..\n   26  Every time you run an extraction using the Sensible [app](https://app.sensible.so/quick-extraction), API, or SDKs, you can automatically send the data to a destination, for example an email or database, using a **Sensible trigger**: \n   27  \n   28: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_trigger.png)\n   29  \n   30: For more information, see the [Zapier getting started guide](doc:zapier-getting-started).\n   31  \n   32  Sensible action\n   33  ---\n   34  \n   35: You can bypass the Sensible app, API, or SDKs and instead trigger Sensible extractions with file actions in Google drive, email, or other supported Zapier apps. Then send the extraction to the destination of your choice with a **Sensible action**.\n   36  \n   37: ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_action.png)\n   38  \n   39: For more information, see [Advanced Zapier tutorial](zapier-tutorial-2). \n   40  \n   41  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\4000 - quick-extraction\\7600 - excel-reference.md:\n   65  ​        In the preceding example, Sensible recommends using either `car_year` or `manufacture_year`, not both.\n   66  \n   67: - To configure multi-document spreadsheet output using different rules than those described here, configure rules with Sensible's [Zapier](doc:zapier) integration. You can map single-value field output with this integration, but not multi-value field output.\n   68  \n   69  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\layout-based-extractions\\1000 - getting-started.md:\n  608  \n  609  \n  610: 5. To test the validations with a document that's missing information, [try out an API call](doc:api-tutorial-async-1) with the following example document that has these errors:\n  611  \n  612     -  the policy number is missing\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\layout-based-extractions\\3000 - portfolio.md:\n  104  \n  105  ```\n  106: curl --request POST 'https://api.sensible.so/v0/extract_from_url/' \\\n  107  --header 'Authorization: Bearer {API_TOKEN}' \\\n  108  --header 'Content-Type: application/json' \\\n  ...\n  112  2. This request returns an EXTRACTION_ID. Use it to retrieve the extractions:\n  113  ```\n  114: curl --request GET 'https://api.sensible.so/v0/documents/{EXTRACTION_ID}' \\\n  115  --header 'Authorization: Bearer {API_TOKEN}'\n  116  ```\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\2000 - field-query-object\\1300 - types.md:\n  629    {\n  630      \"id\": \"name\",\n  631:     \"capitalization\": \"allCaps\"\n  632    }\n  633  ```\n  ...\n  650  | ----------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n  651  | id (**required**) | `name`                                                       |                                                              |\n  652: | capitalization    | `allCaps`, `firstLetter`. Default: no change to source capitalization | Formats the output in all uppercase, or with the first letter of each word capitalized. |\n  653  \n  654  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\3000 - natural-language-methods\\1600 - summarizer.md:\n   27  | source_id (**required**) | field ID     | Specifies a field whose output is a snippet of text with the key/value information you want to extract. If the snippet doesn't occur at a predictable location in the document, then you can use the [Topic](doc:topic) method to find it. |\n   28  | fields (**required**)    | string array | Names of the keys you want to extract. These names have an impact on the free-text extraction, so choose names that have a meaningful relationship to the target data to extract. For example, for a dollar amount of rent to extract,  `rent`, `rents`, and `rent_in_dollars` are good naming choices. |\n   29: <skipped 72 characters> ...s about how to extract information from the text in the Source ID parameter.<br/>For more information about how to write instructions (or \"prompts\"), see [Best practices for prompt engineering with OpenAI](https://help.openai.com/en/articles/6654000-best-practices-for-prompt-engineering-with-openai-api).<br/>For an example of using this parameter, see the Examples section. |\n   30  | samples                  | object array | Short snippets of text similar to the text in the Source ID parameter, with examples of the information to extract. <br/>Use in addition to the Instructions parameter to increase the LLM's accuracy. <br/>Contains these parameters:<br/>`prompt` (string): An... <skipped 370 characters> ...ary value. To override this behavior, specify a Sample parameter whose Prompt parameter has a text snippet that's missing the target data, and whose Values array indicates the data is missing (for example, \"N/A\" or \"not found\").<br/>For an example of using this parameter, see the Examples section. |\n   31  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\6500 - sections\\9000 - sections-example-copy-to-section.md:\n  181    \"_raw_policy_name\": {\n  182      \"type\": \"string\",\n  183:     \"value\": \"National Landscaping Solutions\"\n  184    },\n  185    \"monthly_total_unprocessed_claims\": [\n  ...\n  210        },\n  211        \"policy_name_and_number\": {\n  212:         \"value\": \"National Landscaping Solutions 5501234567\",\n  213          \"type\": \"string\"\n  214        }\n  ...\n  222        \"phone_number\": null,\n  223        \"policy_name_and_number\": {\n  224:         \"value\": \"National Landscaping Solutions 5501234567\",\n  225          \"type\": \"string\"\n  226        }\n  ...\n  238        },\n  239        \"policy_name_and_number\": {\n  240:         \"value\": \"National Landscaping Solutions 5501234567\",\n  241          \"type\": \"string\"\n  242        }\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\welcome\\3000 - integrate.md:\n    9  | ------------------------------ | --------------------------------------------- | ------------------------------------------------------------ |\n   10  | SDKs | [SDK guides](doc:sdk-guides) | Extract and classify documents. |\n   11: | [Zapier](doc:zapier)           | [Zapier tutorial](doc:zapier-getting-started) | Transform data in PDFs and other document file types into emails, databases, Google sheets, and other Zapier-supported destinations. |\n   12  | [API](ref:choosing-an-endpoint) | [API quickstart](doc:quickstart)              | Extract and classify documents and manage extraction configuration. |\n   13  | Quick extraction | [Quick extraction](doc:quick-extraction) | Drag and drop documents to extract data from documents in the Sensible app.  Upload files in bulk, and download extracted data as JSON or Excel files. |\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js\\README.md:\n   40  \n   41  ```shell\n   42: npm install sensible-api\n   43  ```\n   44  \n   ..\n   63  \n   64  ```node\n   65: import { SensibleSDK } from \"sensible-api\";\n   66  \n   67  const sensible = new SensibleSDK(YOUR_API_KEY); //replace with your API key\n   ..\n  176  ```node\n  177  import { promises as fs } from \"fs\";\n  178: import { SensibleSDK } from \"sensible-api\";\n  179  import got from \"got\";\n  180: const apiKey = process.env.SENSIBLE_APIKEY;\n  181: const sensible = new SensibleSDK(apiKey);\n  182  const dir = \"ABSOLUTE_PATH_TO_DOCUMENTS_DIR\";\n  183  const files = (await fs.readdir(dir)).filter((file) => file.match(/\\.pdf$/));\n  ...\n  226  \n  227  ```node\n  228: import { SensibleSDK } from \"sensible-api\";\n  229  \n  230  const sensible = new SensibleSDK(\"YOUR_API_KEY\");\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-api-py\\README.md:\n   38  \n   39  ```shell\n   40: pip install sensibleapi\n   41  ```\n   42  \n   ..\n   61  \n   62  ```python\n   63: from sensibleapi import SensibleSDK\n   64  \n   65  sensible = SensibleSDK(\"YOUR_API_KEY\")  # replace with your API key\n   ..\n  177  import json\n  178  import requests\n  179: from sensibleapi import SensibleSDK\n  180  from pathlib import Path\n  181  \n  182: api_key = os.environ.get(SENSIBLE_APIKEY)\n  183: sensible = SensibleSDK(api_key)\n  184  dir_path = Path(\"ABSOLUTE_PATH_TO_DOCUMENTS_DIR\")\n  185  pdf_files = [file for file in dir_path.glob(\"*.pdf\")]\n  ...\n  235  \n  236  ```python\n  237: from sensibleapi import SensibleSDK\n  238  \n  239: sensible = SensibleSDK(api_key=\"YOUR_API_KEY\")  # Replace with your API key\n  240  request = sensible.classify(path=\"./boa_sample.pdf\")\n  241  results = sensible.wait_for(request)\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-code-examples\\node\\readme.md:\n    1: This starter code calls Sensible [extraction APIs](https://docs.sensible.so/reference#extract-data-from-a-document) and returns structured data from a PDF. You'll need an [API key]([https://www.sensible.so/get-early-access](https://app.sensible.so/account/?t=api_keys)).\n    2  \n    3  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-code-examples\\python\\readme.md:\n    1: This starter code calls Sensible [extraction APIs](https://docs.sensible.so/reference#extract-data-from-a-document) and returns structured data from a PDF. You'll need an [API key](https://app.sensible.so/account/?t=api_keys).\n    2  \n    3  \n\n137 matches across 23 files\n",
			"settings":
			{
				"buffer_size": 116465,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "/C/Users/franc/Documents/GitHub/sensible-code-examples/readme.md",
			"settings":
			{
				"buffer_size": 417,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "NO"
					},
					"AgAAAEwBAAAAAAAATQEAAAAAAAAAAAAATQEAAAAAAABOAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAEAAAAAAABMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"left_delete",
					null,
					"AQAAAE0BAAAAAAAATQEAAAAAAAABAAAATw",
					"AQAAAAAAAAABAAAATgEAAAAAAABOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "ote:"
					},
					"BAAAAE0BAAAAAAAATgEAAAAAAAAAAAAATgEAAAAAAABPAQAAAAAAAAAAAABPAQAAAAAAAFABAAAAAAAAAAAAAFABAAAAAAAAUQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQEAAAAAAABNAQAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": " See"
					},
					"BAAAAFEBAAAAAAAAUgEAAAAAAAAAAAAAUgEAAAAAAABTAQAAAAAAAAAAAABTAQAAAAAAAFQBAAAAAAAAAAAAAFQBAAAAAAAAVQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQEAAAAAAABRAQAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAFUBAAAAAAAAVgEAAAAAAAAAAAAAVgEAAAAAAABXAQAAAAAAAAAAAABXAQAAAAAAAFgBAAAAAAAAAAAAAFgBAAAAAAAAWQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQEAAAAAAABVAQAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFkBAAAAAAAAWgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQEAAAAAAABZAQAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAFoBAAAAAAAAXAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgEAAAAAAABaAQAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "SDK"
					},
					"AwAAAFsBAAAAAAAAXAEAAAAAAAAAAAAAXAEAAAAAAABdAQAAAAAAAAAAAABdAQAAAAAAAF4BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWwEAAAAAAABbAQAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " Guides"
					},
					"BwAAAF4BAAAAAAAAXwEAAAAAAAAAAAAAXwEAAAAAAABgAQAAAAAAAAAAAABgAQAAAAAAAGEBAAAAAAAAAAAAAGEBAAAAAAAAYgEAAAAAAAAAAAAAYgEAAAAAAABjAQAAAAAAAAAAAABjAQAAAAAAAGQBAAAAAAAAAAAAAGQBAAAAAAAAZQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgEAAAAAAABeAQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGYBAAAAAAAAaAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgEAAAAAAABmAQAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "doc:sdk"
					},
					"BwAAAGcBAAAAAAAAaAEAAAAAAAAAAAAAaAEAAAAAAABpAQAAAAAAAAAAAABpAQAAAAAAAGoBAAAAAAAAAAAAAGoBAAAAAAAAawEAAAAAAAAAAAAAawEAAAAAAABsAQAAAAAAAAAAAABsAQAAAAAAAG0BAAAAAAAAAAAAAG0BAAAAAAAAbgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZwEAAAAAAABnAQAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "-guides"
					},
					"BwAAAG4BAAAAAAAAbwEAAAAAAAAAAAAAbwEAAAAAAABwAQAAAAAAAAAAAABwAQAAAAAAAHEBAAAAAAAAAAAAAHEBAAAAAAAAcgEAAAAAAAAAAAAAcgEAAAAAAABzAQAAAAAAAAAAAABzAQAAAAAAAHQBAAAAAAAAAAAAAHQBAAAAAAAAdQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgEAAAAAAABuAQAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"left_delete",
					null,
					"AQAAAF8BAAAAAAAAXwEAAAAAAAABAAAARw",
					"AQAAAAAAAAABAAAAYAEAAAAAAABgAQAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAF8BAAAAAAAAYAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwEAAAAAAABfAQAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAAHYBAAAAAAAAdwEAAAAAAAAAAAAAdwEAAAAAAAB4AQAAAAAAAAAAAAB4AQAAAAAAAHkBAAAAAAAAAAAAAHkBAAAAAAAAegEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgEAAAAAAAB2AQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " convenient"
					},
					"CwAAAHoBAAAAAAAAewEAAAAAAAAAAAAAewEAAAAAAAB8AQAAAAAAAAAAAAB8AQAAAAAAAH0BAAAAAAAAAAAAAH0BAAAAAAAAfgEAAAAAAAAAAAAAfgEAAAAAAAB/AQAAAAAAAAAAAAB/AQAAAAAAAIABAAAAAAAAAAAAAIABAAAAAAAAgQEAAAAAAAAAAAAAgQEAAAAAAACCAQAAAAAAAAAAAACCAQAAAAAAAIMBAAAAAAAAAAAAAIMBAAAAAAAAhAEAAAAAAAAAAAAAhAEAAAAAAACFAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAegEAAAAAAAB6AQAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " access"
					},
					"BwAAAIUBAAAAAAAAhgEAAAAAAAAAAAAAhgEAAAAAAACHAQAAAAAAAAAAAACHAQAAAAAAAIgBAAAAAAAAAAAAAIgBAAAAAAAAiQEAAAAAAAAAAAAAiQEAAAAAAACKAQAAAAAAAAAAAACKAQAAAAAAAIsBAAAAAAAAAAAAAIsBAAAAAAAAjAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQEAAAAAAACFAQAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAAIwBAAAAAAAAjQEAAAAAAAAAAAAAjQEAAAAAAACOAQAAAAAAAAAAAACOAQAAAAAAAI8BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAEAAAAAAACMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAI8BAAAAAAAAkAEAAAAAAAAAAAAAkAEAAAAAAACRAQAAAAAAAAAAAACRAQAAAAAAAJIBAAAAAAAAAAAAAJIBAAAAAAAAkwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwEAAAAAAACPAQAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " Sensible"
					},
					"CQAAAJMBAAAAAAAAlAEAAAAAAAAAAAAAlAEAAAAAAACVAQAAAAAAAAAAAACVAQAAAAAAAJYBAAAAAAAAAAAAAJYBAAAAAAAAlwEAAAAAAAAAAAAAlwEAAAAAAACYAQAAAAAAAAAAAACYAQAAAAAAAJkBAAAAAAAAAAAAAJkBAAAAAAAAmgEAAAAAAAAAAAAAmgEAAAAAAACbAQAAAAAAAAAAAACbAQAAAAAAAJwBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwEAAAAAAACTAQAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " API."
					},
					"BQAAAJwBAAAAAAAAnQEAAAAAAAAAAAAAnQEAAAAAAACeAQAAAAAAAAAAAACeAQAAAAAAAJ8BAAAAAAAAAAAAAJ8BAAAAAAAAoAEAAAAAAAAAAAAAoAEAAAAAAAChAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAEAAAAAAACcAQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/C/Users/franc/Documents/GitHub/sensible-sdk-js/README.md",
			"settings":
			{
				"buffer_size": 13579,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "v0/welcome/2000 - getting-started-ai.md",
			"settings":
			{
				"buffer_size": 6439,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAABADAAAAAAAAEQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAMAAAAAAAAQAwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "v0/senseml-reference/8000 - concepts/1600 - file-types.md",
			"settings":
			{
				"buffer_size": 2788,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					11,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAHcCAAAAAAAAeAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwIAAAAAAAB3AgAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAABsDAAAAAAAAHAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGwMAAAAAAAAbAwAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAALsDAAAAAAAAvAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuwMAAAAAAAC7AwAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"left_delete",
					null,
					"AQAAAKEEAAAAAAAAoQQAAAAAAAAMAAAAeW5jaHJvbm91cyBz",
					"AQAAAAAAAAABAAAArQQAAAAAAAChBAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "for"
					},
					"BAAAAKsEAAAAAAAArAQAAAAAAAAAAAAArAQAAAAAAACsBAAAAAAAAAoAAAAoQVBJIG9ubHkprAQAAAAAAACtBAAAAAAAAAAAAACtBAAAAAAAAK4EAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqwQAAAAAAAC1BAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK4EAAAAAAAArwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArgQAAAAAAACuBAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAAK8EAAAAAAAAsQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwQAAAAAAACvBAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "/extract"
					},
					"CAAAALAEAAAAAAAAsQQAAAAAAAAAAAAAsQQAAAAAAACyBAAAAAAAAAAAAACyBAAAAAAAALMEAAAAAAAAAAAAALMEAAAAAAAAtAQAAAAAAAAAAAAAtAQAAAAAAAC1BAAAAAAAAAAAAAC1BAAAAAAAALYEAAAAAAAAAAAAALYEAAAAAAAAtwQAAAAAAAAAAAAAtwQAAAAAAAC4BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsAQAAAAAAACwBAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " API"
					},
					"BAAAALkEAAAAAAAAugQAAAAAAAAAAAAAugQAAAAAAAC7BAAAAAAAAAAAAAC7BAAAAAAAALwEAAAAAAAAAAAAALwEAAAAAAAAvQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQQAAAAAAAC5BAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " endpoint"
					},
					"CQAAAL0EAAAAAAAAvgQAAAAAAAAAAAAAvgQAAAAAAAC/BAAAAAAAAAAAAAC/BAAAAAAAAMAEAAAAAAAAAAAAAMAEAAAAAAAAwQQAAAAAAAAAAAAAwQQAAAAAAADCBAAAAAAAAAAAAADCBAAAAAAAAMMEAAAAAAAAAAAAAMMEAAAAAAAAxAQAAAAAAAAAAAAAxAQAAAAAAADFBAAAAAAAAAAAAADFBAAAAAAAAMYEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvQQAAAAAAAC9BAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " sync"
					},
					"BQAAAK4EAAAAAAAArwQAAAAAAAAAAAAArwQAAAAAAACwBAAAAAAAAAAAAACwBAAAAAAAALEEAAAAAAAAAAAAALEEAAAAAAAAsgQAAAAAAAAAAAAAsgQAAAAAAACzBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArgQAAAAAAACuBAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "hronous"
					},
					"BwAAALMEAAAAAAAAtAQAAAAAAAAAAAAAtAQAAAAAAAC1BAAAAAAAAAAAAAC1BAAAAAAAALYEAAAAAAAAAAAAALYEAAAAAAAAtwQAAAAAAAAAAAAAtwQAAAAAAAC4BAAAAAAAAAAAAAC4BAAAAAAAALkEAAAAAAAAAAAAALkEAAAAAAAAugQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAswQAAAAAAACzBAAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"paste",
					null,
					"AgAAAK8EAAAAAAAAugQAAAAAAAAAAAAAugQAAAAAAAC6BAAAAAAAAAsAAABzeW5jaHJvbm91cw",
					"AQAAAAAAAAABAAAArwQAAAAAAAC6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"left_delete",
					null,
					"AQAAAK8EAAAAAAAArwQAAAAAAAABAAAAUw",
					"AQAAAAAAAAABAAAAsAQAAAAAAACwBAAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAK8EAAAAAAAAsAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwQAAAAAAACvBAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AgAAAOQEAAAAAAAA5QQAAAAAAAAAAAAA5QQAAAAAAADlBAAAAAAAAA4AAABBc3luY2hyb25vdXMgcw",
					"AQAAAAAAAAABAAAA8gQAAAAAAADkBAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAAO4EAAAAAAAA7wQAAAAAAAAAAAAA7wQAAAAAAADwBAAAAAAAAAAAAADwBAAAAAAAAPEEAAAAAAAAAAAAAPEEAAAAAAAA8gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7gQAAAAAAADuBAAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": " aysnch"
					},
					"BwAAAPIEAAAAAAAA8wQAAAAAAAAAAAAA8wQAAAAAAAD0BAAAAAAAAAAAAAD0BAAAAAAAAPUEAAAAAAAAAAAAAPUEAAAAAAAA9gQAAAAAAAAAAAAA9gQAAAAAAAD3BAAAAAAAAAAAAAD3BAAAAAAAAPgEAAAAAAAAAAAAAPgEAAAAAAAA+QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8gQAAAAAAADyBAAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "ronous"
					},
					"BgAAAPkEAAAAAAAA+gQAAAAAAAAAAAAA+gQAAAAAAAD7BAAAAAAAAAAAAAD7BAAAAAAAAPwEAAAAAAAAAAAAAPwEAAAAAAAA/QQAAAAAAAAAAAAA/QQAAAAAAAD+BAAAAAAAAAAAAAD+BAAAAAAAAP8EAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QQAAAAAAAD5BAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": " calls"
					},
					"BgAAAP8EAAAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAABBQAAAAAAAAAAAAABBQAAAAAAAAIFAAAAAAAAAAAAAAIFAAAAAAAAAwUAAAAAAAAAAAAAAwUAAAAAAAAEBQAAAAAAAAAAAAAEBQAAAAAAAAUFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wQAAAAAAAD/BAAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "/{}"
					},
					"AwAAAMQEAAAAAAAAxQQAAAAAAAAAAAAAxQQAAAAAAADGBAAAAAAAAAAAAADGBAAAAAAAAMcEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxAQAAAAAAADEBAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "doc-type"
					},
					"CAAAAMYEAAAAAAAAxwQAAAAAAAAAAAAAxwQAAAAAAADIBAAAAAAAAAAAAADIBAAAAAAAAMkEAAAAAAAAAAAAAMkEAAAAAAAAygQAAAAAAAAAAAAAygQAAAAAAADLBAAAAAAAAAAAAADLBAAAAAAAAMwEAAAAAAAAAAAAAMwEAAAAAAAAzQQAAAAAAAAAAAAAzQQAAAAAAADOBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgQAAAAAAADGBAAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					2,
					"left_delete",
					null,
					"AgAAAK8EAAAAAAAArwQAAAAAAAALAAAAc3luY2hyb25vdXOuBAAAAAAAAK4EAAAAAAAAAQAAACA",
					"AQAAAAAAAAABAAAArwQAAAAAAAC6BAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "v0/senseml-reference/7500 - advanced-computed-field-methods/0700 - get-file-metadata.md",
			"settings":
			{
				"buffer_size": 1722,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAAADAAAAAAAAAQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAMAAAAAAAAAAwAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "Document"
					},
					"CQAAAMECAAAAAAAAwgIAAAAAAAAAAAAAwgIAAAAAAADCAgAAAAAAAA8AAABgZG9jdW1lbnRfbmFtZWDCAgAAAAAAAMMCAAAAAAAAAAAAAMMCAAAAAAAAxAIAAAAAAAAAAAAAxAIAAAAAAADFAgAAAAAAAAAAAADFAgAAAAAAAMYCAAAAAAAAAAAAAMYCAAAAAAAAxwIAAAAAAAAAAAAAxwIAAAAAAADIAgAAAAAAAAAAAADIAgAAAAAAAMkCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwQIAAAAAAADQAgAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " Name"
					},
					"BQAAAMkCAAAAAAAAygIAAAAAAAAAAAAAygIAAAAAAADLAgAAAAAAAAAAAADLAgAAAAAAAMwCAAAAAAAAAAAAAMwCAAAAAAAAzQIAAAAAAAAAAAAAzQIAAAAAAADOAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQIAAAAAAADJAgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "v0/senseml-reference/6800 - document-type-settings/4000 - ocr-level.md",
			"redo_stack":
			[
				[
					4,
					1,
					"left_delete",
					null,
					"AQAAAKYEAAAAAAAA8wQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApgQAAAAAAACmBAAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 2256,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "v0/senseml-reference/6500 - sections/6000 - sections-example-table-grid.md",
			"settings":
			{
				"buffer_size": 8517,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					10,
					1,
					"insert",
					{
						"characters": "extraction"
					},
					"CwAAAKMGAAAAAAAApAYAAAAAAAAAAAAApAYAAAAAAACkBgAAAAAAAAMAAABBUEmkBgAAAAAAAKUGAAAAAAAAAAAAAKUGAAAAAAAApgYAAAAAAAAAAAAApgYAAAAAAACnBgAAAAAAAAAAAACnBgAAAAAAAKgGAAAAAAAAAAAAAKgGAAAAAAAAqQYAAAAAAAAAAAAAqQYAAAAAAACqBgAAAAAAAAAAAACqBgAAAAAAAKsGAAAAAAAAAAAAAKsGAAAAAAAArAYAAAAAAAAAAAAArAYAAAAAAACtBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowYAAAAAAACmBgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "v0/senseml-reference/6500 - sections/4000 - sections-example-nested-columns.md",
			"settings":
			{
				"buffer_size": 4747,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					6,
					1,
					"insert",
					{
						"characters": "extraction"
					},
					"CwAAAFwFAAAAAAAAXQUAAAAAAAAAAAAAXQUAAAAAAABdBQAAAAAAAAMAAABBUEldBQAAAAAAAF4FAAAAAAAAAAAAAF4FAAAAAAAAXwUAAAAAAAAAAAAAXwUAAAAAAABgBQAAAAAAAAAAAABgBQAAAAAAAGEFAAAAAAAAAAAAAGEFAAAAAAAAYgUAAAAAAAAAAAAAYgUAAAAAAABjBQAAAAAAAAAAAABjBQAAAAAAAGQFAAAAAAAAAAAAAGQFAAAAAAAAZQUAAAAAAAAAAAAAZQUAAAAAAABmBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAUAAAAAAABfBQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "v0/senseml-reference/2000 - field-query-object/index.md",
			"settings":
			{
				"buffer_size": 5838,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"insert",
					{
						"characters": "object"
					},
					"BwAAAPUGAAAAAAAA9gYAAAAAAAAAAAAA9gYAAAAAAAD2BgAAAAAAAAcAAABzZWN0aW9u9gYAAAAAAAD3BgAAAAAAAAAAAAD3BgAAAAAAAPgGAAAAAAAAAAAAAPgGAAAAAAAA+QYAAAAAAAAAAAAA+QYAAAAAAAD6BgAAAAAAAAAAAAD6BgAAAAAAAPsGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9QYAAAAAAAD8BgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "v0/integrations/4000 - quick-extraction/index.md",
			"settings":
			{
				"buffer_size": 3681,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "["
					},
					"AQAAAGcMAAAAAAAAaAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZwwAAAAAAABnDAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "]()"
					},
					"AwAAAHUMAAAAAAAAdgwAAAAAAAAAAAAAdgwAAAAAAAB3DAAAAAAAAAAAAAB3DAAAAAAAAHgMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQwAAAAAAAB1DAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "doc:sdk"
					},
					"BwAAAHcMAAAAAAAAeAwAAAAAAAAAAAAAeAwAAAAAAAB5DAAAAAAAAAAAAAB5DAAAAAAAAHoMAAAAAAAAAAAAAHoMAAAAAAAAewwAAAAAAAAAAAAAewwAAAAAAAB8DAAAAAAAAAAAAAB8DAAAAAAAAH0MAAAAAAAAAAAAAH0MAAAAAAAAfgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwwAAAAAAAB3DAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "-guides"
					},
					"BwAAAH4MAAAAAAAAfwwAAAAAAAAAAAAAfwwAAAAAAACADAAAAAAAAAAAAACADAAAAAAAAIEMAAAAAAAAAAAAAIEMAAAAAAAAggwAAAAAAAAAAAAAggwAAAAAAACDDAAAAAAAAAAAAACDDAAAAAAAAIQMAAAAAAAAAAAAAIQMAAAAAAAAhQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgwAAAAAAAB+DAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "v0/integrations/2000 - zapier/index.md",
			"settings":
			{
				"buffer_size": 1932,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"left_delete",
					null,
					"AQAAADwEAAAAAAAAPAQAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAPQQAAAAAAAA9BAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAEMEAAAAAAAARAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwQAAAAAAABDBAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADwEAAAAAAAAPQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAQAAAAAAAA8BAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAOgFAAAAAAAA6QUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6AUAAAAAAADoBQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "v0/integrations/2000 - zapier/1000 - zapier-getting-started.md",
			"settings":
			{
				"buffer_size": 6077,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAIwWAAAAAAAAjRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjBYAAAAAAACMFgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "v0/best-practices/5000 - guides/3000 - go-live.md",
			"settings":
			{
				"buffer_size": 1095,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAM0DAAAAAAAAzgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQMAAAAAAADNAwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "v0/best-practices/5000 - guides/2000 - troubleshoot.md",
			"settings":
			{
				"buffer_size": 1700,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "or"
					},
					"AgAAALkAAAAAAAAAugAAAAAAAAAAAAAAugAAAAAAAAC7AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQAAAAAAAAC5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": " SDK"
					},
					"BAAAALsAAAAAAAAAvAAAAAAAAAAAAAAAvAAAAAAAAAC9AAAAAAAAAAAAAAC9AAAAAAAAAL4AAAAAAAAAAAAAAL4AAAAAAAAAvwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuwAAAAAAAAC7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAL8AAAAAAAAAwAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvwAAAAAAAAC/AAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "v0/best-practices/5000 - guides/1000 - test-before-integrating-configs.md",
			"settings":
			{
				"buffer_size": 1679,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "F"
					},
					"AQAAAPMBAAAAAAAA9AEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8wEAAAAAAADzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"left_delete",
					null,
					"AQAAAPMBAAAAAAAA8wEAAAAAAAABAAAARg",
					"AQAAAAAAAAABAAAA9AEAAAAAAAD0AQAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "In"
					},
					"AgAAADsBAAAAAAAAPAEAAAAAAAAAAAAAPAEAAAAAAAA9AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwEAAAAAAAA7AQAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAD0BAAAAAAAAPgEAAAAAAAAAAAAAPgEAAAAAAAA/AQAAAAAAAAAAAAA/AQAAAAAAAEABAAAAAAAAAAAAAEABAAAAAAAAQQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQEAAAAAAAA9AQAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " API"
					},
					"BAAAAEEBAAAAAAAAQgEAAAAAAAAAAAAAQgEAAAAAAABDAQAAAAAAAAAAAABDAQAAAAAAAEQBAAAAAAAAAAAAAEQBAAAAAAAARQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQEAAAAAAABBAQAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " or"
					},
					"AwAAAEUBAAAAAAAARgEAAAAAAAAAAAAARgEAAAAAAABHAQAAAAAAAAAAAABHAQAAAAAAAEgBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQEAAAAAAABFAQAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " SDk"
					},
					"BAAAAEgBAAAAAAAASQEAAAAAAAAAAAAASQEAAAAAAABKAQAAAAAAAAAAAABKAQAAAAAAAEsBAAAAAAAAAAAAAEsBAAAAAAAATAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASAEAAAAAAABIAQAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"left_delete",
					null,
					"AQAAAEsBAAAAAAAASwEAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAATAEAAAAAAABMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "Ks,"
					},
					"AwAAAEsBAAAAAAAATAEAAAAAAAAAAAAATAEAAAAAAABNAQAAAAAAAAAAAABNAQAAAAAAAE4BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwEAAAAAAABLAQAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " specify"
					},
					"CAAAAE4BAAAAAAAATwEAAAAAAAAAAAAATwEAAAAAAABQAQAAAAAAAAAAAABQAQAAAAAAAFEBAAAAAAAAAAAAAFEBAAAAAAAAUgEAAAAAAAAAAAAAUgEAAAAAAABTAQAAAAAAAAAAAABTAQAAAAAAAFQBAAAAAAAAAAAAAFQBAAAAAAAAVQEAAAAAAAAAAAAAVQEAAAAAAABWAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATgEAAAAAAABOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " `development"
					},
					"DQAAAFYBAAAAAAAAVwEAAAAAAAAAAAAAVwEAAAAAAABYAQAAAAAAAAAAAABYAQAAAAAAAFkBAAAAAAAAAAAAAFkBAAAAAAAAWgEAAAAAAAAAAAAAWgEAAAAAAABbAQAAAAAAAAAAAABbAQAAAAAAAFwBAAAAAAAAAAAAAFwBAAAAAAAAXQEAAAAAAAAAAAAAXQEAAAAAAABeAQAAAAAAAAAAAABeAQAAAAAAAF8BAAAAAAAAAAAAAF8BAAAAAAAAYAEAAAAAAAAAAAAAYAEAAAAAAABhAQAAAAAAAAAAAABhAQAAAAAAAGIBAAAAAAAAAAAAAGIBAAAAAAAAYwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVgEAAAAAAABWAQAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "`"
					},
					"AQAAAGMBAAAAAAAAZAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwEAAAAAAABjAQAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAAGQBAAAAAAAAZQEAAAAAAAAAAAAAZQEAAAAAAABmAQAAAAAAAAAAAABmAQAAAAAAAGcBAAAAAAAAAAAAAGcBAAAAAAAAaAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAEAAAAAAABkAQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAGgBAAAAAAAAaQEAAAAAAAAAAAAAaQEAAAAAAABqAQAAAAAAAAAAAABqAQAAAAAAAGsBAAAAAAAAAAAAAGsBAAAAAAAAbAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAEAAAAAAABoAQAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " Environment"
					},
					"DAAAAGwBAAAAAAAAbQEAAAAAAAAAAAAAbQEAAAAAAABuAQAAAAAAAAAAAABuAQAAAAAAAG8BAAAAAAAAAAAAAG8BAAAAAAAAcAEAAAAAAAAAAAAAcAEAAAAAAABxAQAAAAAAAAAAAABxAQAAAAAAAHIBAAAAAAAAAAAAAHIBAAAAAAAAcwEAAAAAAAAAAAAAcwEAAAAAAAB0AQAAAAAAAAAAAAB0AQAAAAAAAHUBAAAAAAAAAAAAAHUBAAAAAAAAdgEAAAAAAAAAAAAAdgEAAAAAAAB3AQAAAAAAAAAAAAB3AQAAAAAAAHgBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAEAAAAAAABsAQAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " parameter"
					},
					"CgAAAHgBAAAAAAAAeQEAAAAAAAAAAAAAeQEAAAAAAAB6AQAAAAAAAAAAAAB6AQAAAAAAAHsBAAAAAAAAAAAAAHsBAAAAAAAAfAEAAAAAAAAAAAAAfAEAAAAAAAB9AQAAAAAAAAAAAAB9AQAAAAAAAH4BAAAAAAAAAAAAAH4BAAAAAAAAfwEAAAAAAAAAAAAAfwEAAAAAAACAAQAAAAAAAAAAAACAAQAAAAAAAIEBAAAAAAAAAAAAAIEBAAAAAAAAggEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAEAAAAAAAB4AQAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAIIBAAAAAAAAgwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggEAAAAAAACCAQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"left_delete",
					null,
					"AQAAAIIBAAAAAAAAggEAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAgwEAAAAAAACDAQAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAAIIBAAAAAAAAgwEAAAAAAAAAAAAAgwEAAAAAAACEAQAAAAAAAAAAAACEAQAAAAAAAIUBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggEAAAAAAACCAQAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " your"
					},
					"BQAAAIUBAAAAAAAAhgEAAAAAAAAAAAAAhgEAAAAAAACHAQAAAAAAAAAAAACHAQAAAAAAAIgBAAAAAAAAAAAAAIgBAAAAAAAAiQEAAAAAAAAAAAAAiQEAAAAAAACKAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQEAAAAAAACFAQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " extraction"
					},
					"CwAAAIoBAAAAAAAAiwEAAAAAAAAAAAAAiwEAAAAAAACMAQAAAAAAAAAAAACMAQAAAAAAAI0BAAAAAAAAAAAAAI0BAAAAAAAAjgEAAAAAAAAAAAAAjgEAAAAAAACPAQAAAAAAAAAAAACPAQAAAAAAAJABAAAAAAAAAAAAAJABAAAAAAAAkQEAAAAAAAAAAAAAkQEAAAAAAACSAQAAAAAAAAAAAACSAQAAAAAAAJMBAAAAAAAAAAAAAJMBAAAAAAAAlAEAAAAAAAAAAAAAlAEAAAAAAACVAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigEAAAAAAACKAQAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " calls"
					},
					"BgAAAJUBAAAAAAAAlgEAAAAAAAAAAAAAlgEAAAAAAACXAQAAAAAAAAAAAACXAQAAAAAAAJgBAAAAAAAAAAAAAJgBAAAAAAAAmQEAAAAAAAAAAAAAmQEAAAAAAACaAQAAAAAAAAAAAACaAQAAAAAAAJsBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQEAAAAAAACVAQAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJsBAAAAAAAAnAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmwEAAAAAAACbAQAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					2,
					"left_delete",
					null,
					"AgAAAJwBAAAAAAAAnAEAAAAAAAB1AAAAQWRkIHRoZSBxdWVyeSBwYXJhbWV0ZXIgYD9lbnZpcm9ubWVudD1kZXZlbG9wbWVudGAgdG8geW91ciBleHRyYWN0aW9uIFtBUEkgY2FsbHNdKGh0dHBzOi8vZG9jcy5zZW5zaWJsZS5zby9yZWZlcmVuY2UpmwEAAAAAAACbAQAAAAAAAAEAAAAg",
					"AQAAAAAAAAABAAAAnAEAAAAAAAARAgAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"cut",
					null,
					"AQAAAJwBAAAAAAAAnAEAAAAAAAAbAAAAdG8gdGVzdCB5b3VyIHVwZGF0ZWQgY29uZmln",
					"AQAAAAAAAAABAAAAtwEAAAAAAACcAQAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"left_delete",
					null,
					"AQAAAJsBAAAAAAAAmwEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAnAEAAAAAAACcAQAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"paste",
					null,
					"AQAAADsBAAAAAAAAVgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwEAAAAAAAA7AQAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFYBAAAAAAAAVwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVgEAAAAAAABWAQAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFcBAAAAAAAAWAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwEAAAAAAABXAQAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"left_delete",
					null,
					"AQAAAFgBAAAAAAAAWAEAAAAAAAABAAAASQ",
					"AQAAAAAAAAABAAAAWAEAAAAAAABZAQAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAFgBAAAAAAAAWQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAEAAAAAAABYAQAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"left_delete",
					null,
					"AQAAADsBAAAAAAAAOwEAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAPAEAAAAAAAA8AQAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "T"
					},
					"AQAAADsBAAAAAAAAPAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwEAAAAAAAA7AQAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"cut",
					null,
					"AQAAAFgBAAAAAAAAWAEAAAAAAAASAAAAaW4gdGhlIEFQSSBvciBTREtz",
					"AQAAAAAAAAABAAAAWAEAAAAAAABqAQAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					2,
					"left_delete",
					null,
					"AgAAAFgBAAAAAAAAWAEAAAAAAAABAAAALFcBAAAAAAAAVwEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAWQEAAAAAAABZAQAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": " APJI"
					},
					"BQAAAJMBAAAAAAAAlAEAAAAAAAAAAAAAlAEAAAAAAACVAQAAAAAAAAAAAACVAQAAAAAAAJYBAAAAAAAAAAAAAJYBAAAAAAAAlwEAAAAAAAAAAAAAlwEAAAAAAACYAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwEAAAAAAACTAQAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					2,
					"left_delete",
					null,
					"AgAAAJcBAAAAAAAAlwEAAAAAAAABAAAASZYBAAAAAAAAlgEAAAAAAAABAAAASg",
					"AQAAAAAAAAABAAAAmAEAAAAAAACYAQAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "I"
					},
					"AQAAAJYBAAAAAAAAlwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlgEAAAAAAACWAQAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": " ro"
					},
					"AwAAAJcBAAAAAAAAmAEAAAAAAAAAAAAAmAEAAAAAAACZAQAAAAAAAAAAAACZAQAAAAAAAJoBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwEAAAAAAACXAQAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJoBAAAAAAAAmwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgEAAAAAAACaAQAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					3,
					"left_delete",
					null,
					"AwAAAJoBAAAAAAAAmgEAAAAAAAABAAAAIJkBAAAAAAAAmQEAAAAAAAABAAAAb5gBAAAAAAAAmAEAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAmwEAAAAAAACbAQAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "or"
					},
					"AgAAAJgBAAAAAAAAmQEAAAAAAAAAAAAAmQEAAAAAAACaAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAEAAAAAAACYAQAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": " SDK"
					},
					"BAAAAJoBAAAAAAAAmwEAAAAAAAAAAAAAmwEAAAAAAACcAQAAAAAAAAAAAACcAQAAAAAAAJ0BAAAAAAAAAAAAAJ0BAAAAAAAAngEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgEAAAAAAACaAQAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ui:",
				"UI: Select Color Scheme"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/franc/Documents/GitHub/sensible-docs",
		"/C/Users/franc/Documents/GitHub/sensible-docs/.github",
		"/C/Users/franc/Documents/GitHub/sensible-docs/.github/workflows",
		"/C/Users/franc/Documents/GitHub/sensible-docs/scripts",
		"/C/Users/franc/Documents/GitHub/sensible-docs/scripts/check_links",
		"/C/Users/franc/Documents/GitHub/sensible-sdk-js",
		"/C/Users/franc/Documents/GitHub/sensible-api-py"
	],
	"file_history":
	[
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/2000 - zapier/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/2000 - zapier/1000 - zapier-getting-started.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/best-practices/5000 - guides/1000 - test-before-integrating-configs.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/6700 - config-settings/2000 - verbosity.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - methods/2100 - deprecated-table.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/8000 - concepts/4600 - table-methods.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/llm-based extractions/instruct/2000 - list-tips.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - methods/1400 - fixed-table.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/7500 - advanced-computed-field-methods/0100 - add-computed-fields.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/welcome/cheat/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/8000 - concepts/1600 - file-types.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/6000 - computed-field-methods/1500 - zip.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - natural-language-methods/1000 - nlp-table.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - methods/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - methods/2200 - text-table.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - methods/2000 - row.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - methods/1500 - invoice.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - field-query-object/1300 - types.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - field-query-object/1200 - method.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/llm-based extractions/instruct/3000 - table-tips.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/4000 - quick-extraction/7600 - excel-reference.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/best-practices/5000 - guides/1000 - performance.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/llm-based extractions/3000 - prompt.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/best-practices/3000 - confidence.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/layout-based-extractions/1000 - getting-started.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/llm-based extractions/instruct/1000 - query-group-tips.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - natural-language-methods/1500 - draft-group.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - natural-language-methods/1500 - query-group.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - natural-language-methods/1500 - query.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/llm-based extractions/instruct/1000 - query-tips.md",
		"/C/Users/franc/Documents/GitHub/bekindtoyourspine/CNAME",
		"/C/Users/franc/Documents/GitHub/sensible-docs/openapi_extraction.yml",
		"/C/Users/franc/Downloads/for the following table represented in json,",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/llm-based extractions/instruct/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - natural-language-methods/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/5000 - preprocessors/1060 - nlp.md",
		"/C/Users/franc/Downloads/bal",
		"/C/Users/franc/Downloads/balasdf",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/6800 - document-type-settings/1000 - fingerprint-mode.md",
		"/C/Users/franc/Downloads/asdfasdf",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - field-query-object/1100 - match.md",
		"/C/Users/franc/Downloads/fdas.yaml",
		"/C/Users/franc/Documents/GitHub/sensible/.git/info/exclude",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/assets/v0/json/verbose_extraction_3_verbosity.json",
		"/C/Users/franc/Pictures/greenshot pics/2023-12-15 12_52_16-Franco Fontana _ Basilicata (1986) _ Available for Sale _ Artsy.png",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/best-practices/5000 - guides/3000 - go-live.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/welcome/2000 - getting-started-ai.md",
		"/C/Users/franc/Documents/GitHub/sensible-code-examples/node/readme.md",
		"/C/Users/franc/Documents/GitHub/sensible-code-examples/python/readme.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/welcome/3000 - integrate.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/layout-based-extractions/2000 - library-quickstart.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/4000 - quick-extraction/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/openapi_configuration.yml",
		"/C/Users/franc/Documents/GitHub/sensible-docs/scripts/check_links/check_links.rb",
		"/C/Users/franc/Documents/GitHub/sensible-docs/.github/workflows/check_links.yml",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - natural-language-methods/1600 - summarizer.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - natural-language-methods/1000 - list.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/best-practices/4000 - validate-extractions.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/6500 - sections/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/api/1000 - api-tutorial/1000 - api-tutorial-sync.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/1000 - senseml-reference-introduction.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - field-query-object/1000 - anchor.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/8000 - concepts/3600 - section-nuances.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - methods/1300 - document-range.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/3000 - quickstart.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/openapi_classification.yml",
		"/C/Users/franc/Documents/GitHub/sensible-api-py/README.md",
		"/C/Users/franc/Documents/GitHub/sensible-sdk-js/README.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/README.md",
		"/?wsl.localhost/Ubuntu-20.04/home/franc/sensible-typescript/extract_dir_1_excel.mjs",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/draft-python.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/api/1000 - api-tutorial/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/layout-based-extractions/5000 - concepts/1600 - file-types.md",
		"/C/Users/franc/Documents/GitHub/sensible-api-py/draft_python.md",
		"/C/Users/franc/Documents/GitHub/sensible-code-examples/python/extract_doc.py",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/sdk-quickstarts.md",
		"/C/ProgramData/Vanta/vanta.conf",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/sdk-reference/draft-node-example.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/sdk-reference/sdk-node.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/write-prompts/instruct/1000 - query-tips.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/SDK quickstarts/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/SDK quickstarts/quickstart-node.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/sdk-reference/draft-javascript-example.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/sdk-reference/sdk-javascript.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/SDK quickstarts/quickstart-javascript.md"
	],
	"find":
	{
		"height": 46.0
	},
	"find_in_files":
	{
		"height": 125.6,
		"where_history":
		[
			"*.md, ",
			"*.md, *.yaml, *.yml",
			"*.md",
			"*.md, *.yaml, *.yml",
			"*.md, ",
			"*.md, *.yaml, *.yml",
			"*.md, ",
			"*.md, *.yaml, *.yml",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync, C:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js, C:\\Users\\franc\\Documents\\GitHub\\sensible-code-examples,*.md, *.yaml, *.yml",
			"<open files>",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync, C:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js, C:\\Users\\franc\\Documents\\GitHub\\sensible-code-examples,*.md, *.yaml, *.yml",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\sdk-reference\\, C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\sdk-reference\\",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync, C:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js, C:\\Users\\franc\\Documents\\GitHub\\sensible-code-examples,*.md, *.yaml, *.yml",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync, C:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js,*.md, *.yaml, *.yml",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0, C:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js,*.md, *.yaml, *.yml",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0, C:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0; C:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"api",
			"`document_name` p",
			"API",
			"sdk",
			"API",
			"zapier.com",
			"retrocedant",
			"doc:tf",
			"deprecate",
			"doc:regex",
			"doc:signature",
			"doc:key-value",
			"key-value",
			"key-balue",
			"advanced-methods",
			"\"fixedTable",
			"fixedTable",
			"\"not\"",
			"annotateS",
			"detectTableStructureOnly",
			"doc\\:table",
			"doc\\:table^-",
			"doc:table#",
			"doc:table)",
			"doc:table",
			"table",
			"Table",
			"fixed-table_merged_cells.pdf",
			"\\\"id\\\"\\: \\\"table\\\"",
			"process",
			"sensible process ",
			"\"id\": \"table\"",
			"\"id\": \"ta",
			"\"table\"",
			"Table",
			"query-tips",
			"(doc:query",
			"(query",
			"query-tips",
			"pagehin",
			"page hinting",
			"Query",
			"query",
			"Query method",
			"(doc:query#",
			"[Query](doc:query#",
			"doc:query#",
			"doc:query",
			"(doc:query-group-tips",
			"(doc:query-tips",
			"(query-tips",
			"(query",
			"[query",
			"(doc:query-tips)",
			"[Query](doc:query-tips)",
			"(doc:query-tips)",
			"(doc:query)",
			"Query method",
			"[Query method](doc:query)",
			"[Query](doc:query)",
			"\"query\"",
			"column id",
			"2do",
			"todo",
			"annotate",
			"line-sort",
			"2do",
			"todo",
			"tips",
			"fingerprint.*50",
			"orange",
			"the filename in the extraction re",
			"producer",
			"filename",
			"gas_dec",
			"accord_25_test",
			"rate_confirmation_ch",
			"file t",
			"docx",
			"micros",
			"thorough",
			"range_2",
			"extraction history",
			"filter",
			"prompt intro",
			"promptint",
			"deprecated",
			"introduction",
			"readingOrderLeft",
			"\"type\": \"table\"",
			"\"type\":\"table\"",
			"left side",
			"inches",
			"x range",
			"in inches",
			"contains the foll",
			"jsonlogic]",
			"capturing",
			"capture",
			"grouping",
			"path:",
			"postman",
			"discourse",
			"community",
			"nearestcheckbox",
			"ocr",
			"bypass",
			"ocr",
			"ocrprov",
			"ocrEngine",
			"start",
			"origin",
			"relative",
			"gpt-3",
			"End",
			"Stop",
			"above* or",
			"end",
			"start",
			"intersect method",
			"computed field",
			"draft-custom",
			"rule",
			"jsonlogic",
			"computed_fields\"",
			"computed_fields",
			"\"parsed_document\":",
			"parsed_doc"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"Query Group method",
			"(doc:query-group#",
			"[Query Group](doc:query-group#",
			"[Query Group](doc:query-group-tips)",
			"[Query Group](doc:query-group)",
			"model",
			"insurer",
			"**Publish configuration**",
			"from sensibleapi",
			"index.py",
			"Python",
			"size and types",
			"https://github.com/sensible-hq/sensible-api-js#readme",
			"Node",
			"node",
			"-node",
			"node",
			"Node",
			"node",
			"doc:config-settings"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 116465,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions": "",
								"scope": ""
							}
						},
						"selection":
						[
							[
								74442,
								74442
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 4,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 42038.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Users/franc/Documents/GitHub/sensible-code-examples/readme.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 417,
						"regions":
						{
						},
						"selection":
						[
							[
								417,
								417
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/C/Users/franc/Documents/GitHub/sensible-sdk-js/README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13579,
						"regions":
						{
						},
						"selection":
						[
							[
								727,
								727
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "v0/welcome/2000 - getting-started-ai.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6439,
						"regions":
						{
						},
						"selection":
						[
							[
								785,
								785
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "v0/senseml-reference/8000 - concepts/1600 - file-types.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2788,
						"regions":
						{
						},
						"selection":
						[
							[
								1985,
								1985
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 156.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "v0/senseml-reference/7500 - advanced-computed-field-methods/0700 - get-file-metadata.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1722,
						"regions":
						{
						},
						"selection":
						[
							[
								718,
								718
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "v0/senseml-reference/6800 - document-type-settings/4000 - ocr-level.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2256,
						"regions":
						{
						},
						"selection":
						[
							[
								1179,
								1179
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 206.4,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "v0/senseml-reference/6500 - sections/6000 - sections-example-table-grid.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8517,
						"regions":
						{
						},
						"selection":
						[
							[
								1709,
								1709
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1156.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "v0/senseml-reference/6500 - sections/4000 - sections-example-nested-columns.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4747,
						"regions":
						{
						},
						"selection":
						[
							[
								1382,
								1382
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 956.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "v0/senseml-reference/2000 - field-query-object/index.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5838,
						"regions":
						{
						},
						"selection":
						[
							[
								2219,
								2219
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 880.8,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "v0/integrations/4000 - quick-extraction/index.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3681,
						"regions":
						{
						},
						"selection":
						[
							[
								3205,
								3205
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1006.4,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "v0/integrations/2000 - zapier/index.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1932,
						"regions":
						{
						},
						"selection":
						[
							[
								1513,
								1513
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 456.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "v0/integrations/2000 - zapier/1000 - zapier-getting-started.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6077,
						"regions":
						{
						},
						"selection":
						[
							[
								5773,
								5773
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2331.2,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "v0/best-practices/5000 - guides/3000 - go-live.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1095,
						"regions":
						{
						},
						"selection":
						[
							[
								974,
								974
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "v0/best-practices/5000 - guides/2000 - troubleshoot.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1700,
						"regions":
						{
						},
						"selection":
						[
							[
								192,
								192
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "v0/best-practices/5000 - guides/1000 - test-before-integrating-configs.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1679,
						"regions":
						{
						},
						"selection":
						[
							[
								1236,
								1236
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 231.2,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "f_project.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 257.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 592.0
	},
	"selected_group": 0,
	"settings":
	{
		"last_automatic_layout":
		[
			[
				0,
				0,
				1,
				1
			]
		]
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 285.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
