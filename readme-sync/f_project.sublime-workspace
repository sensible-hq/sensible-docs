{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "/C/Users/franc/Documents/GitHub/sensible-docs/.github/workflows/style_images.yml",
			"settings":
			{
				"buffer_size": 711,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/franc/Documents/GitHub/sensible-docs/scripts/style_images.sh",
			"settings":
			{
				"buffer_size": 819,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 164 files for \"page filter\"\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\5000 - preprocessors\\index.md:\n   14  | **[NLP](doc:nlp)**                     |                                                              | Advanced prompt configuration for each large language model (LLM)-based method in a config. |\n   15  | **[OCR](doc:ocr-preprocessor)**                     | ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/thumbnail_ocr.png) | Selectively OCRs pages in documents containing a mix of digitally generated text and text images (such as scanned text). If the whole PDF is a scan, you don't need to configure this preprocessor. |\n   16: | **[Page Filter](doc:page-filter)**     |                                                              | Filters out low-scoring pages given a bag of target terms and stop terms. |\n   17  | **[Page Range](doc:page-range)**       |                                                              | Ignores pages outside the start page and end page.           |\n   18  | **[Remove Header](doc:remove-header)** | ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/remove_header_1.png) | Removes repeating elements at the top of the page. Ignores header elements that overlap with the page's main body. |\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\7000 - deprecated-features\\1100 - deprecated-page-filter.md:\n    1  ---\n    2: title: \"(Deprectated) Page filter\"\n    3  hidden: true\n    4  ---\n\n2 matches across 2 files\n\n\nSearching 164 files for \"page fil\"\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\7000 - deprecated-features\\1100 - deprecated-page-filter.md:\n    1  ---\n    2: title: \"(Deprecated) Page filter\"\n    3  hidden: true\n    4  ---\n\n1 match in 1 file\n\n\nSearching 164 files for \"  !\"\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\1000 - api-tutorial\\1000 - api-tutorial-sync.md:\n   42  2. In your Postman workspace, click **Import**, select **Raw text**, paste the code sample, and follow the prompts to import to code sample.\n   43  \n   44:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_import.png)\n   45  \n   46  3. Download the following example document, which works with the prerequisite  **tax_forms**  document type:\n   ..\n   51  4.  Correct the path to the downloaded document: In the request, click the **Body** tab, select **binary**, then click **Select file** and select the document you downloaded:\n   52  \n   53:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_file.png)\n   54  \n   55  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\1000 - api-tutorial\\2000 - api-tutorial-async-1.md:\n   43  3. In your Postman workspace, click **Import**, select **Raw text**, paste the code sample, and follow the prompts to import to code sample.\n   44  \n   45:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_1.png)\n   46  \n   47  3. Click **Send**, and you should see a response like:\n   ..\n   89  3. In your Postman workspace, click **Import**, select **Raw text**, paste the code sample, and follow the prompts to import to code sample.\n   90  \n   91:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_2.png)\n   92  \n   93  4. Click **Send**. The response includes a `parsed_document` object that looks something like the following:\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\1000 - api-tutorial\\2100 - api-tutorial-async-2.md:\n   41  2. In your Postman workspace, click **Import**, select **Raw text**, paste the code sample, and follow the prompts to import the code sample.\n   42  \n   43:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_3.png)\n   44  \n   45  3. Click **Send**. The response looks something like the following:\n   ..\n   71  2. In your Postman workspace, click **Import**, select **Raw text**, paste the code sample, and follow the prompts to import to code sample.\n   72  \n   73:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_4.png)\n   74  \n   75  **Troubleshoot**: Postman can automatically add authorization and content-type headers that cause errors:\n   ..\n   90  4. Correct the path to the downloaded document in your request: click the **Body** tab, select **binary**, then click **Select file** and select the document:\n   91  \n   92:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_postman_file.png)\n   93  \n   94    \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\api\\1000 - api-tutorial\\3000 - api-tutorial-webhook.md:\n   19  1. Generate a destination for the webhook: navigate to [https://webhook.site/](https://webhook.site/) to automatically create a unique test page:\n   20  \n   21:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_webhook_1.png)\n   22  **Note:** Use this website [solely for testing](https://webhook.site/terms). In production, make your own destination for the webhook payload.\n   23  \n   ..\n   36     \n   37  \n   38:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/api_quickstart_webhook_2.png)\n   39  \n   40  4. Click **Send** in Postman.\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\best-practices\\5000 - guides\\2500 - handwriting.md:\n   21  - **Choosing an OCR engine:** Choose Google OCR. To configure OCR, click the gear icon for the Document Type and select **Google**: \n   22  \n   23:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/merge_lines_ocr_1.png)\n   24  \n   25    \n   ..\n   27  - **Defining regions:** Handwriting can occupy an unpredictable region or even overlap other lines. To capture handwriting, Sensible recommends defining a [region](doc:region) with a small height and long width that runs through the middle of the area that can contain the handwriting. The green boxes in the following image show this approach: \n   28  \n   29:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/handwriting_1.png) \n   30  \n   31    For more information about how Sensible determines whether to extract a line that partially overlaps a region, see [Region](doc:region).\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\2000 - zapier\\2000 - zapier-tutorial-2.md:\n   89  3. Wait a few minutes, then verify the extractions show up in your Google Drive folder as spreadsheets:\n   90  \n   91:    ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_action_3.png)\n   92  \n   93  4. Verify the extractions show up in your optionally configured logs:\n   94  \n   95:    ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_action_4.png)\n   96  \n   97  Notes\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\layout-based-extractions\\1000 - getting-started.md:\n   53     | --------------------------- | ------------------------------------------------------------ |\n   54     2. As the following screenshot shows, click the **auto_insurance_quote** document type you created,  click the **Reference documents** tab, and click **Upload document**:\n   55:       ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/quickstart_upload_doc.png) \n   56  \n   57     3. In the file upload dialog, choose the generic car insurance quote you downloaded in a previous step.\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\8000 - concepts\\0400 - anchor-nuances.md:\n   94  - For **Anchor 2**, Sensible searches after the first instance of `here is an A line`, and discards anything earlier in the document. `\"match\":all\"` finds four anchors. Notice it doesn't anchor on the first line B (`Here is a B line sneakily inserted before the intro line`) because that instance precedes the start match. See the following image for an illustration:\n   95  \n   96:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/anchor_3.png)\n   97  \n   98  Try out this example in the Sensible app using the following document and config:\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\welcome\\2000 - draft-getting-started-ai.md:\n  133  - To extract the account activity for the savings account, configure the table as shown in the following image. Configure a query for each column in the table, for example, `credits`, `debits`, and `balance`.\n  134  \n  135:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/quickstart_llm_11.png)\n  136  \n  137  - Scroll down the right pane and click **Extract**. Sensible displays the extracted data:\n  138  \n  139:   ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/quickstart_llm_12.png)\n  140  \n  141     It looks like your prompt was successful at extracting the account activity. Great! \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\welcome\\2000 - getting-started-ai.md:\n   53  1. Click **Query group**:\n   54  \n   55:    ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/quickstart_instruct_2.png)\n   56  \n   57  2. Click **Auto generate**, then click **Generate**:\n   58  \n   59:    ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/quickstart_instruct_auto.png)\n   60  \n   61  3. Sensible automatically generates queries and extracts their answers from the document:\n   62  \n   63:    ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/quickstart_instruct_auto_2.png)\n   64  \n   65  4. (Optional) Add more queries by clicking **Suggest queries**, selecting the field IDs that interest you, and clicking **Add selected queries**:\n   66  \n   67:    ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/quickstart_instruct_auto_3.png)\n   68  \n   69  To test the automatically generated extraction configuration with another document,  see [Test the prompt](doc:getting-started-ai#test-the-prompt). To author your own extraction configurations, see the following steps.\n\n21 matches across 10 files\n\n\nSearching 163 files for \"bag of words\"\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\7000 - deprecated-methods\\1000 - deprecated-key-value.md:\n   20      \"0-1\": \"`keyValue`\",\n   21      \"1-0\": \"terms\",\n   22:     \"1-2\": \"An array of terms to score positively. For more information about scoring, see [bag of words](doc:deprecated-bag-of-words).\",\n   23      \"1-1\": \"Array of strings\",\n   24      \"2-0\": \"stopTerms\",\n   25:     \"2-2\": \"optional. An array of terms to score negatively. For more information about scoring, see [bag of words](doc:deprecated-bag-of-words).\",\n   26      \"2-1\": \"Array of strings\"\n   27    },\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\7000 - deprecated-methods\\1500 - deprecated-invoice.md:\n   24  | :------------------- | :-------- | :----------------------------------------------------------- |\n   25  | id (**required**)    | `invoice` | When you specify this method, you must also specify `\"type\": \"table\"` in the field's parameters. |\n   26: | columns **required** | array     | An array of objects with the following parameters: <br/> -`id` (**required**): The id for the column in the extraction output. <br/> -`terms` (**required**): An array of terms to score positively during column recognition. For more information about scoring, see [bag of words](doc:deprecated-bag-of-words) scoring. Usually, you include column heading terms in this array. <br/> -`stopTerms`: An array of terms to score negatively during column recognition. For more information about scoring, see [bag of words](doc:deprecated-bag-of-words).<br/> -`type`: The table cell's type. For more information about types, see [Field query object](doc:field-query-object). <br/>  -`isRequired` (default false): If true, Sensible omits a row if its cell is empty in this column. If false, Sensible returns nulls for empty cells in t... <skipped 160 characters> ...\n   27  \n   28  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\7000 - deprecated-methods\\2000 - deprecated-topic.md:\n   11  ## Description\n   12  \n   13: Finds a range of lines in a document that best match a topic as determined by a [bag of words](doc:deprecated-bag-of-words) scoring approach. Most useful in long, unstructured documents. For example, this method in conjunction with the [Summarizer method](doc:summarizer) can extract key-value pairs from free text using ML (machine learning).\n   14  \n   15  [**Parameters**](doc:deprecated-topic#parameters)\n   ..\n   25  | id (**required**)                         | `topic`      | The Anchor parameter is optional for fields that use this method. If you specify an anchor, Sensible searches from the anchor match to the end of the document for the topic. |\n   26  | numParagraphs  or numLines (**required**) | number       | The number of  paragraphs or consecutive lines to extract, respectively. <br/><br/><br/> If you set the Num Paragraphs parameter, Sensible scores every paragraph in the document and returns the highest-scoring paragraph.  For more informat... <skipped 124 characters> ...nsible scores every group of consecutive lines in the document and returns the highest-scoring group. For information about the definition of \"consecutive\", see [line sorting](doc:lines#line-sorting).<br/><br/>If line groups or paragraphs have equal scores, then Sensible returns the last one.<br/> |\n   27: | terms (**required**)                      | string array | An array of terms to score positively during topic recognition. For more information about scoring, see [bag of words](doc:deprecated-bag-of-words). |\n   28: | stopTerms                                 | string array | An array of terms to score negatively during topic recognition. For more information about scoring, see [bag of words](doc:deprecated-bag-of-words). |\n   29  \n   30  Examples\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\7000 - deprecated-methods\\2100 - deprecated-table.md:\n   27  | :----------------------- | :-------------------------------------------------- | :----------------------------------------------------------- |\n   28  | id (**required**)        | `table`                                             | When you specify this method, you must also specify `\"type\": \"table\"` in the field's parameters. See the Stop parameter for details about how Sensible recognizes a table. |\n   29: <skipped 105 characters> ...th the following parameters: <br/> -`id` (**required**): The id for the column in the extraction output. <br/>  -`terms` (**required**): An array of terms to score positively during column recognition. Usually, you include column heading terms in this array. For more information about scoring, see [bag of words](doc:deprecated-bag-of-words). <br/> -`stopTerms`: An array of terms to score negatively during column recognition. For more information about scoring, see [bag of words](doc:deprecated-bag-of-words). <br/> -`type`: The table cell's type. For more information, see [types](doc:types). <br/>  -`isRequired` (default false): If true, Sensible omits a row if its cell is empty in this column, or if the contents don't match the value you specify in this column's Type parameter. If f... <skipped 209 characters> ...\n   30  | stop                     | [Match object](doc:match) or array of Match objects | (**Recommended**)  Stops table recognition at the matched line. Otherwise, Sensible searches all pages for tables, which can impact performance.<br/>When you specify a stop, Sensible  uses an Amazon Web Service OCR  p... <skipped 113 characters> ...specify a stop, Sensible supports:<br/>- merged cells in tables. Sensible populates \"empty\" spanned cells with the spanned value. For an example, see [Merged cell example](doc:fixed-table#example-merged-cells).<br/> - checkboxes in cells. Returns checkbox selection status as `[true]` or `[false]`. |\n   31  | startOnRow               | integer. default: 0                                 | Zero-indexed row number at which to start table extraction. For example, use this to exclude column headings from the output. As a stricter alternative, set the Is Required parameter on a column and set a type on the column (see example in Examples section). |\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\8000 - concepts\\1000 - bag-of-words.md:\n    1  ---\n    2: title: \"Bag of words\"\n    3  hidden: false\n    4  ---\n    5  \n    6: Sensible uses the bag of words approach (measuring the frequency of word occurrence) for tasks such as identifying topics or tables in a document. As part of creating a vocabulary for the bag of words, Sensible processes strings in Terms and Stop Terms parameters using:\n    7  \n    8  - stemming - Sensible uses a [Porter stemmer](https://tartarus.org/martin/PorterStemmer/index.html).\n\n12 matches across 5 files\n\n\nSearching 165 files for \"doc:deprecated-bag-of-words\"\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\7000 - deprecated-features\\1000 - deprecated-key-value.md:\n   20      \"0-1\": \"`keyValue`\",\n   21      \"1-0\": \"terms\",\n   22:     \"1-2\": \"An array of terms to score positively. For more information about scoring, see [bag of words](doc:deprecated-bag-of-words).\",\n   23      \"1-1\": \"Array of strings\",\n   24      \"2-0\": \"stopTerms\",\n   25:     \"2-2\": \"optional. An array of terms to score negatively. For more information about scoring, see [bag of words](doc:deprecated-bag-of-words).\",\n   26      \"2-1\": \"Array of strings\"\n   27    },\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\7000 - deprecated-features\\1100 - deprecated-page-filter.md:\n   11  | ----------------------- | ------ | ------------------------------------------------------------ |\n   12  | type (**required**)     | string | \"pageFilter\"                                                 |\n   13: | terms (**required**)    | array  | An array of terms to score positively (for example, `[\"number of buildings\", \"no. of buildings\"]`). For more information about scoring, see [bag of words](doc:deprecated-bag-of-words). |\n   14: | stopTerms               | array  | An array of terms to score negatively (for example, `[\"comparables\"]`). For more information about scoring, see [bag of words](doc:deprecated-bag-of-words). |\n   15  | maxPages (**required**) | number | The maximum number of highest-scoring pages to pass through the filter |\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\7000 - deprecated-features\\1500 - deprecated-invoice.md:\n   24  | :------------------- | :-------- | :----------------------------------------------------------- |\n   25  | id (**required**)    | `invoice` | When you specify this method, you must also specify `\"type\": \"table\"` in the field's parameters. |\n   26: | columns **required** | array     | An array of objects with the following parameters: <br/> -`id` (**required**): The id for the column in the extraction output. <br/> -`terms` (**required**): An array of terms to score positively during column recognition. For more information about scoring, see [bag of words](doc:deprecated-bag-of-words) scoring. Usually, you include column heading terms in this array. <br/> -`stopTerms`: An array of terms to score negatively during column recognition. For more information about scoring, see [bag of words](doc:deprecated-bag-of-words).<br/> -`type`: The table cell's type. For more information about types, see [Field query object](doc:field-query-object). <br/>  -`isRequired` (default false): If true, Sensible omits a row if its cell is empty in this column. If false, Sensible returns nulls for empty cells in the row. Note that ... <skipped 142 characters> ...\n   27  \n   28  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\7000 - deprecated-features\\2000 - deprecated-topic.md:\n   11  ## Description\n   12  \n   13: Finds a range of lines in a document that best match a topic as determined by a [bag of words](doc:deprecated-bag-of-words) scoring approach. Most useful in long, unstructured documents. For example, this method in conjunction with the [Summarizer method](doc:summarizer) can extract key-value pairs from free text using ML (machine learning).\n   14  \n   15  [**Parameters**](doc:deprecated-topic#parameters)\n   ..\n   25  | id (**required**)                         | `topic`      | The Anchor parameter is optional for fields that use this method. If you specify an anchor, Sensible searches from the anchor match to the end of the document for the topic. |\n   26  | numParagraphs  or numLines (**required**) | number       | The number of  paragraphs or consecutive lines to extract, respectively. <br/><br/><br/> If you set the Num Paragraphs parameter, Sensible scores every paragraph in the document and returns the highest-scoring paragraph.  For more informat... <skipped 124 characters> ...nsible scores every group of consecutive lines in the document and returns the highest-scoring group. For information about the definition of \"consecutive\", see [line sorting](doc:lines#line-sorting).<br/><br/>If line groups or paragraphs have equal scores, then Sensible returns the last one.<br/> |\n   27: | terms (**required**)                      | string array | An array of terms to score positively during topic recognition. For more information about scoring, see [bag of words](doc:deprecated-bag-of-words). |\n   28: | stopTerms                                 | string array | An array of terms to score negatively during topic recognition. For more information about scoring, see [bag of words](doc:deprecated-bag-of-words). |\n   29  \n   30  Examples\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\7000 - deprecated-features\\2100 - deprecated-table.md:\n   27  | :----------------------- | :-------------------------------------------------- | :----------------------------------------------------------- |\n   28  | id (**required**)        | `table`                                             | When you specify this method, you must also specify `\"type\": \"table\"` in the field's parameters. See the Stop parameter for details about how Sensible recognizes a table. |\n   29: <skipped 119 characters> ...ng parameters: <br/> -`id` (**required**): The id for the column in the extraction output. <br/>  -`terms` (**required**): An array of terms to score positively during column recognition. Usually, you include column heading terms in this array. For more information about scoring, see [bag of words](doc:deprecated-bag-of-words). <br/> -`stopTerms`: An array of terms to score negatively during column recognition. For more information about scoring, see [bag of words](doc:deprecated-bag-of-words). <br/> -`type`: The table cell's type. For more information, see [types](doc:types). <br/>  -`isRequired` (default false): If true, Sensible omits a row if its cell is empty in this column, or if the contents don't match the value you specify in this column's Type parameter. If false, Sensible ret... <skipped 191 characters> ...\n   30  | stop                     | [Match object](doc:match) or array of Match objects | (**Recommended**)  Stops table recognition at the matched line. Otherwise, Sensible searches all pages for tables, which can impact performance.<br/>When you specify a stop, Sensible  uses an Amazon Web Service OCR  p... <skipped 113 characters> ...specify a stop, Sensible supports:<br/>- merged cells in tables. Sensible populates \"empty\" spanned cells with the spanned value. For an example, see [Merged cell example](doc:fixed-table#example-merged-cells).<br/> - checkboxes in cells. Returns checkbox selection status as `[true]` or `[false]`. |\n   31  | startOnRow               | integer. default: 0                                 | Zero-indexed row number at which to start table extraction. For example, use this to exclude column headings from the output. As a stricter alternative, set the Is Required parameter on a column and set a type on the column (see example in Examples section). |\n\n11 matches across 5 files\n\n\nSearching 165 files for \"singleextractionresponse\"\n\n0 matches\n\nSearching 165 files for \"extarctfromurlresponse\"\n\n0 matches\n\nSearching 166 files for \"contain\"\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\openapi_classification.yml:\n  237            description: File format of the document for which you requested classification.\n  238          download_link:\n  239:           description: Poll until the download URL returns a non-error response. Links to a JSON download that contains the same response as from the synchronous Classify endpoint request.\n  240            type: string\n  241            format: url\n  ...\n  250          document_type:\n  251            type: object\n  252:           description: Document type defined in the Sensible account that this doc is most similar to. To use a document type for classification, Sensible requires that the type contains at least one reference document.\n  253            properties:\n  254              id:\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\openapi_configuration.yml:\n  138        summary: Delete document type\n  139        description: |\n  140:         Delete a document type and everything it contains, for example configurations and reference PDfs,\n  141          but not its extraction history displayed in the Sensible app.\n  142        tags:\n  ...\n  981            example: false\n  982            description: >-\n  983:             The version list returned by this endpoint contains a single draft version ID that's used to manage the editor state in the Sensible app.\n  984              This draft version ID is never published to the development or production environments.\n  985        required:\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\openapi_extraction.yml:\n  608          For more information about the conversion process, see [SenseML to spreadsheet reference](doc:excel-reference).\n  609  \n  610:         For portfolio extractions, Sensible returns an Excel file containing fields for all the documents it finds in the PDF. For more information, see [Multi-document spreadsheet](doc:excel-reference#multi-document-spreadsheet).\n  611  \n  612          For a list of document file types that Sensible can extract data from, see [Supported file types](doc:file-types).\n  ...\n  620          '200':\n  621            description: |\n  622:             Indicates the extraction successfully converted to an Excel file. This response contains the download URL for the Excel file. The link\n  623              expires after 15 minutes.\n  624            content:\n  ...\n  662          '200':\n  663            description: |\n  664:             Indicates the extraction successfully converted to an CSV file. This response contains the download URL for the CSV file. The link\n  665              expires after 15 minutes.\n  666            content:\n  ...\n 1670      DocumentTypeNames:\n 1671        type: array\n 1672:       description: Specifies the document types contained in the PDF portfolio.\n 1673        items:\n 1674          type: string\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\best-practices\\0200 - troubleshoot-llms.md:\n   42  ### Specify source context\n   43  \n   44: Sometimes, an LLM fails to locate the relevant portion of the document that contains the answers to your prompts. To troubleshoot locating [context](doc:prompt#notes) in the document:\n   45  \n   46  - For the Query Group method, add more prompts to the group that target information in the context, even if you don't care about the answer. For the List and NLP Table methods, add prompts to extract each item in the list or column in the table, respectively. \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\best-practices\\0310 - metrics.md:\n   13  ---\n   14  \n   15: Extraction coverage measures how fully an extraction captures your target data from the document. For example, a coverage score of 70% for an extraction with no validation errors means that 30% of output fields are null. A low percentage can indicate a poor-quality extraction. Or, it can indicate that your documents contain sparse data. For example, if you define many target fields to extract from a supplemental insurance form, but applicants leave most of the questions blank, then the form's expected average extraction coverage is much less than 100%.\n   16  \n   17  Since coverage success criteria can vary by document type, you can set your own ranges for each document type in the Sensible app. To set ranges for coverage for past extractions, click **Dashboard** and scroll to the **Extraction coverage** section. In the section, you can filter by:\n   ..\n   27  In the preceding screenshot, 0 out of 16 extractions that used the `wells_fargo_savings` configuration in the `bank_statements` document type in the past 7 days scored in the coverage range of 60% -100%.\n   28  \n   29: <skipped 33 characters> ...iteria, examine your past extractions. For example, if home inspectors typically report about 60 out of your 100 target data points, you can set a range of 60%-100% for your `home_inspection_report` document type to assess extraction success. In contrast, if you find that drivers licenses typically contain all your target data points, you can set a range of 95%-100% or even 100%-100% to assess extraction success for the `drivers_license` document type.\n   30  \n   31  To view an individual extraction's coverage score, click **Dashboard** and scroll to the **Recent** section:\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\best-practices\\3000 - confidence.md:\n   19  | confidence signal                        | JSON output                 | description                                                  | troubleshooting                                              |\n   20  | ---------------------------------------- | --------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n   21: | Multiple possible answers                | `multiple_possible_answers` | The LLM answers the prompt, but identifies multiple possible answers in the context that Sensible provides to the LLM. | -  To return multiple answers, use the [List method](doc:list-tips).<br/>- To return a single answer, ensure the context contains a single answer. For more information, see [Advanced prompt configuration](doc:prompt). |\n   22: | Answer might not fully answer the prompt | `answer_may_be_incomplete`  | The LLM answers the prompt, but is uncertain whether the context that Sensible provides to the LLM contains the full answer. | - Simplify your prompt, for example, break it up into multiple prompts.<br/>- See [Advanced prompt configuration](doc:prompt). |\n   23  | Answer not found in the context          | `answer_not_found`          | The LLM fails to answer the prompt, and can't find an answer to your prompt in the context that Sensible provides to the LLM. | See [Advanced prompt configuration](doc:prompt).             |\n   24  | Ambiguous query                          | `ambiguous_query`           | The LLM either answers or fails to answer your prompt, and identifies ambiguities in your prompt. | - Rephrase your prompt using the tips for each Instruct method. For example, see [Query Group](doc:query-group-tips) tips.<br/>-  See [Advanced prompt configuration](doc:prompt). |\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\best-practices\\5000 - guides\\1000 - performance.md:\n   48  \n   49  \n   50: By default, Sensible runs all the configs in a document type before choosing the best one for a given document. If your document type contains configs with computationally expensive methods, you can improve performance by selectively running and skipping configs.  Use fingerprints to test whether documents contain matching text before skipping or running configs. For more information, see [fingerprint](doc:fingerprint).\n   51  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\best-practices\\5000 - guides\\2500 - handwriting.md:\n    4  ---\n    5  \n    6: This topic contains tips and tricks for extracting handwriting and OCR'd text, for example from scanned documents or images:\n    7  \n    8  OCR tips\n    .\n   25    \n   26  \n   27: - **Defining regions:** Handwriting can occupy an unpredictable region or even overlap other lines. To capture handwriting, Sensible recommends defining a [region](doc:region) with a small height and long width that runs through the middle of the area that can contain the handwriting. The green boxes in the following image show this approach: \n   28  \n   29    ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/handwriting_1.png) \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\document-type-classification\\1000 - classify.md:\n   16  - Outside an extraction workflow. For example, determine where to route each document or to label each document in a system of record.\n   17  \n   18: To improve classification results, Sensible recommends that a document type includes a sample set of reference documents that represent the diversity you expect to see in the document type. To use a document type for classification, Sensible requires that the type contains at least one reference document.\n   19  \n   20  To classify documents, use the Sensible API or SDKs.\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\email.md:\n   16  1. Create a document type (link to instructions) for the emails you want to extract from.\n   17  2. In the document type, create a dedicated email address for receiving the emails to extract from, i.e.,  `UUID@forwarding.sensible.so`.\n   18: 3. Use filtering rules in your email provider to filter the emails you want to extract from that match the document type you created.    For example, filter emails from a certain domain or those containing specific keywords or specific attachment types.\n   19  4. Set up automatic forwarding with your email service provider to send your filtered emails to Sensible.\n   20  \n   ..\n   24  \n   25  - Classification score slider (ex. if the highest score returned is <x, don’t extract the document)\n   26: - File name (ex. only extract files that contain “1040” in the title)\n   27  - File types (ex. only extract PDFs)\n   28  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\2000 - zapier\\1000 - zapier-getting-started.md:\n   14  To configure Zapier, you'll use a recent example of a document extraction. Follow the steps in [Getting started with out-of-the-box extractions](doc:library-quickstart) to create a JSON extraction from an example 1040 tax form. \n   15  \n   16: **Note** Ensure your example extraction contains non-null values for all fields you intend to configure in Zapier.\n   17  \n   18  Create an empty destination database\n   ..\n   26  ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/zapier_7.png)\n   27  \n   28: The base contains a field (displayed as a column), for each piece of document data to extract.  Zapier adds a record (displayed as a row), for each new document you extract from.\n   29  \n   30  3. (Optional) examine the [example extraction](https://app.sensible.so/quick-extraction/) you created in the previous section. To add more data from the extraction, create corresponding Airtable fields. For example, create a `Total taxes owed` field.\n   ..\n   97  \n   98  - You can configure single-value field output with the Sensible-Zapier integration. For multi-value output such as tables and sections, you can compile document extractions into a spreadsheet or CSV file using Sensible's API or SDKs. For more information, see [SenseML to Excel reference](doc:excel-reference).\n   99: - You can extract from single-document files with Zapier. If you want to extract from portfolio files (files that contain multiple documents, for example, insurance application bundles), use the Sensible API or SDKs. \n  100  \n  101  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\2000 - zapier\\2000 - zapier-tutorial-2.md:\n  101  \n  102  - You can configure single-value field output with the Sensible-Zapier integration. For multi-value output such as tables and sections, you can compile document extractions into a spreadsheet or CSV file using Sensible's API. For more information, see [SenseML to Excel reference](doc:excel-reference).\n  103: - You can extract from single-document files with Zapier. If you want to extract from portfolio files (documents that contain multiple documents, for example, insurance application bundles), use the Sensible app, API, or SDK. \n  104  \n  105  **Sensible action limitations**\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\4000 - quick-extraction\\7600 - excel-reference.md:\n  112  **Example document**\n  113  \n  114: The preceding spreadsheet contains data from the following example document:\n  115  \n  116  | Example document | [Download link](https://github.com/sensible-hq/sensible-docs/raw/main/readme-sync/assets/v0/pdfs/auto_insurance_anyco.pdf) |\n  ...\n  179  **Example document**\n  180  \n  181: The preceding spreadsheet contains data from the following example document: \n  182  \n  183  | Example document | [Download link](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/pdfs/table_dynamic.pdf) |\n  ...\n  247  ====\n  248  \n  249: Each  `<field_id>.<index>` sheet lists the output of a single field that contains complex repeating data, for example,  [Sections](doc:sections) output.\n  250  \n  251  Example\n  ...\n  268  **Example document**\n  269  \n  270: The preceding spreadsheet contains data from the following example document: \n  271  \n  272  | Example document | [Download link](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/pdfs/vertical_section_table_in_table.pdf) |\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\4000 - quick-extraction\\index.md:\n   23  3. In the **Document type** dropdown in the right pane, select the category that describes your document, for example, `resumes` or `tax_forms`. For portfolios, select multiple types.\n   24  \n   25:    If you haven't created your own document type, select `sensible_instruct_basics / Auto select` . The `sensible_instruct_basics` document type contains interactive examples for bank statements, resumes, and contracts.  If you specify `Auto select`,  Sensible automatically detects the best-fitting extraction configuration, or \"config\", for the document you upload.\n   26  \n   27  ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/quickstart_instruct_11.png)\n   ..\n   40  ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/quickstart_instruct_12.png)\n   41  \n   42:  The following spreadsheet shows output for the example bank statement. The first tab contains fields with single values, for example the start date field. Succeeding tabs contain fields with table output, for example, the accounts list table. \n   43  \n   44  [block:html]\n   ..\n   48  [/block]\n   49  \n   50: **Note** Each downloaded Excel file contains the data from one document. To combine extracted documents into one Excel file, use the [Sensible API](https://docs.sensible.so/reference/get-excel-extraction) or [Sensible SDKs](doc:sdk-guides).\n   51  \n   52  ## Extract from multiple files\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\layout-based-extractions\\1000 - getting-started.md:\n  382  But wait! Why didn't `\"tiebreaker\": \"second\"` select $250 instead of $150, since $250 is the second line after the anchor (the first line is `............`)? \n  383  \n  384: The reason is that `\"tiebreaker\": \"second\"` evaluates *after* the data type specified in the field, `\"type\": \"currency\"`. Instead of looking for the second line after the anchor in general, Sensible looks for the second line *that contains a currency*.  Convenient, right?\n  385  \n  386  Key concept: visualize anchors and matches\n  ...\n  482  **Alternative 1: Document Range method**\n  483  \n  484: You can use the [Document Range](doc:document-range) method to extract the policy period. This method extracts succeeding lines of text after an anchor. You need to configure some optional parameters, because the Document Range method by default discards anchor lines. Since the date range is part of the anchor line (the line containing `\"policy period\"`), you need to specify to:\n  485  \n  486  - include the anchor with `\"includeAnchor\": true`\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\layout-based-extractions\\3000 - portfolio.md:\n    4  ---\n    5  \n    6: Sometimes a single file contains multiple documents (a \"portfolio\"). For example, a portfolio file can contain an invoice, a tax document, and a contract. \n    7  \n    8  Sensible recommends extracting each document in a portfolio using its own document type, so you can write [validations](doc:validate-extractions)  for each type. For example, use an \"income tax\" doc type and an \"invoice\" doc type, rather than creating a \"combined_tax_and_invoice\" doc type.\n    .\n   25  ===\n   26  \n   27: The following example shows extracting three one-page documents from a portfolio. The portfolio contains two car insurance quotes and one loss run.\n   28  \n   29  Config\n   ..\n  116  ```\n  117  \n  118: The response contains extractions from three documents:\n  119  \n  120  ```\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\llm-based extractions\\3000 - prompt.md:\n   47  | :---------------------------------- | :----------------------------------------------------------- | ------------------------------------------------------------ | ---------------------------------------------------- |\n   48  | confidenceSignals                   | boolean.<br/>defaults: true in  Sensible Instruct editor,<br/> false in SenseML editor | If specified, Sensible prompts the LLM to report any uncertainties it has about the accuracy of its response.  For more information, see [Qualifying LLM accuracy](doc:confidence).<br/>Applies to each supported method in the config. Sensible currently supports this parameter for the [Query Group](doc:query-group) method. | Overrides config-level parameter for a single field. |\n   49: <skipped 97 characters> ...document.` | Configures context's metadata. For details about context and chunks, see the Notes section.<br/>Overwrites the default context description.<br/>Applies to each Sensible Instruct field in the config.<br/>For example:<br/>\\- `The below context is an excerpt from a scanned index card that contains botanical information about a single plant species, including phenology information.`<br/>\\- `The below context is an excerpt from an email. Assume the sender is always an automated system from an insurance broker.` | Overrides config-level parameter for a single field. |\n   50  | pageHinting                         | boolean. default: true                                       | Configures context's metadata. For details about context and chunks, see the Notes section. <br/>Includes or or removes page metadata for each chunk from the full prompt Sensible inputs to an LLM.<... <skipped 486 characters> ...t of the first page of the document\"<br/> - \"What is the medical paid value on the last claim of the second page?\"<br/>**Location relative to content in document**<br/>- \"total amount in the expense table\" <br/>- \"phone number after section 2\" | Overrides config-level parameter for a single field. |\n   51  | chunkCount                          | number. default: see each method's [reference topic](doc:llm-based-methods) | For more information about the Page HintingConfigures context's size. For details about context and chunks, see the Notes section.<br/>The number of top-scoring chunks Sensible combi... <skipped 114 characters> ...e config.<br/>Often, chunk count and chunk size are related. For example, if you know that your target data are spread over 7-10 pages, and occupy a small portion of those pages, you can specify a chunk count of 10 and a half-page  chunk size. | Overrides config-level parameter for a single field. |\n   52: <skipped 210 characters> ...br/>The size of the chunks Sensible splits the document into, as a page fraction. For example, `0.5` specifies each chunk is half a page.<br/>Applies to each Sensible Instruct field in the config. <br/>Often, chunk count and chunk size are related. For example, if you know that the data you seek is contained in one cover page, you can set chunk size to 1 and a chunk count to 1. | Overrides config-level parameter for a single field. |\n   53  | chunkOverlapPercentage              | `0`, `0.25`, `0.5` default: see each method's [reference topic](doc:llm-based-methods) | Configures context's size. For details about context and chunks, see the Notes section.<br/>The extent to which chunks overlap, as a percentage of the chunks' height. For ... <skipped 118 characters> ...onfig. <br/>Sensible recommends setting a non-zero overlap to avoid splitting data across chunks. Set overlap to 0 solely if you're confident that your document layout doesn't flow across page boundaries and you're using a one-page chunk size. | Overrides config-level parameter for a single field. |\n   54: <skipped 146 characters> ...ent. For details about context and chunks, see the Notes section.<br/>If specified, Sensible creates chunks in the page range and ignores other pages. For example, use this parameter to improve performance, or to avoid extracting unwanted data if your prompt has multiple candidate answers.<br/><br/>Contains the following parameters: <br/>`startPage`:  Zero-based index of the page at which Sensible starts creating chunks (inclusive). <br/>`endPage`: Zero-based index of the page at which Sensible stops creating chunks (exclusive).<br/><br/>**Note:** Sensible ignores this parameter when searching for a ... <skipped 199 characters> ...\n   55  | (**Deprecated**) promptIntroduction | string                                                       | Deprecated. Overwrites the introductory text at the beginning of the full prompt that Sensible submits to the LLM. |                                                      |\n   56  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\llm-based extractions\\instruct\\1000 - query-group-tips.md:\n    5  ---\n    6  \n    7: This Sensible Instruct method extracts individual facts in a document, such as the date of an invoice, the liability limit of an insurance policy, or the destination address of a shipping container delivery. When you configure the Multimodal Engine parameter, this method can extra data from non-text images, such as photographs, charts, or illustrations. For an example, see [Example: Extract from images](doc:query-group#example-extract-from-images)\n    8  \n    9  Sensible recommends grouping queries together if they share [context](doc:query-group#notes).  Queries share context when data exists in the same location or region of a document, for example, on the same page. You can configure context using [Advanced prompt configuration](doc:prompt). \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\1000 - senseml-reference-introduction.md:\n   37  ```json\n   38  {\n   39:   \"fingerprint\": { // preferentially run this config if doc contains the test strings\n   40      \"tests\": [\n   41        \"anyco\",\n   ..\n  138  - The **preprocessor**, `pageRange`, cuts out irrelevant pages of the document. For more information about using preprocessors to clean up documents before extracting data, see [Preprocessors](doc:preprocessors).\n  139  \n  140: - The **fingerprint** tells Sensible to preferentially run this config if the document contains the terms \"anyco\" or \"quoted coverage changes.\" For more information about using fingerprints to improve performance, and other configuration settings, see [Configuration Settings](doc:config-settings).\n  141  \n  142  - The **computed field** `\"driver_name_last\"` extracts the last name from the raw output of the `_driver_name_raw` field. For more information about transforming field output, see [Computed field methods](doc:computed-field-methods).  You can also capture the full name as typed output. See [types](doc:types).\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\2000 - field-query-object\\1100 - match.md:\n   35  | maximumHeight | number                  | The maximum height of the matched line's boundaries, in inches. |\n   36  | reverse       | boolean. default: false | Use in match arrays. Don't set this to true for the first match in the array, except in the External Range parameter for [sections](doc:sections).<br/>  If true, searches for a match in lines that precede the previous match in the array. For example, in an array with matches A and B, if B is a First match with `\"reverse\":true`, then Sensible matches the first line that *precedes* the line matched by A. For an example, see [Match arrays](doc:match-arrays#reverse-match). |\n   37: | xRangeFilter  | object                  | Defines a left-to-right range, or \"column\", in which to search for a match. This option excludes lines that partially fall outside the column.  Contains the following parameters:<br/>`minX` Specifies the left boundary of the range, in inches from the left edge of the page.<br/>`maxX` Specifies the right boundary of the range, in inches from the left edge of the page. |\n   38  \n   39  *These parameters aren't available as top-level parameters for a Boolean match.\n   ..\n  195  ---\n  196  \n  197: Use Boolean matches to write Boolean logic about your matches.  For example, use the Any match to match on an array of synonymous terms if a document contains small wording variations across revisions.\n  198  \n  199  **Parameters**\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\2000 - field-query-object\\1200 - method.md:\n   21  | tiebreaker                  | integer (zero-based index)<br/> or<br/>ordinal (`first`, `second`, `third`, `last`)<br/>or <br/> comparison (`>`, `<`)<br/>or<br/>`join`<br/> Default: `join` | If the method returns multiple elements (for example, a Row method), specifies which element to extract in t... <skipped 623 characters> ...ing Unicode values.<br/> If you want to compare numeric amounts and ignore non-numbers,  then add a numeric [type](doc:types) such as  `type: currency` as a top-level parameter to the field.<br/><br/>**join**: Returns all elements in the returned array as a single string, delimited by whitespaces. |\n   22  | lineFilters                 | Match object                                                 | Filters out the specified lines from the method match. For example, if the Box method extracts unwanted footer lines from a box, you can filter out the lines  with this parameter. |\n   23: | typeFilters                 | array of [Types](doc:types)                                  | Filters out the specified types from the method results. For example, for a target box containing a delivery date, a street address, and delivery notes, you can filter out the lines containing Date and Address types in order to extract the delivery notes. Note that less strict types, such as Name and Currency types, are less useful in this filter than stricter types such as the Phone Number type.<br/>For an example, see the Examples section. |\n   24  | wordFilters                 | string array                                                 | Filters out the specified strings from the method results.   |\n   25  | whitespaceFilter            | `spaces`, `all`                                              | Remove extra whitespaces.<br/> `spaces` - remove solely extra spaces.<br/> `all` - remove all whitespace characters, including newlines. |\n   26: <skipped 110 characters> ...d right boundaries in which to capture lines. For example, in combination with the Document Range method, the X Range Filter parameter defines a \"column\" that's bounded at the top and bottom by text matches.  This column excludes any lines that partially fall outside the defined rectangular region. Contains the following parameters: <br/>`start` - `right`,`left`  - Defines the starting point of the \"column\" at either the right or left boundary of the anchor line.<br/> `offsetX` - Adjusts the horizontal position of the starting point defined by the Start parameter. <br/> `width` - The width of the pag... <skipped 85 characters> ...\n   27  | **(Deprecated)** xMajorSort | boolean                                                      | **Deprecated:** Use the Sort Lines parameter instead.        |\n   28  | sortLines                   | `readingOrderLeftToRight`                                    | Set this parameter to `readingOrderLeftToRight` to sort lines whose height and vertical position are misaligned. For example, with misaligned handwritten text, slight jitter in the vertical positions of lines can cause Sensible to incorrectly sort lines that a human reader interprets as following left to right. The Sort Lines parameter corrects this problem by sorting lines by their likely reading order. |\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\2000 - field-query-object\\index.md:\n   88  ===\n   89  \n   90: The Field object contains:\n   91  \n   92  - [Anchor object](doc:anchor)\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\2000 - methods\\1000 - box.md:\n   21  | offsetX           | number in inches default: 0                                  | Searches for a box starting at a point offset from the point defined by the Position parameter. Positive values offset to the right, negative values offset to the left. For an example of how to use this parameter, see the following [Examples section](doc:box#examples). |\n   22  | offsetY           | number in inches default: 0                                  | Searches for a box starting at a point offset from the point defined by the Position parameter. Positive values offset down the page, negative values offset up the page.  For an example of how to use this parameter, see the following [Examples section](doc:box#examples). |\n   23: | offsetBoxes       | object. default: `none`                                      | Recognize a box offset from the point defined in the Position parameter by a number of contiguous boxes that share borders. For example, use this parameter for tables or grids where borders surround every cell. Contains the following parameters:<br/>\\- `direction`: The direction to search in (`above, below, right, left`, relative to the starting box.<br/>\\- `number`: The number of boxes to offset by.<br/>For an example of how to use this parameter, see the following [Examples section](doc:box#examples). |\n   24  | darknessThreshold | number between 0 and 1. default: 0.9                         | The brightness threshold below which to consider a pixel a box boundary. White is 1.0. Configure this parameter for checkboxes with dark backgrounds relative to the surrounding background.<br/>If the document has a ... <skipped 36 characters> ...is 0.9.<br/>If the document has dark or mottled background, for example as the result of a scan, then Sensible automatically chooses a default value based on the amount of contrast in the document. For an example of how to use this parameter, see the following [Examples section](doc:box#examples). |\n   25  | includeAnchor     | `true`, `false`. default: false                              | If true, includes anchors lines that are inside the box borders in the method output. Ignores anchor lines that are outside box borders. |\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\2000 - methods\\1100 - checkbox.md:\n    7  Sensible uses one of two data sources, pixels or metadata, to extract selection status:\n    8  \n    9: - If the document is a PDF that contains checkbox metadata, then Sensible preferentially uses the metadata to extract selection status.  \n   10  \n   11: <skipped 91 characters> ...ognizes pixels as checkboxes if they have a light background and dark, continuous borders. The maximum checkbox size supported by default for pixel recognition is a square with sides 0.3 inches long. Sensible returns true if  there are more that 5% darkened pixels within the box, indicating that it contains a selection mark.  Sensible  returns false if the box is empty. \n   12  \n   13  [**Parameters**](doc:checkbox#parameters)\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\2000 - methods\\1200 - column.md:\n    5  Extracts all lines below the anchor line on the current page if:\n    6  \n    7: - The anchor line's left and right boundaries (\"x extent\") contain the target lines' x extent, or vice versa. \n    8  \n    9    Or:\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\2000 - methods\\1300 - document-range.md:\n    5  Extracts consecutive lines succeeding the anchor line, for example, paragraphs of legal text. For the full definition of \"succeeding\", see [Line sorting](doc:lines#line-sorting).\n    6  \n    7: Or, use this method to return the coordinates of regions containing images.\n    8  \n    9  [**Parameters**](doc:document-range#parameters)\n   ..\n   21  | stop              | [Match object](doc:match) or array of Match objects. default: `none` | Stops extraction at the top boundary of the matched line. The matched line isn't included in the method output. If unspecified, matches to the end of the document. |\n   22  | includeAnchor     | boolean. default: `false`                                    | Includes the anchor line in the method output.               |\n   23: | includeImages     | boolean. default: `false`                                    | Returns the zero-indexed page number and coordinates of regions containing images in the document range . **Notes**:<br/>  If you set  `true`,  also set`\"type\": \"images\"` in the `field` object (see Examples section for an example). <br/>Returns image region coordinates, not image bytes or text lines. To extract structured data from images, see the [Query Group](doc:que... <skipped 65 characters> ...\n   24: <skipped 30 characters> ...n inches.                                            | Specifies the number of inches to offset the start of the document range from the top boundary of the anchor line.<br/>Positive values offset down the page, negative values offset up the page.<br/>If the offset falls below all lines on the page containing the anchor, the offset starts at the top boundary of the first line on the next page that contains lines.<br/> For an example, see the Examples section. |\n   25: | stopOffsetY       | number in inches.                                            | Specifies the number of inches to offset the end of the document range from the top boundary of the stop line.<br/>Positive values offset down the page, negative values offset up the page.<br/>If the offset falls below all lines on the page containing the anchor, the offset starts at the top boundary of the first line on the next page that contains lines. |\n   26  \n   27  Examples\n   ..\n  264  To extract images, set `\"includeImages\":true` for the Document Range method. Sensible returns the image region coordinates rather than the actual encoded bytes of images. If you want to extract the images themselves, you can use a PDF library in your chosen programming language to follow these general steps:\n  265  \n  266: - Render the page containing the image to a bitmap. Page numbers are zero-indexed in the Sensible output.\n  267  - Convert Sensible's coordinates for the image region to pixel per inch (PPI) coordinates. Sensible's region coordinates follow these conventions:\n  268    - they're in reference to a 0.0 origin at the *top left* corner of the page (not the bottom left origin, as is for example the convention with the popular PDF.js library)\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\2000 - methods\\1450 - intersection.md:\n    7  ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/intersection_1.png)\n    8  \n    9: For example, the Intersection method is an alternative to the Row method when a table contains optionally empty cells.  A row's tiebreaker can return lines from unintended columns if cells are unpredictably populated.\n   10  \n   11  [**Parameters**](doc:intersection#parameters)\n   ..\n   24  | offsetX                       | number in inches. default: 0 | Offsets the vertical line that bisects the vertical anchor.  Positive values offset to the right, negative values offset to the left. |\n   25  | offsetY                       | number in inches. default: 0 | Offsets the horizontal line that bisects the anchor. Positive values offset down the page, negative values offset up the page. |\n   26: | height                        | number in inches. default: 0 | Specifies to create a rectangular region centered at the intersection point. Sensible extracts lines contained in the region. For the full definition of \"contained,\" see the [Region](doc:region) method. <br/>If you don't specify this parameter, Sensible extracts lines that overlap to any extent with the intersection point. |\n   27: | width                         | number in inches. default: 0 | Specifies to create a rectangular region centered at the intersection point. Sensible extracts lines contained in the region. For the full definition of \"contained,\" see the [Region](doc:region) method. <br/>If you don't specify this parameter, Sensible extracts lines that overlap to any extent with the intersection point. |\n   28: | percentOverlapX               | number. default: 0.9         | If you use the Width or Height parameters to extra data from a region, then you can configure the criteria by which a region \"contains\" a line using this parameter.<br/> use this parameter to configure the strictness of the criteria for a region to 'contain' a line. Configures the percent in the preceding condition 1. For example, if you set this to 0.5, then for condition 1, the region and the line's boundary box must overlap for at least 50% of the smaller of the two's width. |\n   29  |                               |                              |                                                              |\n   30  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\2000 - methods\\1650 - nearest-checkbox.md:\n    9  Sensible uses one of two data sources, pixels or metadata, to extract selection status:\n   10  \n   11: - If the document is a PDF that contains checkbox metadata, then Sensible preferentially uses the metadata to extract selection status.  \n   12  \n   13  - If there's no metadata, Sensible falls back to Azure Form Recognizer’s checkbox detection. This detection uses OCR and machine learning and captures a wide range of checkbox formats.\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\2000 - methods\\1660 - paragraph.md:\n   80    \"lead_warning_spans_pages\": {\n   81      \"type\": \"string\",\n   82:     \"value\": \"LEAD WARNING STATEMENT: Housing built before 1978 may contain lead-based paint. Lead from paint, paint chips, and dust can pose health hazards if not managed properly. Lead exposure is especially harmful to young children and pregnant women. Before renting a home built before 1978, landlords must disclose the presence of any known lead- based paint and/or lea... <skipped 125 characters> ...\n   83    }\n   84  }\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\2000 - methods\\1900 - region.md:\n    5  ---\n    6  \n    7: Extracts data in a rectangular region, defined in inches. The region extracts lines contained inside the region (for the definition of \"contained\", see the Parameters section). \n    8  \n    9  In general, use this method:\n   ..\n   23  | id                     | value                             | description                                                  |\n   24  | ---------------------- | --------------------------------- | ------------------------------------------------------------ |\n   25: | id (**required**)      | `region`                          | Extracts lines contained in the region, where \"contained\" means:<br/>  - condition 1: the region and the line's boundary box overlap by more than 90% of either the region *or* the line's width (\"x extent\").<br/> AND<br/> - condition 2: the region and the line's boundary box overlap by more than 80% of either the region *or* the line's height (\"y extent... <skipped 379 characters> ...\n   26  | start (**required**)   | `above`, `below`, `left`, `right` | Defines the starting point for the extraction region relative to the anchor. For example,  `right`  specifies starting at the midpoint of the anchor line's right boundary, and `below` specifies starting at the midpoint of the anchor line's bottom boundary. |\n   27  | offsetX (**required**) | number                            | The horizontal offset in inches from the point defined in the Start parameter to the top left corner of the region. Positive values offset to the right, negative values offset to the left.<br/>You can visually determine this number in the Sensible app by changing the number and watching the green region box resize, or by clicking a point in the document in the Sensible app, then dragging to display inch dimensions. |\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\2000 - methods\\2000 - row.md:\n   32  \n   33  1. The first field has an anchor with two matches to avoid duplicate text in the second table. First the anchor matches the text `most popular on github`, then it anchors on the text  `first`  in a row. The method then extracts the top-ranked GitHub language name to the left of the anchor match. \n   34: 2. The second field also has an anchor with two matches. It anchors on the row containing `Python`, then extracts the second percentage in the row to the right of the anchor.\n   35  \n   36  **Config**\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\2000 - methods\\2200 - text-table.md:\n   29  | stop                      | Match object, array of Match objects, or number (inches) | (**Recommended**) Line to match or number in inches to stop table recognition:.<br/>  - A Match object or array specifies to stop table recognition when Sensible matches text.<br/> - A number specifies the end o... <skipped 415 characters> ...ges, but where there's no text you can use match on with the Stop parameter.  This type of stop specifies to end the table at the end of the document or [section](doc:sections). For example, use this type of stop to recognize tables in sections, where each table extends to the end of each section. |\n   30  | startOnRow                | integer. default: 0                                      | Zero-indexed row number at which to start table extraction. For example, use this to exclude column headings from the output. As a stricter alternative, set the Is Required parameter on a column and set a type on the column (see example in Examples section). |\n   31: | detectMultipleLinesPerRow | boolean. default: false                                  | If true, Sensible detects table cells containing multiple lines, rather than the default of treating each line as a new row. In detail, Sensible detects that a cell contains multiple lines if the vertical gap between two lines is less than half the height of the second line.<br/>Set this to false if row gutters are narrow. For example, if vertical gaps between lines in the cells are the same height as row gutters, Sensible can incorrectly merge multiple rows into one. |\n   32  | columnsRelativeToAnchor   | boolean. Default: false                                  | If true, specifies that the column coordinates `minX` and `maxX` are relative to the left edge of the anchor line, rather than to the left edge of the page. For example, use this parameter to recognize [nested tables inside tables](doc:sections-example-nested-table). |\n   33  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\3000 - llm-based-methods\\1000 - list.md:\n  444  For an overview of how the List method works, see the following steps:\n  445  \n  446: 1. Sensible finds the chunks of the document that most likely contain your target data: \n  447  \n  448    - Sensible concatenates all your property descriptions with your overall list description. \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\3000 - llm-based-methods\\1000 - nlp-table.md:\n  324  \n  325  \n  326: 1. To optimize performance, Sensible makes a list of the pages that are most likely to contain your target table. To make the list:\n  327     - Sensible concatenates all your column descriptions with your overall table description. \n  328     - Sensible splits the document into equal-sized, overlapping chunks. \n  329     - Sensible scores your concatenated table descriptions against each chunk using the OpenAI Embeddings API.\n  330     - Sensible gets a list of page numbers from the top-scoring chunks.\n  331: 2. Sensible extracts all the tables on the pages most likely to contain your table, using an OCR provider. Sensible supports multi-page tables.\n  332  4. Sensible scores each table by how well it matches the descriptions you provide of the data you want to extract. To create the score:\n  333  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\3000 - llm-based-methods\\1500 - query-group.md:\n    5  ---\n    6  \n    7: Extracts individual facts in a document, such as the date of an invoice, the liability limit of an insurance policy, or the destination address of a shipping container delivery. When you configure the Multimodal Engine parameter, this method can extra data from non-text images, such as photographs, charts, or illustrations. \n    8  \n    9  Sensible uses a large language model (LLM)  to find data in paragraphs of free text, in images, or in more structured layouts, for example key/value pairs or tables. Create a query group to extract multiple facts that share a [context](doc:query-group#notes), or are co-located in the document.\n   ..\n   40  | :--------------------- | :--------------- | :----------------------------------------------------------- |\n   41  | id (**required**)      | `queryGroup`     |                                                              |\n   42: | queries                | array of objects | An array of query objects, where each extracts a single fact and outputs a single field. Each query contains the following parameters:<br/>`id` (**required**) - The ID for the extracted field. <br/>`description`  (**required**) - A free-text question about information in the document. For example, `\"what's the policy period?\"` or `\"what's the client's first and last name?\"`. For more information about ho... <skipped 121 characters> ...\n   43: <skipped 577 characters> ...pecified, Sensible uses this text to find top-scoring chunks. If unspecified, Sensible uses the prompt to score chunks.<br/>Sensible recommends that the snippet is specific to the target chunk, semantically similar to the chunk, and structurally similar to the chunk. <br/>For example,  if the chunk contains a street address formatted with newlines, then provide a snippet with an example street address that contains newlines, like `123 Main Street\\nLondon, England`. If the chunk contains a street address in a free-text paragraph, then provide an unformatted street address in the snippet. |\n   44: <skipped 275 characters> ...lines, and handwriting. For example, use this as an alternative to the [Signature](doc:signature) method, the [Nearest Checkbox](doc:nearest-checkbox) method, the [OCR engine](doc:ocr-engine), and line [preprocessors](doc:preprocessors).<br/><br/>This parameter sends an image of the document region containing the target data to a multimodal LLM (GPT-4 Vision Preview), so that you can ask questions about text and non-text images. This bypasses Sensible's [OCR](doc:ocr) and direct-text extraction processes for the region. Note that this option doesn't support confidence signals.<br/>This parameter has ... <skipped 937 characters> ...\n   45  | confidenceSignals      |                  | For information about this parameter, see [Advanced prompt configuration](doc:prompt). |\n   46  | contextDescription     |                  | For information about this parameter, see [Advanced prompt configuration](doc:prompt#parameters). |\n   ..\n  148  ### Example: Extract handwriting\n  149  \n  150: The following example shows using a multimodal LLM to extract from a scanned document containing handwriting. For an alternate approach to extracting from this document, see also the [Sort Lines](doc:method#sort-lines-example) example.\n  151  \n  152  **Config**\n  ...\n  406  - Sensible searches in the source document for a line that's a fuzzy match to the response.  For example, if the LLM returns `4387-09-22-33`, Sensible matches the line `Policy Number: 4387-09-22-33` in the document. Sensible implements fuzzy matching using [Levenshtien distance](https://en.wikipedia.org/wiki/Levenshtein_distance).\n  407  \n  408: - Sensible selects the three lines in the document that contain the best fuzzy matches. For each line, Sensible concatenates the preceding and succeeding lines, in case the match spans multiple lines.\n  409  - Sensible searches for a fuzzy match in the concatenated lines for the text that the LLM returned.  Sensible returns the best match.\n  410  - Sensible highlights the best match in the document in the Sensible Instruct editor or in the SenseML editor.\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\3000 - llm-based-methods\\1600 - summarizer.md:\n   19  | fields (**required**)    | string array | IDs of the fields  you want to extract. These IDs have an impact on the free-text extraction, so choose names that have a meaningful relationship to the target data to extract. For example, for a dollar amount of rent to extract,  `rent`, `rents`, and `rent_in_dollars` are good naming choices. |\n   20  | instructions             | string       | Prompt for the LLM, describing how to transform information from the text in the Source ID parameter.<br/>For more information about how to write prompts, see [Query Group](doc:query-group-tips) tips.<br/>For an example of using this parameter, see the Examples section. |\n   21: | samples                  | object array | Short snippets of text similar to the text in the Source ID parameter, with examples of the information to extract. <br/>Use in addition to the Instructions parameter to increase the LLM's accuracy. <br/>Contains these parameters:<br/>`prompt` (string): An example of the sort of free text that you want to transform<br/>`values` (string array):  The target information to transform from this prompt. This array is a parallel array to the Fields parameter's array. Parallel arrays are the same length and same s... <skipped 407 characters> ...\n   22  \n   23  Examples\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\5000 - preprocessors\\0900 - deskew.md:\n   18  | ------------------------- | ------ | ------------------------------------------------------------ |\n   19  | type (**required**)     | `deskew` |                                                    |\n   20: <skipped 370 characters> ...Choosing the best points can take some trial and error. <br/>Parameters:<br/>`match` - the text to match for the Fixed Point. Choose `\"type\": \"startsWith\"`  or `\"type\": \"endsWith\"` to avoid problems with lines oversplit by skew. See [Match object](doc:match) for more details.<br/>`targetPosition` - contains  `x` and  `y` parameters that define the coordinates of the Fixed Points in inches relative to the 0,0 origin at the top left corner of the page. For more information defining the positions, see the Examples section. |\n   21  | start | `left` , `right`. default: `left` | Specifies whether the Fixed Point is at the upper-*left* corner of the anchor line's boundaries, or the upper-*right* corner. <br/>With a Match parameter of `\"type\": \"startsWith\"`, use `left`.<br/>With a Match parameter of `\"type\": \"endsWith\"`, use `right`. |\n   22  \n   ..\n  140  | ------------------------------------------------------------ | ------------ | ------------------------------------------------------------ |\n  141  | translation, shear, or other [affine transformations](https://homepages.inf.ed.ac.uk/rbf/HIPR2/affine.htm) in addition to or instead of rotation and scale | Deskew       | Handles complex page transformations, requires advanced configuration. |\n  142: | rotation                                                     | Rotate Page  | If a document contains pages that are rotated but otherwise untransformed, in most cases you don't need a preprocessor. Sensible corrects rotation automatically. If it doesn't, configure the [Rotate Page](doc:rotate-page) preprocessor. |\n  143  | scale                                                        | Scale        | If pages are affected by scale but not by affine transformations, use the [Scale](doc:scale) preprocessor as an easier-to-configure and more robust alternative to the Deskew preprocessor. |\n  144  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\5000 - preprocessors\\1000 - ligature.md:\n   14  | type (**required**)     | `ligature` |                                                    |\n   15  | mappings (**required**) | object | An object mapping ligature strings (for example, `\"\\u0000\"`) to an array of possible ligature replacements (for example, `[\"ff\", \"ffi\", \"fi\", \"fl\"]`). Sensible uses a dictionary in the target language to choose replacements that lead to known words. Sensible supports American English (en-us). This approach is conservative and may leave some Unicode characters in proper names or other non-word data. |\n   16: | forceReplaceAll | false | If true, specifies to bypass the dictionary lookup and to replace each ligature with the first replacement listed in the mappings array. This is useful in situations where words containing ligatures are not in the supported dictionary. For example, they are in an unsupported language or are proper nouns. |\n   17  \n   18  Examples\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\5000 - preprocessors\\1070 - ocr-preprocessor.md:\n    6  When you [extract document data with Sensible](doc:getting-started-ai), Sensible automatically OCRs the document for you, except in advanced cases. This topic covers advanced cases.  For information about additional OCR options, see [OCR](doc:ocr).\n    7  \n    8: Use the OCR preprocessor to selectively OCR pages in a document. This preprocessor is useful when a document contains both embedded text and text images. Selectively OCRing the pages containing text images, rather than the entire document, improves extraction performance. Examples of text images include handwriting and scanned text.\n    9  \n   10  If the whole document is a scan or image file, you don't need to configure this preprocessor. In that case, Sensible OCRs the whole document by default.\n   ..\n   17  | type (**required**)                                          | `ocr`              |                                                              |\n   18  | match (**required** unless you specify Page Lines Limit parameter) | Match object       | The text relative to which you define the page number to OCR. For example, if you know that the page after the heading \"Policy Addendums\" is always a scanned image, then you specify: <br>      `\"type\": \"ocr\"`... <skipped 75 characters> ...If there are multiple text matches in the document, matches the first. To specify a second or later match, use a [Match array](doc:match-arrays).<br/> To OCR a single page offset from the first page of the document, rather than offset from matched text, specify `\"match\": { \"type\": \"first\" }`.<br/> |\n   19: | matchAll                                                     | boolean            | If true, OCRs all pages containing the line specified by the Match parameter. |\n   20: | pageLinesLimit                                               | integer            | Performs OCR on all pages containing the specified number of embedded text lines or fewer. Use this parameter to OCR pages for which no reliable text anchors exist. Sensible recommends specifying a small number relative to the typical number of page lines in the document type, since pages with a small number of embedded lines more likely contain text images. Sensible verifies the qualifying pages contain images before perform OCR, to avoid processing blank pages.<br/> If you specify this in combination with a Match parameter, Sensible OCR all pages that meets any of the match criteria or the number of page lines criteria. |\n   21  | pageOffset                                                   | number. default: 0 | The zero-indexed number of the page to OCR, counting from the page number of the text matched by the Match parameter. |\n   22  | engine                                                       |                    | See [OCR engine](doc:ocr-engine).                            |\n   ..\n   42      },\n   43      {\n   44:       /* OCR all pages containing text 'additional riders'  */\n   45        \"type\": \"ocr\",\n   46        \"match\": \"additional riders\",\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\5000 - preprocessors\\1300 - remove-footer.md:\n   27  ====\n   28  \n   29: The following example shows using automatic footer recognition. The example document contains:\n   30  \n   31  - A repeating footer with an incrementing page number. Sensible removes this.\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\5000 - preprocessors\\1400 - draft-remove-page.md:\n   15  | -------------------- | ------------------ | ------------------------------------------------------------ |\n   16  | type (**required**)  | string             | \"pageFilter\"                                                 |\n   17: | match (**required**) | Match object       | Sensible removes each pages that contain this match. **questions: what if there were a match array, where item 0 matches page 2 and item 1 matches page 3 -- would we remove page 3? or would you have to have everything in the array be on the same page, then use a pageOffset?  **  To remove a single page offset from the first page of the do... <skipped 88 characters> ...\n   18: | matchAll             | boolean            | If true, removes all pages containing the line specified by the Match parameter. |\n   19  | pageOffset           | number. default: 0 | The zero-indexed number of the page to remove, counting from the page number of the text matched by the Match parameter. |\n   20  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\5000 - preprocessors\\1420 - rotate-page.md:\n   15  | type (**required**) | `rotatePage`                                        |                                                              |\n   16  | match               | [Match object](doc:match) or array of Match objects | Sensible rotates the page to ensure that text that matches this parameter is horizontal.  Sensible rotates the page by multiples of 90 degrees. If the page is affected by translation, shear, or other [affine transformations](https://homepages.inf.ed.ac.uk/rbf/HIPR2/affine.htm), or if the page rotation isn't a multiple of 90 degrees, use the [Deskew](doc:deskew) preprocessor. |\n   17: | matchAll            | boolean                                             | If true, rotates all pages containing the line specified by the Match parameter. |\n   18  \n   19  Examples\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\5000 - preprocessors\\1450 - scale.md:\n   20  | ------------------- | ---------------- | ------------------------------------------------------------ |\n   21  | type (**required**) | `scale`          |                                                              |\n   22: | samples             | array of objects | Array of example objects containing font heights for text matches in 100% scaled documents. Sensible compares the actual size of each match against the examples, then take an average of the ratios and use that to rescale the whole document. Sensible recommends the following practices:<br>- Choose samples for which the font height ... <skipped 396 characters> ...\n   23: | perPage             | boolean          | If true, Sensible rescales each page individually against the Target Height parameter, taking the average of  all matches' heights on that page rather than in the whole document. For example, if a tax return contains multiple W-2 forms, but each W-2 can be scanned at an unpredictable scale, then you can set this parameter to true and match on text such as the `\"Wage and Tax\"` and the `W-2` titles in the W-2 form. |\n   24  \n   25  Examples\n   26  ====\n   27  \n   28: The following example shows using the Per Page parameter to scale an ID card that has a different size on each page, where the second page contains the target size to standardize on.\n   29  \n   30  **Config**\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\5000 - preprocessors\\index.md:\n   13  | **[Merge Lines](doc:merge-lines)**     | ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/merge_lines_oversplit_1.png) | Corrects oversplit lines.                                    |\n   14  | **[NLP](doc:nlp)**                     |                                                              | Advanced prompt configuration for each large language model (LLM)-based method in a config. |\n   15: | **[OCR](doc:ocr-preprocessor)**                     | ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/thumbnail_ocr.png) | Selectively OCRs pages in documents containing a mix of digitally generated text and text images (such as scanned text). If the whole PDF is a scan, you don't need to configure this preprocessor. |\n   16  | **[Page Range](doc:page-range)**       |                                                              | Ignores pages outside the start page and end page.           |\n   17  | **[Remove Header](doc:remove-header)** | ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/remove_header_1.png) | Removes repeating elements at the top of the page. Ignores header elements that overlap with the page's main body. |\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\6000 - computed-field-methods\\1500 - zip.md:\n   17  | :------------------------- | :--------------------------------------- | :----------------------------------------------------------- |\n   18  | id (**required**)          | `zip`                                    |                                                              |\n   19: <skipped 89 characters> ...owing: <br/><br/>- the IDs of the source fields to zip. Each source field must output an array.<br/><br/>- a single ID for a field that returns a table. Sensible returns an array of zipped row objects.<br/><br/>- the IDs of the section groups to zip together. Sensible returns a zipped section group containing all the fields from the source section groups. If there are identically named field IDs in the source section groups, Sensible falls back to outputting the IDs in the last section group listed in the `source_id` array.<br/><br/><br/>Zips operate with the following precedence for source IDs: <br/... <skipped 808 characters> ...\n   20  \n   21  Examples\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\6000 - computed-field-methods\\index.md:\n    5  Computed Field methods transform the output of one or more [Field objects](doc:field-query-object). Common use cases for computed fields include:\n    6  \n    7: - Clean up raw output:  If the output contains extra characters, strings, etc, you can often use a Computed Field method to strip out the unwanted data. Or, you can split or join data from different fields.\n    8  - Standardize output across configs:  If you extract inconsistently formatted data from different vendors or documents, for example \"6 month policy period\" versus \"six mo. policy duration\", you can map to a common format. Consistently formatted output helps your application to handle extractions with fewer checks for corner cases.\n    9  - Add metadata: If a document lacks information that you want to include in the extraction, you can add it. \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\6500 - sections\\1000 - sections-example-loss-run.md:\n    4  ---\n    5  \n    6: The following example shows extracting repeated fields from a section group containing a list of claims:\n    7  \n    8  - It captures Sept and Oct claims by specifying  sections that start with \"claim number\" and  section group range that starts with \"September\" and ends with \"November\".\n    .\n   45      }\n   46    ],\n   47:   /* define section group containing subset of document's claims */\n   48    \"sections\": [\n   49      {\n   ..\n   79          }\n   80        },\n   81:       /* return each claim as object containing claim # \n   82        and phone # fields */\n   83        \"fields\": [\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\6500 - sections\\7000 - sections-example-zip.md:\n   14  The following example shows zipping multiple tables together by treating each table as a section group and each row or column as a section.\n   15  \n   16: As an overview, this example shows creating a  `zipped_vehicle_description_and_coverages` array, where each  object in the array contains information from the vehicles table and from the limitations table in the following image:\n   17  \n   18  ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/vertical_sections_zip.png)\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\6500 - sections\\8000 - sections-example-copy-from-sections.md:\n   11  In this example, the config uses paired section groups nested in a parent section group to extract complete vehicle insurance declarations:\n   12  \n   13: 1. A parent section group's range contains the entire vehicle declaration.\n   14  \n   15  2. A child section group captures data such as the vehicle description and VIN.\n   ..\n  166              {\n  167                /* In each vertical section, the injury premium for each vehicle is always                  the 2nd cell to the right\n  168:                  of the cell containing \"bodily injury liability\",\n  169                   as configured by columnSelection */\n  170                \"id\": \"bodily_liability_premium\",\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\6500 - sections\\9000 - sections-example-copy-to-section.md:\n   55          }\n   56        },\n   57:       /* return each claim as object containing claim # \n   58        and phone # fields */\n   59        \"fields\": [\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\6500 - sections\\9500 - sections-example-external-range.md:\n   20  {\n   21    \"fields\": [],\n   22:   /* define section group containing document's claims */\n   23    \"sections\": [\n   24      {\n   25        \"id\": \"unprocessed_claims_sections\",\n   26:       /* each section contains unlabeled information.\n   27           the labels are at the beginning of the document (\"Claims contents\")\n   28           use the External Range parameter to make these labels\n   ..\n   66          }\n   67        },\n   68:       /* return each claim as object containing claim # \n   69        and phone # fields */\n   70        \"fields\": [\n   ..\n  241  {\n  242    \"fields\": [],\n  243:   /* define section group containing document's claims */\n  244    \"sections\": [\n  245      {\n  246        \"id\": \"claims_sections\",\n  247:       /* each section (in this case, a claim) contains unlabeled information, such as the claim #.\n  248           the labels are at the top of each page under a \"Claims contents\" heading\n  249           use the External Range parameter to make these labels\n  ...\n  293          },\n  294        },\n  295:       /* return each claim as object containing fields such as claim # and phone # */\n  296        \"fields\": [\n  297          {\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\6500 - sections\\index.md:\n    4  ---\n    5  \n    6: Extracts data from a document that contains complex or repeated elements (\"sections\").  In effect, a \"section\" defines a repeating document inside a document, with its own fields.\n    7  \n    8: The following image shows an example of a document containing a group of \"claims\" sections:\n    9  \n   10  ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/sections_1.png)\n   11  \n   12: For the preceding example, you can configure Sensible to return an `unprocessed_claims` array, where each object in the array contains a `claim_number`, `claim_date`, `claimant_last_name`, and other fields.  For more information, see [Claims loss run example](doc:sections-example-loss-run).\n   13  \n   14  \n   ..\n   38  | id (**required**)     | string                                                 | Specifies an ID for a group of sections to extract in the document area defined by the Range parameter. You can define an array of section groups, and you can nest sections inside of other sections. |\n   39  | range  (**required**) | object                                                 | Specifies the document area from which to extract a group of sections. The Range parameter specifies both:<br/>- a group of repeated sections in an area of the document <br/>- the start and end of each repeated sectio... <skipped 97 characters> ...or example, in the preceding image, an \"unprocessed_claims\" section group can span month headings.<br/><br/> **vertical sections:** The section group can span pages. By default, the group can't span text that breaks the column format.<br/>For the Range object's parameters, see the following table. |\n   40: | sections              |                                                        | Specifies sections inside sections. Use this for complex sections that contain nested repeated elements, for example, [a grid of tables](doc:sections-example-table-grid). Each nested section searches for its range inside the parent section's range. |\n   41  | display               | boolean. Default: true                                 | Specifies to display  the start and end of each section in a section group as brackets overlaid on the rendered document in the Sensible app. Use the brackets to visually troubleshoot sections. |\n   42  | requiredFields        | object                                                 | Array of field IDs that must be non-null for Sensible to return a section.<br/> In the [Claims loss run example](doc:sections-example-loss-run), add the following code to the sections group to omit claims that lack a phone number: <br/> `\"requiredFields\": [\"phone_number\"],`<br/>With the preceding code, Sensible omits claim number `9876543211`  from the example output. |\n   ..\n   51  | --------------------- | -------------------------------------------------- | ------------------------------------------------------------ |\n   52  | anchor (**required**) | [Anchor](anchor) object, or array of Match objects | Anchor parameters have a special meaning in the context of sections, as follows:<br/><br/> **start**: Ignores anything in the document before this line. if undefined, Sensible searches for the section group starting at th... <skipped 684 characters> ...cognizes columns as sections automatically. For more information, see [Section nuances](doc:section-nuances#vertical-sections).<br/><br/>**end**: Ignores any anchor matches in the document after this line. For example, to extract solely September claims in the preceding image, specify `\"October\"`. |\n   53: <skipped 221 characters> ... example, use the external range with the [Intersection](doc:intersection) method when sections lack internal anchoring candidates.<br/>The external range defines a vertical range anywhere in the document. You can configure the external range to be static, or to repeat relative to each section.<br/>Contains the following parameters:<br/><br/>`anchor`  (**required**):  An [Anchor](https://docs.sensible.so/docs/anchor) object. The external range starts at the top boundary of this starting line, and the range's scope includes text to the left of this line. If the start of the range lacks an easy-to-matc... <skipped 1536 characters> ...\n   54  | stop                  | [Anchor](anchor) object, or array of Match objects | **horizontal sections:**  Specifies the repeated end of the section after its anchor. For example, if you specify `\"Date of claim\"`, then each section stops at a horizontal line below the bottom boundary of the stop line ... <skipped 592 characters> ...span multiple columns. If not specified, Sensible ends the section group at the first line that spans multiple columns. If the spanning lines occur mid-column, you can also configure the Line Filters parameter.<br/>For more information, see [Section nuances](doc:section-nuances#vertical-sections). |\n   55  | requireStop           | Boolean. default: false                            | **horizontal sections:**  If true, the Stop parameter is required, and the section ends when it matches the Stop parameter, instead of the default behavior of ending at the next starting line specified in the anchor's Mat... <skipped 278 characters> ...e in the section. In such a case, Sensible ignores any zero-height sections generated by this horizontal line's matches. For more information, see [Multiple anchors in section](doc:section-nuances#multiple-anchors-in-section).<br/><br/>**vertical sections:** N/A, not allowed for vertical sections. |\n   ..\n   67  | direction       | `horizontal`, `vertical`. default: `horizontal`              | If set to `vertical`, Sensible searches for columns in a sections group. <br/>In detail, Sensible searches  left-to-right for columns in the first-found document area defined by the Range parameter, rather than the default behavior of continuing to search for matches for the Range parameter. For an illustration of this behavior, see [section nuances](doc:section-nuances). |\n   68  | columnSelection | array of index selections where each \"index selection\" can be:<br/>- a column index or comma-delimited indices<br><br>- an array with two comma-delimited indices, meaning all the columns in the indices range<br/><br/> default: capture all columns (`[]`) | Use to configure which c... <skipped 295 characters> ...lines from any other columns to each section. <br/>`[1,3,-1]`  selects 2nd, 4th, and the last columns. Use negative indices to offset from the last column. <br/> `[1,[3,7]]` selects the 2nd column and the 4th through 8th columns.<br/>  `[[0, -2]]` selects 1st through 2nd-to-last columns.<br/><br/> |\n   69: | ignoredColumns  | integer array.                                               | Removes unwanted columns from both the output *and* from the SenseML search scope. For example, this is useful if the columns contain text that interferes with anchoring on other columns. |\n   70: | minColumnGap    | number in inches. default: 0                                 | Configures column recognition by specifying the smallest allowed width of the gutters separating the columns. For an example, see [Table grid example](doc:sections-example-table-grid). Use when text in a column contains whitespace gaps such that Sensible can split one column into two. To avoid this split, set a minimum gap that's larger than the gaps inside the column. The default (0) means that zero-width vertical lines define the column boundaries. |\n   71  | lineFilters     | Match object, or array of Match objects                      | Use to ignore lines that span columns and break column recognition. For example, if the lines occur mid-column, use this parameter rather than a Stop parameter to exclude the lines. Sensible excludes the lines both from the output and from the SenseML search scope.<br/>You don't need to configure this parameter if you specify a Stop parameter. For more information, see [Section nuances](doc:section-nuances#vertical-sections). |\n   72  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\6700 - config-settings\\1000 - fingerprint.md:\n   14  | fingerprints for:                                            | notes                                                        |\n   15  | ------------------------------------------------------------ | ------------------------------------------------------------ |\n   16: | [standalone documents ](doc:fingerprint#standalone-documents) | Improve performance by testing for matching text in a document before running or skipping a config in a given document type. By skipping configs that fail a fingerprint, you can save processing time. This is relevant if a config contains computationally expensive operations like LLM-based methods, selective OCR, table recognition, or box recognition methods.<br/>To test for matching text at the field level instead of the document type level, specify field fallbacks. For more information, see [Field query object](doc:field-query-object). |\n   17: | [portfolios ](doc:fingerprint#portfolios)                    | A portfolio contains multiple documents combined into one file, such as an invoice, a contract, and a tax form. Sensible uses fingerprints to segment a portfolio into documents. Fingerprints test for matching text that characterizes first, last, or other pages for documents in the portfolio. For more information, see ... <skipped 45 characters> ...\n   18  \n   19  \n   ..\n   59  ---\n   60  \n   61: A fingerprint consists of an array of tests, where each test contains a Page parameter and a Match parameter:\n   62  \n   63  ```json\n   ..\n   96  | -------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n   97  | match (**required**) | a string, a [Match object](doc:match), or array of Match objects. | Specifies the text to match for the test.                    |\n   98: | offset               | integer                                                      | Specifies where to start or end the document segment, offset in pages relative to the first or last page defined by the Match parameter. For example, if you specify that the page that contains the phrase \"A summary of your rights\" is the first page of a segment, and Sensible finds a match for the first page on the zero-indexed page 3 of a portfolio:<br/>- specifying `\"offset\": -1` starts the document segment on page 2 of the portfolio.<br/>- specifying `\"offset\": 1` starts the document ... <skipped 37 characters> ...\n   99  | page                 | `first`, `last`, `every`, `any`                              | Configure with the following enums:<br/>`first` - The first page of a document segment must meet the match criteria.  <br/>`last` - The last page of a document segment must meet the match criteria. If you specify... <skipped 278 characters> ...t segment can meet the criteria. <br/>**Notes:** <br/>- For an example see [Multi-document extraction](doc:portfolio). <br/>- If you reuse the same config between portfolios and standalone documents, then for standalone document extractions, Sensible ignores the configured value of this parameter. |\n  100  \n  ...\n  103  Use the following tips when you define fingerprints for portfolios:\n  104  \n  105: - If the first page contains unique text, Sensible recommends specifying solely a `first` page test.\n  106  \n  107: - If the first page doesn't contain unique text and the last page does, Sensible recommends specifying a `last` page test and an `every` page test. \n  108  \n  109  - Avoid specifying an `any` page test unless other page types fail to segment the document.\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\6800 - document-type-settings\\1000 - fingerprint-mode.md:\n   10  ## Single-document file fingerprints\n   11  \n   12: | Strictness level | Description                                                  | If more than one config's tests pass over 50%                | If no configs' tests passes over 50% or if no configs contain a fingerprint |\n   13  | ---------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n   14: | standard         | If any of the configs in the document type contain a fingerprint, then Sensible runs extractions using any configs that pass over 50% of the fingerprint tests. | Sensible chooses the output from the passing config with the highest score | Sensible falls back to the default behavior of running extractions for the document using *all* configurations,... <skipped 50 characters> ...\n   15: | strict           | The doc type must have at least one config containing a fingerprint. | Sensible chooses the output from the passing config that has the highest score. | Sensible returns a 400 error.                                |\n   16  \n   17  In the preceding table, Sensible calculates a score as follows:\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\7000 - deprecated-features\\1500 - deprecated-invoice.md:\n    9  ## Description\n   10  \n   11: This method is identical to the [(Deprecated) Table method](doc:deprecated-table), and also returns detected invoice metadata. This method accepts one invoice per document file. If the document contains multiple tables, the Invoice method returns the data for the table that is the best invoice candidate.\n   12  \n   13  It's a best practice to create a single, flexible config that works for a variety of invoice formats. This is because invoices typically come from such a wide variety of vendors that it would be unmanageable to create a config for each vendor. Create a flexible config by using synonymous terms to identify invoice elements. For more information, see the [Examples section](doc:deprecated-invoice#examples). \n   ..\n   32  The following example shows using the Invoice method:\n   33  \n   34: - It extracts the invoice table from a document that contains multiple tables.\n   35  - It extracts other invoice metadata from header and footer information in the invoice.\n   36  - This example uses a large number of synonymous terms for each invoice column, so it can parse invoices from a variety of vendors. \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\7000 - deprecated-features\\1500 - deprecated-query.md:\n   11  ## Description\n   12  \n   13: This method extracts individual facts in a document, such as the date of an invoice, the liability limit of an insurance policy, or the destination address of a shipping container delivery. Sensible uses a large language model (LLM)  to find these facts in paragraphs of free text, or in more structured layouts, for example key/value pairs or tables.\n   14  \n   15  Sensible recommends framing each query, or prompt, so that it has a single, short answer.  For prompts with multi-part answers, use the [List method](doc:list). \n   ..\n   28  | id (**required**)                   | `query`      | The Anchor parameter is optional for fields that use this method. If you specify an anchor:<br/>- Sensible ignores the anchor if it's present in the document.<br/>- Sensible returns null for the field if the anchor isn't present in the document. |\n   29  | description(**required**)           | string       | A free-text question about information in the document. For example, `\"what's the policy period?\"` or `\"what's the client's first and last name?\"`.   |\n   30: <skipped 586 characters> ...pecified, Sensible uses this text to find top-scoring chunks. If unspecified, Sensible uses the prompt to score chunks.<br/>Sensible recommends that the snippet is specific to the target chunk, semantically similar to the chunk, and structurally similar to the chunk. <br/>For example,  if the chunk contains a street address formatted with newlines, then provide a snippet with an example street address that contains newlines, like `123 Main Street\\nLondon, England`. If the chunk contains a street address in a free-text paragraph, then provide an unformatted street address in the snippet.<br/>For an example, see Example 3.<br/> |\n   31  | (**Deprecated**) promptIntroduction | string.      | **(Deprecated)**  overwrites the introductory text at the beginning of the [full prompt](https://docs.sensible.so/docs/prompt) that Sensible submits to the LLM for this field. |\n   32  | confidenceSignals                   |              | For information about this parameter, see [Advanced prompt configuration](doc:prompt). |\n   ..\n  278  - Sensible searches in the source document for a line that's a fuzzy match to the response.  For example, if the LLM returns `4387-09-22-33`, Sensible matches the line `Policy Number: 4387-09-22-33` in the document. Sensible implements fuzzy matching using [Levenshtien distance](https://en.wikipedia.org/wiki/Levenshtein_distance).\n  279  \n  280: - Sensible selects the three lines in the document that contain the best fuzzy matches. For each line, Sensible concatenates the preceding and succeeding lines, in case the match spans multiple lines.\n  281  - Sensible searches for a fuzzy match in the concatenated lines for the text that the LLM returned.  Sensible returns the best match.\n  282  - Sensible highlights the best match in the document in the Sensible Instruct editor or in the SenseML editor.\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\7000 - deprecated-features\\2000 - deprecated-tfidf.md:\n   67  | id (**required**)        | `tfidf`      | TFIDF  (term frequency--inverse document frequency) is a technique that determines a category for the extracted text by matching it to a relevant Document parameter. |\n   68  | source_id (**required**) | field ID     | For every field you want to classify, create a TFIDF computed field and specify the field ID. If the source field outputs an array, then this method returns the classifications as a parallel array. |\n   69: | corpus                   | object array | Array of corpus objects. Each contains the following parameters:<br/>`id`: the category or classification you want applied to an element in the source ID array, if it scores highly against this corpus object. It's best practice to choose categories that are mutually exclusive. If the categories aren't mutually exclusive, then Sensible chooses a winning category using the greatest overlap of rare words between the source field and the document.<br/>`document` - example free text containing the key words against which you want to score the output of the source ID. This parameter has no character limit. |\n   70  \n   71  Examples\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\7500 - advanced-computed-field-methods\\0100 - add-computed-fields.md:\n   29  ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/add_computed_fields_3.png)\n   30  \n   31: This example uses the Add Computed Fields method to ensure that each table contains the same field IDs (`vin`, `policy_start`, `limits`, `amount`, and `model`):\n   32  \n   33  ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/add_computed_fields_2.png)\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\8000 - concepts\\3000 - lines.md:\n    6  \n    7  \n    8: A *line* is a rectangular region containing text. Sensible represents lines as gray boxes. Lines can occupy the same height on the page:\n    9  \n   10  ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/line_concept.png)\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\8000 - concepts\\3600 - section-nuances.md:\n   59  \n   60  1. Sensible detects four columns. Sensible targets two columns to create sections from: the Apple column and the Banana column.\n   61: 2. For the Apple column, Sensible creates a section that is a table slice containing:\n   62     - A  \"selected\" column: the Apple column\n   63     \n   64     - \"kept\" columns: the Nutrition and Notes columns. The lines in these columns are then available as anchoring or output data in this section.\n   65:      For example, you can extract the cell containing `95` in the Apple column with:\n   66  \n   67  \n   ..\n   79    ```\n   80  \n   81: 3. The Banana section contains the Banana, Nutrition, and Notes columns. For example, you can find the cell containing `105` in the Bananas column using the same `fruit_calories` field as in the preceding step. In other words, you *don't* have to configure `\"tiebreaker\": \"second\"`.  \n   82  \n   83  ![Click to enlarge](https://raw.githubusercontent.com/sensible-hq/sensible-docs/main/readme-sync/assets/v0/images/final/vertical_section_column_selection.png)\n   ..\n   90  ----\n   91  \n   92: See the following options for handling a section that contains multiple matches for the range's Match parameter.\n   93  \n   94  **Ignore multiple anchors**\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\8000 - concepts\\4500 - draft-senseml-order.md:\n   39  Take the raw text representation (from OCR or directly from the PDF), clean it, and put it in a standard format for Sensible to use.\n   40  \n   41: - Standardize the text to an array of pages, each containing an array of lines with bounding box data. Also capture transformation metadata (e.g., page rotation).\n   42  \n   43  - Apply non-configurable, global preprocessors (for example, clean up whitespaces, sort lines, merge and deduplicate lines).\n   ..\n   54  ----\n   55  \n   56: <skipped 97 characters> ...thout fingerprints, Sensible runs every configuration in the document type. With them, Sensible can test if an \"ACME_CO_INSURANCE\" config should run on an \"ACME_quote.pdf\" by examining the PDF's standardized text output for key text like \"ACME\" and \"insurance\" and filtering out documents that don't contain the key phrases. \n   57  \n   58  - Score each configuration against its configured fingerprint tests, if present.  \n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\welcome\\2000 - draft-getting-started-ai.md:\n  145  ## Publish the prompts and integrate\n  146  \n  147: To extract data from bank statements in bulk in production,  publish the \"config\" containing your prompt.\n  148  \n  149   Click **Publish configuration**, click **Production**, then click **Publish to production**:\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\welcome\\2000 - getting-started-ai.md:\n   86  ## Publish the prompt\n   87  \n   88: To extract checking account numbers from other bank statements in production,  publish the \"config\" containing your prompt.\n   89  \n   90   Click **Publish configuration**, click **Production**, then click **Publish to production**:\n   ..\n   94  ## Test the prompt\n   95  \n   96: Let's see if the config containing your prompt works with other bank statements. To test the prompt, take the following steps:\n   97  \n   98  1. Navigate to <https://app.sensible.so/editor/instruct/?d=sensible_instruct_basics&c=bank_statement&g=bank_statement_2>. Notice that the left pane now displays a statement for a different customer.\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js\\README.md:\n  153  | url               | string                                                     | The URL of the document you want to extract from. URL must:<br/>- respond to a GET request with the bytes of the document you want to extract data from <br/>- be either publicly accessible, or presigned with a security token as part of the URL path.<br/>To check if the URL meets these criteria, open the URL with a web browser. The browser must either render the document as a full-page view with no other data, or download the document, without prompting for authentication. |\n  154  | documentType      | string                                                     | Type of document to extract from. Create your custom type in the Sensible app (for example, `rate_confirmation`, `certificate_of_insurance`, or `home_inspection_report`), or use Sensible's library of out-of-the-box supported document types. |\n  155: | documentTypes     | array                                                      | Types of documents to extract from. Use this parameter to extract from multiple documents that are packaged into one file (a \"portfolio\").  This parameter specifies the document types contained in the portfolio. Sensible then segments the portfolio into documents using the specified document types (for example, 1099, w2, and bank_statement) and then runs extractions for each document. For more information, see [Multi-doc extraction](https://docs.sensible.so/docs/portfolio). |\n  156  | configurationName | string                                                     | Sensible uses the specified config to extract data from the document instead of automatically choosing the configuration.<br/>If unspecified, Sensible chooses the best-scoring extraction from the configs in the document type.<br/>Not applicable for portfolios. |\n  157  | documentName      | string                                                     | If you specify the file name of the document using this parameter, then Sensible returns the file name in the extraction response and populates the file name in the Sensible app's list of recent extractions. |\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-api-py\\README.md:\n  151  | url               | string                                                     | The URL of the document you want to extract from. URL must:<br/>- respond to a GET request with the bytes of the document you want to extract data from <br/>- be either publicly accessible, or presigned with a security token as part of the URL path.<br/>To check if the URL meets these criteria, open the URL with a web browser. The browser must either render the document as a full-page view with no other data, or download the document, without prompting for authentication. |\n  152  | document_type      | string                                                     | Type of document to extract from. Create your custom type in the Sensible app (for example, `rate_confirmation`, `certificate_of_insurance`, or `home_inspection_report`), or use Sensible's library of out-of-the-box supported document types. |\n  153: | document_types     | array                                                      | Types of documents to extract from. Use this parameter to extract from multiple documents that are packaged into one file (a \"portfolio\").  This parameter specifies the document types contained in the portfolio. Sensible then segments the portfolio into documents using the specified document types (for example, 1099, w2, and bank_statement) and then runs extractions for each document. For more information, see [Multi-doc extraction](https://docs.sensible.so/docs/portfolio). |\n  154  | configuration_name | string                                                     | Sensible uses the specified config to extract data from the document instead of automatically choosing the configuration.<br/>If unspecified, Sensible automatically chooses the best-scoring extraction from the configs in the document type.<br/>Not applicable for portfolios. |\n  155  | document_name      | string                                                     | If you specify the file name of the document using this parameter, then Sensible returns the file name in the extraction response and populates the file name in the Sensible app's list of recent extractions. |\n\n161 matches across 65 files\n\n\nSearching 166 files for \"llm_engine\"\n\n0 matches\n\nSearching 166 files for \"llmEngine\"\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\3000 - llm-based-methods\\1000 - list.md:\n   40  | properties (**required**)           | object                              | An array of objects with the following parameters: <br/> -`id` (**required**): A user-friendly ID for the data in the extraction output. <br/>  -`description` (**required**):  A prompt describing the list item that you want to extract. The prompt can include instructions to reformat or filter the data. For example, provide prompts like `\" transaction amount. return the absolute value\"` or `\"vehicle make (not model)\"`.  <br/> -`type`: The list item's type. For more information, see [types](doc:types). |\n   41  | (**Deprecated**) promptIntroduction | string.                             | **(Deprecated)**  overwrites the introductory text at the beginning of the [full prompt](https://docs.sensible.so/docs/prompt) that Sensible submits to the LLM for this field. |\n   42: | llmEngine                           | `fast`, `thorough`. default: `fast` | Specifies the LLM model to which Sensible submits the full prompt, and affects the number of chunks that Sensible submits to the LLM.<br/>If the Fast parameter results in incomplete extractions for multi-page lists, use Thorough as a... <skipped 415 characters> ...\n   43  | contextDescription                  |                                     | For information about this parameter, see [Advanced prompt configuration](doc:prompt#parameters) |\n   44  | pageHinting                         |                                     | For information about this parameter, see [Advanced prompt configuration](doc:prompt#parameters) |\n\nC:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\senseml-reference\\5000 - preprocessors\\1060 - nlp.md:\n   19  | type (**required**)    | `nlp`  |                                                              |\n   20  | nlpTable               | object | Parameters:<br/>- `rewriteTable`<br/>- `pageSpanThreshold`<br/>- `detectTableStructureOnly`<br/>-`annotateSuperscriptAndSubscript`<br/>- (**Deprecated**) `promptIntroduction`<br/>For information about these parameters, see [NLP Table](doc:nlp-table#parameters). |\n   21: | list                   | object | Parameters:<br/>- `llmEngine`<br/>- (**Deprecated**) `promptIntroduction`<br/>For information about these parameters, see [List](doc:list#parameters). |\n   22  | (**Deprecated**) query | object | For information about this deprecated parameter see [Query](doc:deprecated-query). |\n   23  | contextDescription     |        | For information about this parameter, see [Advanced prompt configuration](doc:prompt#parameters). |\n\n2 matches across 2 files\n",
			"settings":
			{
				"buffer_size": 125695,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAgAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAAIUBAABDYXJyaW5ndG9uLCBXYXRsZXIgYW5kIENhcmV5LCBTZcOhbiBQZXJzb25hbGx5IFNwZWFraW5nOiBXYWx0ZXIgQ2FycmluZ3RvbiBvbiB0aGUgRi5NLiBBbGV4YW5kZXIgVGVjaG5pcXVlLiBNb3VyaXR6LCAyMDAxCgoKU2VhbiBDYXJleSBpbnRlcnZpZXdzIFdhbHRlciBDYXJyaW5ndG9uIGluIGEgUSZBIGZvcm1hdCB0aGF04oCZcyBicm9hZGx5IGdyb3VwZWQgYnkgdGhlIHRhYmxlIG9mIGNvbnRlbnRzOiBPcmlnaW5zIChvcmlnaW5zIG9mIHRoZSBBVCksIENvbnRleHQgKHJlbGF0aW9uc2hpcHMgdG8gb3RoZXIgbW9kYWxpdGllcyBpbmNsdWRpbmcgcHN5Y2hvdGhlcmFweTsgaGlzdG9yeSwgYW5kIG1pc2MuKSBhbmQgdGVhY2hlciAoQ2FycmluZ3RvbuKAmXMgYXBwcm9hY2gpLiAgCg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAIABAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAeA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAgAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"cut",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAACFAQAAQ2FycmluZ3RvbiwgV2F0bGVyIGFuZCBDYXJleSwgU2XDoW4gUGVyc29uYWxseSBTcGVha2luZzogV2FsdGVyIENhcnJpbmd0b24gb24gdGhlIEYuTS4gQWxleGFuZGVyIFRlY2huaXF1ZS4gTW91cml0eiwgMjAwMQoKClNlYW4gQ2FyZXkgaW50ZXJ2aWV3cyBXYWx0ZXIgQ2FycmluZ3RvbiBpbiBhIFEmQSBmb3JtYXQgdGhhdOKAmXMgYnJvYWRseSBncm91cGVkIGJ5IHRoZSB0YWJsZSBvZiBjb250ZW50czogT3JpZ2lucyAob3JpZ2lucyBvZiB0aGUgQVQpLCBDb250ZXh0IChyZWxhdGlvbnNoaXBzIHRvIG90aGVyIG1vZGFsaXRpZXMgaW5jbHVkaW5nIHBzeWNob3RoZXJhcHk7IGhpc3RvcnksIGFuZCBtaXNjLikgYW5kIHRlYWNoZXIgKENhcnJpbmd0b27igJlzIGFwcHJvYWNoKS4gIAo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAIABAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "v0/senseml-reference/7000 - deprecated-features/1000 - deprecated-key-value.md",
			"settings":
			{
				"buffer_size": 917,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"",
					null,
					"AgAAACcDAAAAAAAAQgMAAAAAAAAQAAAAZG9jOmJhZy1vZi13b3Jkc2cCAAAAAAAAggIAAAAAAAAQAAAAZG9jOmJhZy1vZi13b3Jkcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACVAwAALS0tCnRpdGxlOiAiKERlcHJlY2F0ZWQpIEtleS9WYWx1ZSIKaGlkZGVuOiB0cnVlCi0tLQojIyBEZXByZWNhdGVkCgpUaGlzIG1ldGhvZCBpcyBkZXByZWNhdGVkLiBbTExNLWJhc2VkIG1ldGhvZHNdKGRvYzppbnN0cnVjdCkgcmVwbGFjZSB0aGlzIG1ldGhvZC4KCiMjIERlY3JpcHRpb24KCkZpbmRzIHRoZSBtb3N0IHByb21pc2luZyB0d28tY29sdW1uIHRhYnVsYXIga2V5L3ZhbHVlIHBhaXIgaW4gYSBzaW5nbGUgcGFnZSBvZiB0aGUgc291cmNlIGRvY3VtZW50LiBUaGlzIHNpbmdsZSBwYWdlIGFuZCB0aGUgd2lubmluZyBrZXkgYXJlIHRob3NlIHRoYXQgc2NvcmUgaGlnaGVzdCBvbiB0aGUgYHRlcm1zYCBhbmQgYHN0b3BUZXJtc2AuCgpgYGAKewogICJkYXRhIjogewogICAgImgtMCI6ICJrZXkiLAogICAgImgtMSI6ICJ2YWx1ZSIsCiAgICAiaC0yIjogImRlc2NyaXB0aW9uIiwKICAgICIwLTAiOiAiaWQiLAogICAgIjAtMSI6ICJga2V5VmFsdWVgIiwKICAgICIxLTAiOiAidGVybXMiLAogICAgIjEtMiI6ICJBbiBhcnJheSBvZiB0ZXJtcyB0byBzY29yZSBwb3NpdGl2ZWx5LiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBzY29yaW5nLCBzZWUgW2JhZyBvZiB3b3Jkc10oZG9jOmRlcHJlY2F0ZWQtYmFnLW9mLXdvcmRzKS4iLAogICAgIjEtMSI6ICJBcnJheSBvZiBzdHJpbmdzIiwKICAgICIyLTAiOiAic3RvcFRlcm1zIiwKICAgICIyLTIiOiAib3B0aW9uYWwuIEFuIGFycmF5IG9mIHRlcm1zIHRvIHNjb3JlIG5lZ2F0aXZlbHkuIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHNjb3JpbmcsIHNlZSBbYmFnIG9mIHdvcmRzXShkb2M6ZGVwcmVjYXRlZC1iYWctb2Ytd29yZHMpLiIsCiAgICAiMi0xIjogIkFycmF5IG9mIHN0cmluZ3MiCiAgfSwKICAiY29scyI6IDMsCiAgInJvd3MiOiAzCn0KYGBgCgoAAAAAAAAAAJUDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAACVAwAALS0tCnRpdGxlOiAiKERlcHJlY2F0ZWQpIEtleS9WYWx1ZSIKaGlkZGVuOiB0cnVlCi0tLQojIyBEZXByZWNhdGVkCgpUaGlzIG1ldGhvZCBpcyBkZXByZWNhdGVkLiBbTExNLWJhc2VkIG1ldGhvZHNdKGRvYzppbnN0cnVjdCkgcmVwbGFjZSB0aGlzIG1ldGhvZC4KCiMjIERlY3JpcHRpb24KCkZpbmRzIHRoZSBtb3N0IHByb21pc2luZyB0d28tY29sdW1uIHRhYnVsYXIga2V5L3ZhbHVlIHBhaXIgaW4gYSBzaW5nbGUgcGFnZSBvZiB0aGUgc291cmNlIGRvY3VtZW50LiBUaGlzIHNpbmdsZSBwYWdlIGFuZCB0aGUgd2lubmluZyBrZXkgYXJlIHRob3NlIHRoYXQgc2NvcmUgaGlnaGVzdCBvbiB0aGUgYHRlcm1zYCBhbmQgYHN0b3BUZXJtc2AuCgpgYGAKewogICJkYXRhIjogewogICAgImgtMCI6ICJrZXkiLAogICAgImgtMSI6ICJ2YWx1ZSIsCiAgICAiaC0yIjogImRlc2NyaXB0aW9uIiwKICAgICIwLTAiOiAiaWQiLAogICAgIjAtMSI6ICJga2V5VmFsdWVgIiwKICAgICIxLTAiOiAidGVybXMiLAogICAgIjEtMiI6ICJBbiBhcnJheSBvZiB0ZXJtcyB0byBzY29yZSBwb3NpdGl2ZWx5LiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBzY29yaW5nLCBzZWUgW2JhZyBvZiB3b3Jkc10oZG9jOmRlcHJlY2F0ZWQtYmFnLW9mLXdvcmRzKS4iLAogICAgIjEtMSI6ICJBcnJheSBvZiBzdHJpbmdzIiwKICAgICIyLTAiOiAic3RvcFRlcm1zIiwKICAgICIyLTIiOiAib3B0aW9uYWwuIEFuIGFycmF5IG9mIHRlcm1zIHRvIHNjb3JlIG5lZ2F0aXZlbHkuIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHNjb3JpbmcsIHNlZSBbYmFnIG9mIHdvcmRzXShkb2M6ZGVwcmVjYXRlZC1iYWctb2Ytd29yZHMpLiIsCiAgICAiMi0xIjogIkFycmF5IG9mIHN0cmluZ3MiCiAgfSwKICAiY29scyI6IDMsCiAgInJvd3MiOiAzCn0KYGBgCgoAAAAAAAAAAJUDAAAAAAAAAAAAAAAAAAAAAAAAlQMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACVAwAALS0tCnRpdGxlOiAiKERlcHJlY2F0ZWQpIEtleS9WYWx1ZSIKaGlkZGVuOiB0cnVlCi0tLQojIyBEZXByZWNhdGVkCgpUaGlzIG1ldGhvZCBpcyBkZXByZWNhdGVkLiBbTExNLWJhc2VkIG1ldGhvZHNdKGRvYzppbnN0cnVjdCkgcmVwbGFjZSB0aGlzIG1ldGhvZC4KCiMjIERlY3JpcHRpb24KCkZpbmRzIHRoZSBtb3N0IHByb21pc2luZyB0d28tY29sdW1uIHRhYnVsYXIga2V5L3ZhbHVlIHBhaXIgaW4gYSBzaW5nbGUgcGFnZSBvZiB0aGUgc291cmNlIGRvY3VtZW50LiBUaGlzIHNpbmdsZSBwYWdlIGFuZCB0aGUgd2lubmluZyBrZXkgYXJlIHRob3NlIHRoYXQgc2NvcmUgaGlnaGVzdCBvbiB0aGUgYHRlcm1zYCBhbmQgYHN0b3BUZXJtc2AuCgpgYGAKewogICJkYXRhIjogewogICAgImgtMCI6ICJrZXkiLAogICAgImgtMSI6ICJ2YWx1ZSIsCiAgICAiaC0yIjogImRlc2NyaXB0aW9uIiwKICAgICIwLTAiOiAiaWQiLAogICAgIjAtMSI6ICJga2V5VmFsdWVgIiwKICAgICIxLTAiOiAidGVybXMiLAogICAgIjEtMiI6ICJBbiBhcnJheSBvZiB0ZXJtcyB0byBzY29yZSBwb3NpdGl2ZWx5LiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBzY29yaW5nLCBzZWUgW2JhZyBvZiB3b3Jkc10oZG9jOmRlcHJlY2F0ZWQtYmFnLW9mLXdvcmRzKS4iLAogICAgIjEtMSI6ICJBcnJheSBvZiBzdHJpbmdzIiwKICAgICIyLTAiOiAic3RvcFRlcm1zIiwKICAgICIyLTIiOiAib3B0aW9uYWwuIEFuIGFycmF5IG9mIHRlcm1zIHRvIHNjb3JlIG5lZ2F0aXZlbHkuIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHNjb3JpbmcsIHNlZSBbYmFnIG9mIHdvcmRzXShkb2M6ZGVwcmVjYXRlZC1iYWctb2Ytd29yZHMpLiIsCiAgICAiMi0xIjogIkFycmF5IG9mIHN0cmluZ3MiCiAgfSwKICAiY29scyI6IDMsCiAgInJvd3MiOiAzCn0KYGBgCgoAAAAAAAAAAJUDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "v0/senseml-reference/7000 - deprecated-features/1100 - deprecated-page-filter.md",
			"settings":
			{
				"buffer_size": 975,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"",
					null,
					"AgAAADcDAAAAAAAAUgMAAAAAAAAQAAAAZG9jOmJhZy1vZi13b3Jkc34CAAAAAAAAmQIAAAAAAAAQAAAAZG9jOmJhZy1vZi13b3Jkcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADPAwAALS0tCnRpdGxlOiAiKERlcHJlY2F0ZWQpIFBhZ2UgZmlsdGVyIgpoaWRkZW46IHRydWUKLS0tCgpGaWx0ZXJzIG91dCBsb3ctc2NvcmluZyBwYWdlcyBnaXZlbiBhIGJhZyBvZiB0YXJnZXQgdGVybXMgYW5kIHN0b3AgdGVybXMuCgojIyBQYXJhbWV0ZXJzCgp8IGtleSAgICAgICAgICAgICAgICAgICAgIHwgdmFsdWUgIHwgZGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8CnwgdHlwZSAoKipyZXF1aXJlZCoqKSAgICAgfCBzdHJpbmcgfCAicGFnZUZpbHRlciIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAp8IHRlcm1zICgqKnJlcXVpcmVkKiopICAgIHwgYXJyYXkgIHwgQW4gYXJyYXkgb2YgdGVybXMgdG8gc2NvcmUgcG9zaXRpdmVseSAoZm9yIGV4YW1wbGUsIGBbIm51bWJlciBvZiBidWlsZGluZ3MiLCAibm8uIG9mIGJ1aWxkaW5ncyJdYCkuIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHNjb3JpbmcsIHNlZSBbYmFnIG9mIHdvcmRzXShkb2M6ZGVwcmVjYXRlZC1iYWctb2Ytd29yZHMpLiB8Cnwgc3RvcFRlcm1zICAgICAgICAgICAgICAgfCBhcnJheSAgfCBBbiBhcnJheSBvZiB0ZXJtcyB0byBzY29yZSBuZWdhdGl2ZWx5IChmb3IgZXhhbXBsZSwgYFsiY29tcGFyYWJsZXMiXWApLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBzY29yaW5nLCBzZWUgW2JhZyBvZiB3b3Jkc10oZG9jOmRlcHJlY2F0ZWQtYmFnLW9mLXdvcmRzKS4gfAp8IG1heFBhZ2VzICgqKnJlcXVpcmVkKiopIHwgbnVtYmVyIHwgVGhlIG1heGltdW0gbnVtYmVyIG9mIGhpZ2hlc3Qtc2NvcmluZyBwYWdlcyB0byBwYXNzIHRocm91Z2ggdGhlIGZpbHRlciB8AAAAAAAAAADPAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAADPAwAALS0tCnRpdGxlOiAiKERlcHJlY2F0ZWQpIFBhZ2UgZmlsdGVyIgpoaWRkZW46IHRydWUKLS0tCgpGaWx0ZXJzIG91dCBsb3ctc2NvcmluZyBwYWdlcyBnaXZlbiBhIGJhZyBvZiB0YXJnZXQgdGVybXMgYW5kIHN0b3AgdGVybXMuCgojIyBQYXJhbWV0ZXJzCgp8IGtleSAgICAgICAgICAgICAgICAgICAgIHwgdmFsdWUgIHwgZGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8CnwgdHlwZSAoKipyZXF1aXJlZCoqKSAgICAgfCBzdHJpbmcgfCAicGFnZUZpbHRlciIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAp8IHRlcm1zICgqKnJlcXVpcmVkKiopICAgIHwgYXJyYXkgIHwgQW4gYXJyYXkgb2YgdGVybXMgdG8gc2NvcmUgcG9zaXRpdmVseSAoZm9yIGV4YW1wbGUsIGBbIm51bWJlciBvZiBidWlsZGluZ3MiLCAibm8uIG9mIGJ1aWxkaW5ncyJdYCkuIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHNjb3JpbmcsIHNlZSBbYmFnIG9mIHdvcmRzXShkb2M6ZGVwcmVjYXRlZC1iYWctb2Ytd29yZHMpLiB8Cnwgc3RvcFRlcm1zICAgICAgICAgICAgICAgfCBhcnJheSAgfCBBbiBhcnJheSBvZiB0ZXJtcyB0byBzY29yZSBuZWdhdGl2ZWx5IChmb3IgZXhhbXBsZSwgYFsiY29tcGFyYWJsZXMiXWApLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBzY29yaW5nLCBzZWUgW2JhZyBvZiB3b3Jkc10oZG9jOmRlcHJlY2F0ZWQtYmFnLW9mLXdvcmRzKS4gfAp8IG1heFBhZ2VzICgqKnJlcXVpcmVkKiopIHwgbnVtYmVyIHwgVGhlIG1heGltdW0gbnVtYmVyIG9mIGhpZ2hlc3Qtc2NvcmluZyBwYWdlcyB0byBwYXNzIHRocm91Z2ggdGhlIGZpbHRlciB8AAAAAAAAAADPAwAAAAAAAAAAAAAAAAAAAAAAAM8DAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADPAwAALS0tCnRpdGxlOiAiKERlcHJlY2F0ZWQpIFBhZ2UgZmlsdGVyIgpoaWRkZW46IHRydWUKLS0tCgpGaWx0ZXJzIG91dCBsb3ctc2NvcmluZyBwYWdlcyBnaXZlbiBhIGJhZyBvZiB0YXJnZXQgdGVybXMgYW5kIHN0b3AgdGVybXMuCgojIyBQYXJhbWV0ZXJzCgp8IGtleSAgICAgICAgICAgICAgICAgICAgIHwgdmFsdWUgIHwgZGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8CnwgdHlwZSAoKipyZXF1aXJlZCoqKSAgICAgfCBzdHJpbmcgfCAicGFnZUZpbHRlciIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAp8IHRlcm1zICgqKnJlcXVpcmVkKiopICAgIHwgYXJyYXkgIHwgQW4gYXJyYXkgb2YgdGVybXMgdG8gc2NvcmUgcG9zaXRpdmVseSAoZm9yIGV4YW1wbGUsIGBbIm51bWJlciBvZiBidWlsZGluZ3MiLCAibm8uIG9mIGJ1aWxkaW5ncyJdYCkuIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHNjb3JpbmcsIHNlZSBbYmFnIG9mIHdvcmRzXShkb2M6ZGVwcmVjYXRlZC1iYWctb2Ytd29yZHMpLiB8Cnwgc3RvcFRlcm1zICAgICAgICAgICAgICAgfCBhcnJheSAgfCBBbiBhcnJheSBvZiB0ZXJtcyB0byBzY29yZSBuZWdhdGl2ZWx5IChmb3IgZXhhbXBsZSwgYFsiY29tcGFyYWJsZXMiXWApLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBzY29yaW5nLCBzZWUgW2JhZyBvZiB3b3Jkc10oZG9jOmRlcHJlY2F0ZWQtYmFnLW9mLXdvcmRzKS4gfAp8IG1heFBhZ2VzICgqKnJlcXVpcmVkKiopIHwgbnVtYmVyIHwgVGhlIG1heGltdW0gbnVtYmVyIG9mIGhpZ2hlc3Qtc2NvcmluZyBwYWdlcyB0byBwYXNzIHRocm91Z2ggdGhlIGZpbHRlciB8AAAAAAAAAADPAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "v0/senseml-reference/7000 - deprecated-features/1500 - deprecated-invoice.md",
			"settings":
			{
				"buffer_size": 8219,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"",
					null,
					"AgAAADoIAAAAAAAAVQgAAAAAAAAQAAAAZG9jOmJhZy1vZi13b3Jkc1oHAAAAAAAAdQcAAAAAAAAQAAAAZG9jOmJhZy1vZi13b3Jkcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "v0/senseml-reference/7000 - deprecated-features/2000 - deprecated-topic.md",
			"settings":
			{
				"buffer_size": 3796,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"",
					null,
					"AwAAAHcJAAAAAAAAkgkAAAAAAAAQAAAAZG9jOmJhZy1vZi13b3Jkc64IAAAAAAAAyQgAAAAAAAAQAAAAZG9jOmJhZy1vZi13b3Jkc/cAAAAAAAAAEgEAAAAAAAAQAAAAZG9jOmJhZy1vZi13b3Jkcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADUDgAALS0tCnRpdGxlOiAiVG9waWMiCmhpZGRlbjogdHJ1ZQoKLS0tCgojIyBEZXByZWNhdGVkCgpUaGlzIG1ldGhvZCBpcyBkZXByZWNhdGVkLiBbTExNLWJhc2VkIG1ldGhvZHNdKGRvYzppbnN0cnVjdCkgcmVwbGFjZSB0aGlzIG1ldGhvZC4KCiMjIERlc2NyaXB0aW9uCgpGaW5kcyBhIHJhbmdlIG9mIGxpbmVzIGluIGEgZG9jdW1lbnQgdGhhdCBiZXN0IG1hdGNoIGEgdG9waWMgYXMgZGV0ZXJtaW5lZCBieSBhIFtiYWcgb2Ygd29yZHNdKGRvYzpkZXByZWNhdGVkLWJhZy1vZi13b3Jkcykgc2NvcmluZyBhcHByb2FjaC4gTW9zdCB1c2VmdWwgaW4gbG9uZywgdW5zdHJ1Y3R1cmVkIGRvY3VtZW50cy4gRm9yIGV4YW1wbGUsIHRoaXMgbWV0aG9kIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIFtTdW1tYXJpemVyIG1ldGhvZF0oZG9jOnN1bW1hcml6ZXIpIGNhbiBleHRyYWN0IGtleS12YWx1ZSBwYWlycyBmcm9tIGZyZWUgdGV4dCB1c2luZyBNTCAobWFjaGluZSBsZWFybmluZykuCgpbKipQYXJhbWV0ZXJzKipdKGRvYzpkZXByZWNhdGVkLXRvcGljI3BhcmFtZXRlcnMpClsqKkV4YW1wbGVzKipdKGRvYzpkZXByZWNhdGVkLXRvcGljI2V4YW1wbGVzKQoKUGFyYW1ldGVycwo9PT09PQoKKipOb3RlOioqIEZvciB0aGUgZnVsbCBsaXN0IG9mIHBhcmFtZXRlcnMgYXZhaWxhYmxlIGZvciB0aGlzIG1ldGhvZCwgc2VlIFtHbG9iYWwgcGFyYW1ldGVycyBmb3IgbWV0aG9kc10oZG9jOm1ldGhvZCNnbG9iYWwtcGFyYW1ldGVycy1mb3ItbWV0aG9kcykuIFRoZSBmb2xsb3dpbmcgdGFibGUgc2hvd3MgcGFyYW1ldGVycyBtb3N0IHJlbGV2YW50IHRvIG9yIHNwZWNpZmljIHRvIHRoaXMgbWV0aG9kLgoKfCBrZXkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHZhbHVlICAgICAgICB8IGRlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgOi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCA6LS0tLS0tLS0tLS0gfCA6LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfAp8IGlkICgqKnJlcXVpcmVkKiopICAgICAgICAgICAgICAgICAgICAgICAgIHwgYHRvcGljYCAgICAgIHwgVGhlIEFuY2hvciBwYXJhbWV0ZXIgaXMgb3B0aW9uYWwgZm9yIGZpZWxkcyB0aGF0IHVzZSB0aGlzIG1ldGhvZC4gSWYgeW91IHNwZWNpZnkgYW4gYW5jaG9yLCBTZW5zaWJsZSBzZWFyY2hlcyBmcm9tIHRoZSBhbmNob3IgbWF0Y2ggdG8gdGhlIGVuZCBvZiB0aGUgZG9jdW1lbnQgZm9yIHRoZSB0b3BpYy4gfAp8IG51bVBhcmFncmFwaHMgIG9yIG51bUxpbmVzICgqKnJlcXVpcmVkKiopIHwgbnVtYmVyICAgICAgIHwgVGhlIG51bWJlciBvZiAgcGFyYWdyYXBocyBvciBjb25zZWN1dGl2ZSBsaW5lcyB0byBleHRyYWN0LCByZXNwZWN0aXZlbHkuIDxici8+PGJyLz48YnIvPiBJZiB5b3Ugc2V0IHRoZSBOdW0gUGFyYWdyYXBocyBwYXJhbWV0ZXIsIFNlbnNpYmxlIHNjb3JlcyBldmVyeSBwYXJhZ3JhcGggaW4gdGhlIGRvY3VtZW50IGFuZCByZXR1cm5zIHRoZSBoaWdoZXN0LXNjb3JpbmcgcGFyYWdyYXBoLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgcGFyYWdyYXBoIHJlY29nbml0aW9uLCBzZWUgdGhlIFtQYXJhZ3JhcGggbWV0aG9kXShkb2M6cGFyYWdyYXBoKSAuPGJyLz48YnIvPklmIHlvdSBzZXQgdGhlIE51bSBMaW5lcyBwYXJhbWV0ZXIsIFNlbnNpYmxlIHNjb3JlcyBldmVyeSBncm91cCBvZiBjb25zZWN1dGl2ZSBsaW5lcyBpbiB0aGUgZG9jdW1lbnQgYW5kIHJldHVybnMgdGhlIGhpZ2hlc3Qtc2NvcmluZyBncm91cC4gRm9yIGluZm9ybWF0aW9uIGFib3V0IHRoZSBkZWZpbml0aW9uIG9mICJjb25zZWN1dGl2ZSIsIHNlZSBbbGluZSBzb3J0aW5nXShkb2M6bGluZXMjbGluZS1zb3J0aW5nKS48YnIvPjxici8+SWYgbGluZSBncm91cHMgb3IgcGFyYWdyYXBocyBoYXZlIGVxdWFsIHNjb3JlcywgdGhlbiBTZW5zaWJsZSByZXR1cm5zIHRoZSBsYXN0IG9uZS48YnIvPiB8CnwgdGVybXMgKCoqcmVxdWlyZWQqKikgICAgICAgICAgICAgICAgICAgICAgfCBzdHJpbmcgYXJyYXkgfCBBbiBhcnJheSBvZiB0ZXJtcyB0byBzY29yZSBwb3NpdGl2ZWx5IGR1cmluZyB0b3BpYyByZWNvZ25pdGlvbi4gRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgc2NvcmluZywgc2VlIFtiYWcgb2Ygd29yZHNdKGRvYzpkZXByZWNhdGVkLWJhZy1vZi13b3JkcykuIHwKfCBzdG9wVGVybXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHN0cmluZyBhcnJheSB8IEFuIGFycmF5IG9mIHRlcm1zIHRvIHNjb3JlIG5lZ2F0aXZlbHkgZHVyaW5nIHRvcGljIHJlY29nbml0aW9uLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBzY29yaW5nLCBzZWUgW2JhZyBvZiB3b3Jkc10oZG9jOmRlcHJlY2F0ZWQtYmFnLW9mLXdvcmRzKS4gfAoKRXhhbXBsZXMKPT09PQoKCgpUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgZmluZGluZyBhICB0b3BpYyBpbiBhIGxpY2Vuc2luZyBsZWdhbCBjb2RlLgoKKipDb25maWcqKgoKYGBganNvbgp7CiAgImZpZWxkcyI6IFsKICAgIHsKICAgICAgImlkIjogImxpYWJpbGl0eV9saW1pdGF0aW9uX3RvcGljIiwKICAgICAgLyogYW5jaG9yIGlzIG9wdGlvbmFsIGZvciBUb3BpYyBtZXRob2QgKi8KICAgICAgIm1ldGhvZCI6IHsKICAgICAgICAiaWQiOiAidG9waWMiLAogICAgICAgICJudW1QYXJhZ3JhcGhzIjogMSwKICAgICAgICAidGVybXMiOiBbCiAgICAgICAgICAibGltaXRhdGlvbiIsCiAgICAgICAgICAibGlhYmlsaXR5IiwKICAgICAgICAgICJleHRlbnQiCiAgICAgICAgXSwKICAgICAgICAic3RvcFRlcm1zIjogWwogICAgICAgICAgIndhcnJhbnR5IgogICAgICAgIF0KICAgICAgfQogICAgfQogIF0KfQpgYGAKCioqRXhhbXBsZSBkb2N1bWVudCoqClRoZSBmb2xsb3dpbmcgaW1hZ2Ugc2hvd3MgdGhlIGV4YW1wbGUgZG9jdW1lbnQgdXNlZCB3aXRoIHRoaXMgZXhhbXBsZSBjb25maWc6CgohW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC90b3BpYy5wbmcpCgp8IEV4YW1wbGUgZG9jdW1lbnQgfCBbRG93bmxvYWQgbGlua10oaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzIuNS9sZWdhbGNvZGUpIHwKfCAtLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8CgoKKipPdXRwdXQqKgoKYGBganNvbgp7CiAgImxpYWJpbGl0eV9saW1pdGF0aW9uX3RvcGljIjogewogICAgInR5cGUiOiAic3RyaW5nIiwKICAgICJ2YWx1ZSI6ICI2LiBMaW1pdGF0aW9uIG9uIExpYWJpbGl0eS4gRVhDRVBUIFRPIFRIRSBFWFRFTlQgUkVRVUlSRUQgQlkgQVBQTElDQUJMRSBMQVcsIElOIE5PIEVWRU5UIFdJTEwgTElDRU5TT1IgQkUgTElBQkxFIFRPIFlPVSBPTiBBTlkgTEVHQUwgVEhFT1JZIEZPUiBBTlkgU1BFQ0lBTCwgSU5DSURFTlRBTCwgQ09OU0VRVUVOVElBTCwgUFVOSVRJVkUgT1IgRVhFTVBMQVJZIERBTUFHRVMgQVJJU0lORyBPVVQgT0YgVEhJUyBMSUNFTlNFIE9SIFRIRSBVU0UgT0YgVEhFIFdPUkssIEVWRU4gSUYgTElDRU5TT1IgSEFTIEJFRU4gQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0VTLiIKICB9Cn0KYGBgCgAAAAAAAAAA1A4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAADUDgAALS0tCnRpdGxlOiAiVG9waWMiCmhpZGRlbjogdHJ1ZQoKLS0tCgojIyBEZXByZWNhdGVkCgpUaGlzIG1ldGhvZCBpcyBkZXByZWNhdGVkLiBbTExNLWJhc2VkIG1ldGhvZHNdKGRvYzppbnN0cnVjdCkgcmVwbGFjZSB0aGlzIG1ldGhvZC4KCiMjIERlc2NyaXB0aW9uCgpGaW5kcyBhIHJhbmdlIG9mIGxpbmVzIGluIGEgZG9jdW1lbnQgdGhhdCBiZXN0IG1hdGNoIGEgdG9waWMgYXMgZGV0ZXJtaW5lZCBieSBhIFtiYWcgb2Ygd29yZHNdKGRvYzpkZXByZWNhdGVkLWJhZy1vZi13b3Jkcykgc2NvcmluZyBhcHByb2FjaC4gTW9zdCB1c2VmdWwgaW4gbG9uZywgdW5zdHJ1Y3R1cmVkIGRvY3VtZW50cy4gRm9yIGV4YW1wbGUsIHRoaXMgbWV0aG9kIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIFtTdW1tYXJpemVyIG1ldGhvZF0oZG9jOnN1bW1hcml6ZXIpIGNhbiBleHRyYWN0IGtleS12YWx1ZSBwYWlycyBmcm9tIGZyZWUgdGV4dCB1c2luZyBNTCAobWFjaGluZSBsZWFybmluZykuCgpbKipQYXJhbWV0ZXJzKipdKGRvYzpkZXByZWNhdGVkLXRvcGljI3BhcmFtZXRlcnMpClsqKkV4YW1wbGVzKipdKGRvYzpkZXByZWNhdGVkLXRvcGljI2V4YW1wbGVzKQoKUGFyYW1ldGVycwo9PT09PQoKKipOb3RlOioqIEZvciB0aGUgZnVsbCBsaXN0IG9mIHBhcmFtZXRlcnMgYXZhaWxhYmxlIGZvciB0aGlzIG1ldGhvZCwgc2VlIFtHbG9iYWwgcGFyYW1ldGVycyBmb3IgbWV0aG9kc10oZG9jOm1ldGhvZCNnbG9iYWwtcGFyYW1ldGVycy1mb3ItbWV0aG9kcykuIFRoZSBmb2xsb3dpbmcgdGFibGUgc2hvd3MgcGFyYW1ldGVycyBtb3N0IHJlbGV2YW50IHRvIG9yIHNwZWNpZmljIHRvIHRoaXMgbWV0aG9kLgoKfCBrZXkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHZhbHVlICAgICAgICB8IGRlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgOi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCA6LS0tLS0tLS0tLS0gfCA6LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfAp8IGlkICgqKnJlcXVpcmVkKiopICAgICAgICAgICAgICAgICAgICAgICAgIHwgYHRvcGljYCAgICAgIHwgVGhlIEFuY2hvciBwYXJhbWV0ZXIgaXMgb3B0aW9uYWwgZm9yIGZpZWxkcyB0aGF0IHVzZSB0aGlzIG1ldGhvZC4gSWYgeW91IHNwZWNpZnkgYW4gYW5jaG9yLCBTZW5zaWJsZSBzZWFyY2hlcyBmcm9tIHRoZSBhbmNob3IgbWF0Y2ggdG8gdGhlIGVuZCBvZiB0aGUgZG9jdW1lbnQgZm9yIHRoZSB0b3BpYy4gfAp8IG51bVBhcmFncmFwaHMgIG9yIG51bUxpbmVzICgqKnJlcXVpcmVkKiopIHwgbnVtYmVyICAgICAgIHwgVGhlIG51bWJlciBvZiAgcGFyYWdyYXBocyBvciBjb25zZWN1dGl2ZSBsaW5lcyB0byBleHRyYWN0LCByZXNwZWN0aXZlbHkuIDxici8+PGJyLz48YnIvPiBJZiB5b3Ugc2V0IHRoZSBOdW0gUGFyYWdyYXBocyBwYXJhbWV0ZXIsIFNlbnNpYmxlIHNjb3JlcyBldmVyeSBwYXJhZ3JhcGggaW4gdGhlIGRvY3VtZW50IGFuZCByZXR1cm5zIHRoZSBoaWdoZXN0LXNjb3JpbmcgcGFyYWdyYXBoLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgcGFyYWdyYXBoIHJlY29nbml0aW9uLCBzZWUgdGhlIFtQYXJhZ3JhcGggbWV0aG9kXShkb2M6cGFyYWdyYXBoKSAuPGJyLz48YnIvPklmIHlvdSBzZXQgdGhlIE51bSBMaW5lcyBwYXJhbWV0ZXIsIFNlbnNpYmxlIHNjb3JlcyBldmVyeSBncm91cCBvZiBjb25zZWN1dGl2ZSBsaW5lcyBpbiB0aGUgZG9jdW1lbnQgYW5kIHJldHVybnMgdGhlIGhpZ2hlc3Qtc2NvcmluZyBncm91cC4gRm9yIGluZm9ybWF0aW9uIGFib3V0IHRoZSBkZWZpbml0aW9uIG9mICJjb25zZWN1dGl2ZSIsIHNlZSBbbGluZSBzb3J0aW5nXShkb2M6bGluZXMjbGluZS1zb3J0aW5nKS48YnIvPjxici8+SWYgbGluZSBncm91cHMgb3IgcGFyYWdyYXBocyBoYXZlIGVxdWFsIHNjb3JlcywgdGhlbiBTZW5zaWJsZSByZXR1cm5zIHRoZSBsYXN0IG9uZS48YnIvPiB8CnwgdGVybXMgKCoqcmVxdWlyZWQqKikgICAgICAgICAgICAgICAgICAgICAgfCBzdHJpbmcgYXJyYXkgfCBBbiBhcnJheSBvZiB0ZXJtcyB0byBzY29yZSBwb3NpdGl2ZWx5IGR1cmluZyB0b3BpYyByZWNvZ25pdGlvbi4gRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgc2NvcmluZywgc2VlIFtiYWcgb2Ygd29yZHNdKGRvYzpkZXByZWNhdGVkLWJhZy1vZi13b3JkcykuIHwKfCBzdG9wVGVybXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHN0cmluZyBhcnJheSB8IEFuIGFycmF5IG9mIHRlcm1zIHRvIHNjb3JlIG5lZ2F0aXZlbHkgZHVyaW5nIHRvcGljIHJlY29nbml0aW9uLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBzY29yaW5nLCBzZWUgW2JhZyBvZiB3b3Jkc10oZG9jOmRlcHJlY2F0ZWQtYmFnLW9mLXdvcmRzKS4gfAoKRXhhbXBsZXMKPT09PQoKCgpUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgZmluZGluZyBhICB0b3BpYyBpbiBhIGxpY2Vuc2luZyBsZWdhbCBjb2RlLgoKKipDb25maWcqKgoKYGBganNvbgp7CiAgImZpZWxkcyI6IFsKICAgIHsKICAgICAgImlkIjogImxpYWJpbGl0eV9saW1pdGF0aW9uX3RvcGljIiwKICAgICAgLyogYW5jaG9yIGlzIG9wdGlvbmFsIGZvciBUb3BpYyBtZXRob2QgKi8KICAgICAgIm1ldGhvZCI6IHsKICAgICAgICAiaWQiOiAidG9waWMiLAogICAgICAgICJudW1QYXJhZ3JhcGhzIjogMSwKICAgICAgICAidGVybXMiOiBbCiAgICAgICAgICAibGltaXRhdGlvbiIsCiAgICAgICAgICAibGlhYmlsaXR5IiwKICAgICAgICAgICJleHRlbnQiCiAgICAgICAgXSwKICAgICAgICAic3RvcFRlcm1zIjogWwogICAgICAgICAgIndhcnJhbnR5IgogICAgICAgIF0KICAgICAgfQogICAgfQogIF0KfQpgYGAKCioqRXhhbXBsZSBkb2N1bWVudCoqClRoZSBmb2xsb3dpbmcgaW1hZ2Ugc2hvd3MgdGhlIGV4YW1wbGUgZG9jdW1lbnQgdXNlZCB3aXRoIHRoaXMgZXhhbXBsZSBjb25maWc6CgohW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC90b3BpYy5wbmcpCgp8IEV4YW1wbGUgZG9jdW1lbnQgfCBbRG93bmxvYWQgbGlua10oaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzIuNS9sZWdhbGNvZGUpIHwKfCAtLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8CgoKKipPdXRwdXQqKgoKYGBganNvbgp7CiAgImxpYWJpbGl0eV9saW1pdGF0aW9uX3RvcGljIjogewogICAgInR5cGUiOiAic3RyaW5nIiwKICAgICJ2YWx1ZSI6ICI2LiBMaW1pdGF0aW9uIG9uIExpYWJpbGl0eS4gRVhDRVBUIFRPIFRIRSBFWFRFTlQgUkVRVUlSRUQgQlkgQVBQTElDQUJMRSBMQVcsIElOIE5PIEVWRU5UIFdJTEwgTElDRU5TT1IgQkUgTElBQkxFIFRPIFlPVSBPTiBBTlkgTEVHQUwgVEhFT1JZIEZPUiBBTlkgU1BFQ0lBTCwgSU5DSURFTlRBTCwgQ09OU0VRVUVOVElBTCwgUFVOSVRJVkUgT1IgRVhFTVBMQVJZIERBTUFHRVMgQVJJU0lORyBPVVQgT0YgVEhJUyBMSUNFTlNFIE9SIFRIRSBVU0UgT0YgVEhFIFdPUkssIEVWRU4gSUYgTElDRU5TT1IgSEFTIEJFRU4gQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0VTLiIKICB9Cn0KYGBgCgAAAAAAAAAA1A4AAAAAAAAAAAAAAAAAAAAAAADUDgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADUDgAALS0tCnRpdGxlOiAiVG9waWMiCmhpZGRlbjogdHJ1ZQoKLS0tCgojIyBEZXByZWNhdGVkCgpUaGlzIG1ldGhvZCBpcyBkZXByZWNhdGVkLiBbTExNLWJhc2VkIG1ldGhvZHNdKGRvYzppbnN0cnVjdCkgcmVwbGFjZSB0aGlzIG1ldGhvZC4KCiMjIERlc2NyaXB0aW9uCgpGaW5kcyBhIHJhbmdlIG9mIGxpbmVzIGluIGEgZG9jdW1lbnQgdGhhdCBiZXN0IG1hdGNoIGEgdG9waWMgYXMgZGV0ZXJtaW5lZCBieSBhIFtiYWcgb2Ygd29yZHNdKGRvYzpkZXByZWNhdGVkLWJhZy1vZi13b3Jkcykgc2NvcmluZyBhcHByb2FjaC4gTW9zdCB1c2VmdWwgaW4gbG9uZywgdW5zdHJ1Y3R1cmVkIGRvY3VtZW50cy4gRm9yIGV4YW1wbGUsIHRoaXMgbWV0aG9kIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIFtTdW1tYXJpemVyIG1ldGhvZF0oZG9jOnN1bW1hcml6ZXIpIGNhbiBleHRyYWN0IGtleS12YWx1ZSBwYWlycyBmcm9tIGZyZWUgdGV4dCB1c2luZyBNTCAobWFjaGluZSBsZWFybmluZykuCgpbKipQYXJhbWV0ZXJzKipdKGRvYzpkZXByZWNhdGVkLXRvcGljI3BhcmFtZXRlcnMpClsqKkV4YW1wbGVzKipdKGRvYzpkZXByZWNhdGVkLXRvcGljI2V4YW1wbGVzKQoKUGFyYW1ldGVycwo9PT09PQoKKipOb3RlOioqIEZvciB0aGUgZnVsbCBsaXN0IG9mIHBhcmFtZXRlcnMgYXZhaWxhYmxlIGZvciB0aGlzIG1ldGhvZCwgc2VlIFtHbG9iYWwgcGFyYW1ldGVycyBmb3IgbWV0aG9kc10oZG9jOm1ldGhvZCNnbG9iYWwtcGFyYW1ldGVycy1mb3ItbWV0aG9kcykuIFRoZSBmb2xsb3dpbmcgdGFibGUgc2hvd3MgcGFyYW1ldGVycyBtb3N0IHJlbGV2YW50IHRvIG9yIHNwZWNpZmljIHRvIHRoaXMgbWV0aG9kLgoKfCBrZXkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHZhbHVlICAgICAgICB8IGRlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgOi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCA6LS0tLS0tLS0tLS0gfCA6LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfAp8IGlkICgqKnJlcXVpcmVkKiopICAgICAgICAgICAgICAgICAgICAgICAgIHwgYHRvcGljYCAgICAgIHwgVGhlIEFuY2hvciBwYXJhbWV0ZXIgaXMgb3B0aW9uYWwgZm9yIGZpZWxkcyB0aGF0IHVzZSB0aGlzIG1ldGhvZC4gSWYgeW91IHNwZWNpZnkgYW4gYW5jaG9yLCBTZW5zaWJsZSBzZWFyY2hlcyBmcm9tIHRoZSBhbmNob3IgbWF0Y2ggdG8gdGhlIGVuZCBvZiB0aGUgZG9jdW1lbnQgZm9yIHRoZSB0b3BpYy4gfAp8IG51bVBhcmFncmFwaHMgIG9yIG51bUxpbmVzICgqKnJlcXVpcmVkKiopIHwgbnVtYmVyICAgICAgIHwgVGhlIG51bWJlciBvZiAgcGFyYWdyYXBocyBvciBjb25zZWN1dGl2ZSBsaW5lcyB0byBleHRyYWN0LCByZXNwZWN0aXZlbHkuIDxici8+PGJyLz48YnIvPiBJZiB5b3Ugc2V0IHRoZSBOdW0gUGFyYWdyYXBocyBwYXJhbWV0ZXIsIFNlbnNpYmxlIHNjb3JlcyBldmVyeSBwYXJhZ3JhcGggaW4gdGhlIGRvY3VtZW50IGFuZCByZXR1cm5zIHRoZSBoaWdoZXN0LXNjb3JpbmcgcGFyYWdyYXBoLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgcGFyYWdyYXBoIHJlY29nbml0aW9uLCBzZWUgdGhlIFtQYXJhZ3JhcGggbWV0aG9kXShkb2M6cGFyYWdyYXBoKSAuPGJyLz48YnIvPklmIHlvdSBzZXQgdGhlIE51bSBMaW5lcyBwYXJhbWV0ZXIsIFNlbnNpYmxlIHNjb3JlcyBldmVyeSBncm91cCBvZiBjb25zZWN1dGl2ZSBsaW5lcyBpbiB0aGUgZG9jdW1lbnQgYW5kIHJldHVybnMgdGhlIGhpZ2hlc3Qtc2NvcmluZyBncm91cC4gRm9yIGluZm9ybWF0aW9uIGFib3V0IHRoZSBkZWZpbml0aW9uIG9mICJjb25zZWN1dGl2ZSIsIHNlZSBbbGluZSBzb3J0aW5nXShkb2M6bGluZXMjbGluZS1zb3J0aW5nKS48YnIvPjxici8+SWYgbGluZSBncm91cHMgb3IgcGFyYWdyYXBocyBoYXZlIGVxdWFsIHNjb3JlcywgdGhlbiBTZW5zaWJsZSByZXR1cm5zIHRoZSBsYXN0IG9uZS48YnIvPiB8CnwgdGVybXMgKCoqcmVxdWlyZWQqKikgICAgICAgICAgICAgICAgICAgICAgfCBzdHJpbmcgYXJyYXkgfCBBbiBhcnJheSBvZiB0ZXJtcyB0byBzY29yZSBwb3NpdGl2ZWx5IGR1cmluZyB0b3BpYyByZWNvZ25pdGlvbi4gRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgc2NvcmluZywgc2VlIFtiYWcgb2Ygd29yZHNdKGRvYzpkZXByZWNhdGVkLWJhZy1vZi13b3JkcykuIHwKfCBzdG9wVGVybXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHN0cmluZyBhcnJheSB8IEFuIGFycmF5IG9mIHRlcm1zIHRvIHNjb3JlIG5lZ2F0aXZlbHkgZHVyaW5nIHRvcGljIHJlY29nbml0aW9uLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBzY29yaW5nLCBzZWUgW2JhZyBvZiB3b3Jkc10oZG9jOmRlcHJlY2F0ZWQtYmFnLW9mLXdvcmRzKS4gfAoKRXhhbXBsZXMKPT09PQoKCgpUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgZmluZGluZyBhICB0b3BpYyBpbiBhIGxpY2Vuc2luZyBsZWdhbCBjb2RlLgoKKipDb25maWcqKgoKYGBganNvbgp7CiAgImZpZWxkcyI6IFsKICAgIHsKICAgICAgImlkIjogImxpYWJpbGl0eV9saW1pdGF0aW9uX3RvcGljIiwKICAgICAgLyogYW5jaG9yIGlzIG9wdGlvbmFsIGZvciBUb3BpYyBtZXRob2QgKi8KICAgICAgIm1ldGhvZCI6IHsKICAgICAgICAiaWQiOiAidG9waWMiLAogICAgICAgICJudW1QYXJhZ3JhcGhzIjogMSwKICAgICAgICAidGVybXMiOiBbCiAgICAgICAgICAibGltaXRhdGlvbiIsCiAgICAgICAgICAibGlhYmlsaXR5IiwKICAgICAgICAgICJleHRlbnQiCiAgICAgICAgXSwKICAgICAgICAic3RvcFRlcm1zIjogWwogICAgICAgICAgIndhcnJhbnR5IgogICAgICAgIF0KICAgICAgfQogICAgfQogIF0KfQpgYGAKCioqRXhhbXBsZSBkb2N1bWVudCoqClRoZSBmb2xsb3dpbmcgaW1hZ2Ugc2hvd3MgdGhlIGV4YW1wbGUgZG9jdW1lbnQgdXNlZCB3aXRoIHRoaXMgZXhhbXBsZSBjb25maWc6CgohW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC90b3BpYy5wbmcpCgp8IEV4YW1wbGUgZG9jdW1lbnQgfCBbRG93bmxvYWQgbGlua10oaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzIuNS9sZWdhbGNvZGUpIHwKfCAtLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8CgoKKipPdXRwdXQqKgoKYGBganNvbgp7CiAgImxpYWJpbGl0eV9saW1pdGF0aW9uX3RvcGljIjogewogICAgInR5cGUiOiAic3RyaW5nIiwKICAgICJ2YWx1ZSI6ICI2LiBMaW1pdGF0aW9uIG9uIExpYWJpbGl0eS4gRVhDRVBUIFRPIFRIRSBFWFRFTlQgUkVRVUlSRUQgQlkgQVBQTElDQUJMRSBMQVcsIElOIE5PIEVWRU5UIFdJTEwgTElDRU5TT1IgQkUgTElBQkxFIFRPIFlPVSBPTiBBTlkgTEVHQUwgVEhFT1JZIEZPUiBBTlkgU1BFQ0lBTCwgSU5DSURFTlRBTCwgQ09OU0VRVUVOVElBTCwgUFVOSVRJVkUgT1IgRVhFTVBMQVJZIERBTUFHRVMgQVJJU0lORyBPVVQgT0YgVEhJUyBMSUNFTlNFIE9SIFRIRSBVU0UgT0YgVEhFIFdPUkssIEVWRU4gSUYgTElDRU5TT1IgSEFTIEJFRU4gQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0VTLiIKICB9Cn0KYGBgCgAAAAAAAAAA1A4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "v0/senseml-reference/7000 - deprecated-features/2100 - deprecated-table.md",
			"settings":
			{
				"buffer_size": 6634,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"",
					null,
					"AgAAAOIHAAAAAAAA/QcAAAAAAAAQAAAAZG9jOmJhZy1vZi13b3Jkc0MHAAAAAAAAXgcAAAAAAAAQAAAAZG9jOmJhZy1vZi13b3Jkcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmAAAAAAAAAOYAAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmAAAAAAAAAOYAAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA5gAAAAAAAADmAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "v0/welcome/2000 - draft-getting-started-ai.md",
			"settings":
			{
				"buffer_size": 8909,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"",
					null,
					"AQAAAOgcAAAAAAAA6RwAAAAAAAADAAAAICAh",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOgcAAAAAAAA6xwAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"",
					null,
					"AQAAANMdAAAAAAAA1B0AAAAAAAADAAAAICAh",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANMdAAAAAAAA1h0AAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAADxIQAALS0tCnRpdGxlOiAiR2V0dGluZyBzdGFydGVkIgpoaWRkZW46IGZhbHNlCi0tLQoKIyMgT3ZlcnZpZXcKCldlbGNvbWUhIFNlbnNpYmxlIGlzIGEgZGV2ZWxvcGVyLWZpcnN0IHBsYXRmb3JtIGZvciBleHRyYWN0aW5nIHN0cnVjdHVyZWQgZGF0YSBmcm9tIGRvY3VtZW50cywgZm9yIGV4YW1wbGUsIGJ1c2luZXNzIGZvcm1zIGluIFBERiBmb3JtYXQuIFNlbnNpYmxlIGlzIGhpZ2hseSBjb25maWd1cmFibGUuIFlvdSBjYW4gZ2V0IHNpbXBsZSBkYXRhIGFib3V0IHRleHQgYW5kIGltYWdlcyBpbiBkb2N1bWVudHMgaW4gbWludXRlcyBieSBsZXZlcmFnaW5nIEdQVC00IGFuZCBvdGhlciBsYXJnZSBsYW5ndWFnZSBtb2RlbHMgKExMTXMpLCBvciB5b3UgY2FuIHRhY2tsZSBjb21wbGV4IGFuZCBpZGlvc3luY3JhdGljIGRvY3VtZW50IGZvcm1hdHRpbmcgd2l0aCBTZW5zaWJsZSdzIHBvd2VyZnVsIGxheW91dC1iYXNlZCBkb2N1bWVudCBwcmltaXRpdmVzLgoKCgohW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC9wbGF0Zm9ybS5wbmcpCgpTZWUgdGhlIGZvbGxvd2luZyBsaXN0IGZvciBhbiBvdmVydmlldyBvZiBnb2luZyBsaXZlIHdpdGggU2Vuc2libGU6CgotICoqTGVhcm4qKiB0byBleHRyYWN0IGRhdGEsIG9yIHVzZSBvdXQtb2YtdGhlLWJveCBzdXBwb3J0ZWQgZG9jdW1lbnQgdHlwZXMKLSBbKipJbnRlZ3JhdGUqKl0oZG9jOmludGVncmF0ZSkgdXNpbmcgU2Vuc2libGUncyBBUEksIFNES3MsIHF1aWNrLWV4dHJhY3QgVUksIG9yIG90aGVyIHRvb2xzCi0gWyoqUXVhbGl0eSBjb250cm9sKipdKGRvYzp2YWxpZGF0ZS1leHRyYWN0aW9ucykgZXh0cmFjdGVkIGRhdGEKLSAgWyoqTW9uaXRvcioqXShkb2M6bWV0cmljcykgZXh0cmFjdGVkIGRhdGEgaW4gcHJvZHVjdGlvbiAKClRoaXMgZ3VpZGUgZ2V0cyB5b3Ugc3RhcnRlZCB3aXRoIHRoZSBmaXJzdCBzdGVwLCBleHRyYWN0aW5nIGRhdGEuCgojIyBMZWFybiB0byBleHRyYWN0IGRhdGEKCkxldCdzIGdldCBzdGFydGVkIHdpdGggZXh0cmFjdGluZyBkb2N1bWVudCBkYXRhIGZyb20gYW4gZXhhbXBsZSBiYW5rIHN0YXRlbWVudC4gV2UnbGwgYXV0aG9yIGEgcHJvbXB0IGZvciBhIGxhcmdlIGxhbmd1YWdlIG1vZGVsIChMTE0pIHRvIGV4dHJhY3QgYSBjaGVja2luZyBhY2NvdW50IG51bWJlciBpbiBtaW51dGVzLgoKIEluIHRoaXMgZ3VpZGUsIHlvdSdsbDoKCi0gVmlldyBleGFtcGxlIGRvY3VtZW50IGV4dHJhY3Rpb25zLgotIFRlc3QgdGhlIGV4YW1wbGUgZXh0cmFjdGlvbiBjb25maWd1cmF0aW9uIGFnYWluc3QgYSBzaW1pbGFyIGRvY3VtZW50cyB0byBlbnN1cmUgaXQgZXh0cmFjdHMgdGhlIHNhbWUgdGFyZ2V0IGRhdGEuCi0gRXh0cmFjdCBkYXRhIGZyb20gYW4gZXhhbXBsZSBkb2N1bWVudCB1c2luZyBhIG5hdHVyYWwtbGFuZ3VhZ2UgZGVzY3JpcHRpb24gb2YgeW91ciB0YXJnZXQgZGF0YSwgZm9yIGV4YW1wbGUsIGEgY2hlY2tpbmcgYmFuayBhY2NvdW50IG51bWJlci4gCi0gUHVibGlzaCB5b3VyIHByb21wdCBhcyBwYXJ0IG9mIGEgImNvbmZpZy4iCgojIyBHZXQgYW4gYWNjb3VudAoKMS4gR2V0IGFuIGFjY291bnQgYXQgW3NlbnNpYmxlLnNvXShodHRwczovL2FwcC5zZW5zaWJsZS5zby9yZWdpc3RlcikuICBJZiB5b3UgZG9uJ3QgaGF2ZSBhbiBhY2NvdW50LCB5b3UgY2FuIHN0aWxsIHJlYWQgYWxvbmcgdG8gZ2V0IGEgcm91Z2ggaWRlYSBvZiBob3cgdGhpbmdzIHdvcmsuCgojIyBWaWV3IGFuIGV4YW1wbGUKCldoZW4geW91IHJlZ2lzdGVyIGZvciBhIG5ldyBhY2NvdW50LCB5b3UgY2FuIHVwbG9hZCBhIGN1c3RvbSBkb2N1bWVudCB0byBhdXRvLWV4dHJhY3QgZGF0YSBmcm9tIGl0LCBvciB5b3UgY2FuIHZpZXcgU2Vuc2libGUncyBjb2xsZWN0aW9uIG9mIGV4YW1wbGVzLiBUYWtlIHRoZSBmb2xsb3dpbmcgc3RlcHMgdG8gdmlldyBhbiBleGFtcGxlIGV4dHJhY3Rpb246CgoxLiBMb2cgaW50byB0aGUgW1NlbnNpYmxlIGFwcF0oaHR0cHM6Ly9hcHAuc2Vuc2libGUuc28vc2lnbmluLykgYXMgYSBuZXcgdXNlci4gU2Vuc2libGUgZGlzcGxheXMgdGhlIGZvbGxvd2luZyBvbmJvYXJkaW5nIGRpYWxvZy4gSW4gdGhlIGRpYWxvZywgc2VsZWN0IHRoZSBmb2xsb3dpbmcgb3B0aW9uczoKCiAgIC0gQ2xpY2sgKipTdGFydCB3aXRoIGEgc2FtcGxlIGRvY3VtZW50KioKICAgLSBDbGljayAqKkZpbmFuY2UqKgogICAtIENsaWNrICoqQmFuayBzdGF0ZW1lbnQqKgogICAtIENsaWNrICoqR2V0IHN0YXJ0ZWQqKgoKIVtDbGljayB0byBlbmxhcmdlXShodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc2Vuc2libGUtaHEvc2Vuc2libGUtZG9jcy9tYWluL3JlYWRtZS1zeW5jL2Fzc2V0cy92MC9pbWFnZXMvZmluYWwvcXVpY2tzdGFydF9sbG1fMS5wbmcpIAoKU2Vuc2libGUgZGlzcGxheXMgYW4gZXhhbXBsZSBkb2N1bWVudCBpbiB0aGUgbWlkZGxlIHBhbmUsIGFuZCBmaWVsZHMgb2YgZXh0cmFjdGVkIGRhdGEgaW4gdGhlIHJpZ2h0IHBhbmUuIAoKIVtDbGljayB0byBlbmxhcmdlXShodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc2Vuc2libGUtaHEvc2Vuc2libGUtZG9jcy9tYWluL3JlYWRtZS1zeW5jL2Fzc2V0cy92MC9pbWFnZXMvZmluYWwvcXVpY2tzdGFydF9sbG1fMi5wbmcpCgojIyAgVGVzdCBtb3JlIGRvY3VtZW50cwoKIyMjIFZpZXcgYSBzZWNvbmQgZXhhbXBsZQoKTGV0J3MgdGVzdCB0aGF0IHRoZSBmaWVsZHMgaW4gdGhlIHJpZ2h0IHBhbmUgY2FuIGFjY3VyYXRlbHkgZXh0cmFjdCBkYXRhIGZyb20gYSBzZWNvbmQgZG9jdW1lbnQuIFRvIHRlc3QgYSBzZWNvbmQgYmFuayBzdGF0ZW1lbnQ6CgotIENsaWNrIHRoZSBzZWNvbmQgZXhhbXBsZSBkb2N1bWVudCBpbiB0aGUgbGVmdCBwYW5lLiBWZXJpZnkgdGhhdCB0aGUgZXh0cmFjdGVkIGZpZWxkcyB1cGRhdGVkIHdpdGggbmV3IGRhdGEuIEZvciBleGFtcGxlLCB2ZXJpZnkgdGhhdCB0aGUgYGJlZ2lubmluZ19iYWxhbmNlX2FsbF9hY2NvdW50c2AgZmllbGQgdXBkYXRlZCBmcm9tIGAkNjE3MTUuOThgIHRvIGAkMTgxNTI3Ljc1YCA6CgohW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC9xdWlja3N0YXJ0X2xsbV84LnBuZykKCkZvciBzdXBwb3J0ZWQgZmllbGRzLCB5b3UgY2FuIGNsaWNrIHRoZSBsb2NhdGlvbiBpY29uIHRvIHZpZXcgdGhlIHNvdXJjZSBsb2NhdGlvbiBpbiB0aGUgZG9jdW1lbnQgZm9yIHRoZSBleHRyYWN0aW9uIGRhdGE6CgohW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC9xdWlja3N0YXJ0X2xsbV85LnBuZykKCiMjIyBVcGxvYWQgeW91ciBvd24gZXhhbXBsZQoKVG8gdGVzdCBvbmUgb2YgeW91ciBvd24gZG9jdW1lbnRzLCB0YWtlIHRoZSBmb2xsb3dpbmcgc3RlcHM6CgotIEluIHRoZSBsZWZ0IHBhbmUsIGNsaWNrICoqQWRkIGZpbGUqKi4KLSBTZWxlY3QgYSBuZXcgZXhhbXBsZSBiYW5rIHN0YXRlbWVudDoKICAtIElmIHlvdSB1c2Ugb25lIG9mIHlvdXIgb3duIGJhbmsgc3RhdGVtZW50LCBlbnN1cmUgaXQncyBvbmUgdGhhdCBjb21iaW5lcyBtdWx0aXBsZSBhY2NvdW50cy4gTm90ZSB0aGF0IFNlbnNpYmxlIFtzdXBwb3J0c10oZG9jOmxpYnJhcnktcXVpY2tzdGFydCkgZXh0cmFjdGluZyBkYXRhIGZyb20gYSBzaW5nbGUtYWNjb3VudCBiYW5rIHN0YXRlbWVudCwgYnV0IGl0J3Mgb3V0c2lkZSB0aGUgc2NvcGUgb2YgdGhpcyB0dXRvcmlhbC4gCiAgLSBJZiB5b3UgZG9uJ3QgaGF2ZSBhIHN0YXRlbWVudCBvbiBoYW5kLCB5b3UgY2FuIGRvd25sb2FkIGFuZCB0aGVuIHNlbGVjdCB0aGUgZm9sbG93aW5nIGV4YW1wbGU6CgoKfCBFeGFtcGxlIGRvY3VtZW50IHwgW0Rvd25sb2FkIGxpbmtdKGh0dHBzOi8vZ2l0aHViLmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1jb25maWd1cmF0aW9uLWxpYnJhcnkvcmF3L21haW4vYmFua19zdGF0ZW1lbnRzL2Jhbmtfb2ZfYW1lcmljYS9ib2Ffc2FtcGxlLnBkZikgfAp8IC0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfAoKLSBDbGljayB5b3VyIHVwbG9hZGVkIGRvY3VtZW50IGluIHRoZSBsZWZ0IHBhbmUgYW5kIHZlcmlmeSB0aGF0IHRoZSBleHRyYWN0ZWQgZGF0YSB1cGRhdGVkIGZvciB0aGUgbmV3IGZpbGUuIEZvciBleGFtcGxlOgoKCiFbQ2xpY2sgdG8gZW5sYXJnZV0oaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NlbnNpYmxlLWhxL3NlbnNpYmxlLWRvY3MvbWFpbi9yZWFkbWUtc3luYy9hc3NldHMvdjAvaW1hZ2VzL2ZpbmFsL3F1aWNrc3RhcnRfbGxtXzEzLnBuZykKCgojIyBFZGl0IGV4dHJhY3Rpb24gY29uZmlndXJhdGlvbgoKQmVoaW5kIHRoZSBzY2VuZXMsIGFuICpleHRyYWN0aW9uIGNvbmZpZ3VyYXRpb24qIGV4dHJhY3RzIGRhdGEgZnJvbSBlYWNoIGRvY3VtZW50IHVzaW5nIHRoZSBxdWVyaWVzLCBvciAqZmllbGRzKi4gVGhlIGZpZWxkcyBjYW4gYmUgcG93ZXJlZCBieSBMTE0tYmFzZWQgcHJvbXB0cywgb3IgYnkgbGF5b3V0LWJhc2VkIGV4dHJhY3Rpb24gcnVsZXMgd3JpdHRlbiBpbiBKU09OLiBMZXQncyB0YWtlIGEgbG9vayBhdCBMTE0tYmFzZWQgcHJvbXB0cy4KCiMjIyBWaWV3IHRoZSBwcm9tcHRzCgpUbyBlZGl0IGEgcHJvbXB0LCBjbGljayBhIGZpZWxkIHRvIGRpc3BsYXkgdGhlIExMTSBwcm9tcHRzIHRoYXQgZXh0cmFjdHMgdGhlIGRhdGEuIEZvciBleGFtcGxlLCBpbiB0aGUgYEFsbGV5YCBiYW5rIHN0YXRlbWVudCBleGFtcGxlLCAgY2xpY2sgdGhlIGBlbmRpbmdfYmFsYW5jZV9hbGxfYWNjb3VudHNgIGZpZWxkIHRvIHZpZXcgaXRzIHByb21wdHM6CgohW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC9xdWlja3N0YXJ0X2xsbV8zLnBuZykKClRoZSBsZWZ0IHBhbmUgc2hvd3MgdHdvIHByb21wdHMgdGhhdCBhcmUgZ3JvdXBlZCB0b2dldGhlciAoYSAicXVlcnkgZ3JvdXAiKSBiZWNhdXNlIHRoZXkgdGFyZ2V0IGluZm9ybWF0aW9uIHRoYXQncyBjbHVzdGVyZWQgdG9nZXRoZXIgaW4gYSBvbmUtIHRvIHR3by1wYWdlIHJhbmdlIGluIHRoZSBkb2N1bWVudC4gTm90ZSB0aGF0IHRoZSBpbmZvcm1hdGlvbiBpbiB0aGUgZ3JvdXAgbXVzdCBiZSBjby1sb2NhdGVkLCBidXQgaXQgZG9lc24ndCBuZWVkIHRvIGJlIGNvbmNlcHR1YWxseSByZWxhdGVkLiBGb3IgYW4gZXhhbXBsZSwgc2VlIHRoZSBmb2xsb3dpbmcgaW1hZ2U6IAoKIVtDbGljayB0byBlbmxhcmdlXShodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc2Vuc2libGUtaHEvc2Vuc2libGUtZG9jcy9tYWluL3JlYWRtZS1zeW5jL2Fzc2V0cy92MC9pbWFnZXMvZmluYWwvcXVpY2tzdGFydF9sbG1fNC5wbmcpIAoKQ2xpY2sgYSBwcm9tcHQgdG8gZWRpdCBpdC4gT3Igc2VlIHRoZSBmb2xsb3dpbmcgc3RlcHMgdG8gYXV0aG9yIG1vcmUgcHJvbXB0cy4KCiMjIyBFeHRyYWN0IG1vcmUgZGF0YQoKVG8gbWFudWFsbHkgYXV0aG9yIGFuIGV4dHJhY3Rpb24gcHJvbXB0LCBjbGljayAqKkNyZWF0ZSBuZXcgcXVlcnkqKiwgYXV0aG9yIHlvdXIgcHJvbXB0LCBhbmQgY2xpY2sgKipFeHRyYWN0KiouIFNlbnNpYmxlIGRpc3BsYXlzIHRoZSBleHRyYWN0ZWQgZGF0YSBiZWxvdyB0aGUgcHJvbXB0LiBGb3IgZXhhbXBsZSwgZm9yIHRoZSBgQWxsZXlgIGJhbmsgc3RhdGVtZW50OgoKICFbQ2xpY2sgdG8gZW5sYXJnZV0oaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NlbnNpYmxlLWhxL3NlbnNpYmxlLWRvY3MvbWFpbi9yZWFkbWUtc3luYy9hc3NldHMvdjAvaW1hZ2VzL2ZpbmFsL3F1aWNrc3RhcnRfbGxtXzUucG5nKSAKCiMjIyBBdXRvLWV4dHJhY3QgIGRhdGEKClRvIGV4dHJhY3QgZG9jdW1lbnQgZGF0YSBieSBhdXRvbWF0aWNhbGx5IGF1dGhvcmluZyBwcm9tcHRzLCB0YWtlIHRoZSBmb2xsb3dpbmcgc3RlcHM6CgoxLiBDbGljayAqKlN1Z2dlc3QgcXVlcmllcyoqLiBTZW5zaWJsZSBzdWdnZXN0cyByZWxldmFudCBmYWN0cyB0byBleHRyYWN0LgoyLiBTZWxlY3QgdGhlIGZhY3RzIHRoYXQgeW91IHdhbnQgdG8gZXh0cmFjdCBmcm9tIHRoZSBkb2N1bWVudCwgdGhlbiBjbGljayAqKkFkZCBzZWxlY3RlZCoqOgoKICFbQ2xpY2sgdG8gZW5sYXJnZV0oaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NlbnNpYmxlLWhxL3NlbnNpYmxlLWRvY3MvbWFpbi9yZWFkbWUtc3luYy9hc3NldHMvdjAvaW1hZ2VzL2ZpbmFsL3F1aWNrc3RhcnRfbGxtXzYucG5nKSAKClNlbnNpYmxlIGRpc3BsYXlzIHRoZSBhdXRvLWdlbmVyYXRlZCBwcm9tcHRzIGFuZCBleHRyYWN0ZWQgZGF0YToKCiAhW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC9xdWlja3N0YXJ0X2xsbV83LnBuZykgCgojIyMgRXh0cmFjdCBhIHRhYmxlCgpTbyBmYXIsIHlvdSd2ZSBleHRyYWN0ZWQgc2hvcnQsIHNpbXBsZSBmYWN0cy4gTm93IGxldCdzIGV4dHJhY3QgbW9yZSBjb21wbGV4IGRhdGEsIHN1Y2ggYXMgdGFibGVzIGFuZCBsaXN0cy4gVG8gZXh0cmFjdCBhIHRhYmxlLCB0YWtlIHRoZSBmb2xsb3dpbmcgc3RlcHM6CgotIENsaWNrICoqQmFjayB0byBmaWVsZHMqKi4KCi0gQ2xpY2sgKipUYWJsZSoqCgohW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC9xdWlja3N0YXJ0X2xsbV8xMC5wbmcpCgotIFRvIGV4dHJhY3QgdGhlIGFjY291bnQgYWN0aXZpdHkgZm9yIHRoZSBzYXZpbmdzIGFjY291bnQsIGNvbmZpZ3VyZSB0aGUgdGFibGUgYXMgc2hvd24gaW4gdGhlIGZvbGxvd2luZyBpbWFnZS4gQ29uZmlndXJlIGEgcXVlcnkgZm9yIGVhY2ggY29sdW1uIGluIHRoZSB0YWJsZSwgZm9yIGV4YW1wbGUsIGBjcmVkaXRzYCwgYGRlYml0c2AsIGFuZCBgYmFsYW5jZWAuCgohW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC9xdWlja3N0YXJ0X2xsbV8xMS5wbmcpCgotIFNjcm9sbCBkb3duIHRoZSByaWdodCBwYW5lIGFuZCBjbGljayAqKkV4dHJhY3QqKi4gU2Vuc2libGUgZGlzcGxheXMgdGhlIGV4dHJhY3RlZCBkYXRhOgoKIVtDbGljayB0byBlbmxhcmdlXShodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc2Vuc2libGUtaHEvc2Vuc2libGUtZG9jcy9tYWluL3JlYWRtZS1zeW5jL2Fzc2V0cy92MC9pbWFnZXMvZmluYWwvcXVpY2tzdGFydF9sbG1fMTIucG5nKQoKICAgSXQgbG9va3MgbGlrZSB5b3VyIHByb21wdCB3YXMgc3VjY2Vzc2Z1bCBhdCBleHRyYWN0aW5nIHRoZSBhY2NvdW50IGFjdGl2aXR5LiBHcmVhdCEgCgojIyBQdWJsaXNoIHRoZSBwcm9tcHRzIGFuZCBpbnRlZ3JhdGUKClRvIGV4dHJhY3QgZGF0YSBmcm9tIGJhbmsgc3RhdGVtZW50cyBhdCBzY2FsZSBpbiBwcm9kdWN0aW9uLCAgcHVibGlzaCB0aGUgImNvbmZpZyIgY29udGFpbmluZyB5b3VyIHByb21wdC4KCiBDbGljayAqKlB1Ymxpc2ggY29uZmlndXJhdGlvbioqLCBjbGljayAqKlByb2R1Y3Rpb24qKiwgdGhlbiBjbGljayAqKlB1Ymxpc2ggdG8gcHJvZHVjdGlvbioqOgoKIVtDbGljayB0byBlbmxhcmdlXShodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc2Vuc2libGUtaHEvc2Vuc2libGUtZG9jcy9tYWluL3JlYWRtZS1zeW5jL2Fzc2V0cy92MC9pbWFnZXMvZmluYWwvcXVpY2tzdGFydF9pbnN0cnVjdF8xMC5wbmcpCgpOb3cgeW91J3ZlIHB1Ymxpc2hlZCB5b3VyIGNvbmZpZywgeW91IGNhbiBnZXQgZG9jdW1lbnQgZGF0YSBhdCBzY2FsZSB1c2luZyBTZW5zaWJsZSdzIEFQSXMsIFNES3MsIG9yIGJ1bGstdXBsb2FkIFVJLiBQdXQgdGhlIGV4dHJhY3RlZCBkYXRhIHRvIHdvcmsgaW4gRXhjZWwgZmlsZXMsIGRhdGFiYXNlcywgYW5kIG90aGVyIGRlc3RpbmF0aW9ucy4gRm9yIG1vcmUgaW5mb3JhbXRpb24sIHNlZSBbSW50ZWdyYXRpbmddKGRvYzppbnRlZ3JhdGUpLgoKIyMgTmV4dDogTGVhcm4gbW9yZSBhYm91dCBleHRyYWN0aW9uCgotIFNlZSBbcHJvbXB0IGF1dGhvcmluZyB0aXBzXShkb2M6aW5zdHJ1Y3QpCi0gRm9yIGFkdmFuY2VkIGV4dHJhY3Rpb24gc3RyYXRlZ2llcywgc2VlIFtDaG9vc2luZyBhbiBleHRyYWN0aW9uIGFwcHJvYWNoXShkb2M6YXV0aG9yKQoKCgoKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwIQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABYdAAAAAAAAFh0AAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "v0/senseml-reference/5000 - preprocessors/index.md",
			"settings":
			{
				"buffer_size": 3782,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					20,
					2,
					"left_delete",
					null,
					"AgAAALYHAAAAAAAAtgcAAAAAAAC1AAAAfCAqKltQYWdlIEZpbHRlcl0oZG9jOnBhZ2UtZmlsdGVyKSoqICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEZpbHRlcnMgb3V0IGxvdy1zY29yaW5nIHBhZ2VzIGdpdmVuIGEgYmFnIG9mIHRhcmdldCB0ZXJtcyBhbmQgc3RvcCB0ZXJtcy4gfLUHAAAAAAAAtQcAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALYHAAAAAAAAawgAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAqDgAALS0tCnRpdGxlOiAiUHJlcHJvY2Vzc29ycyIKaGlkZGVuOiBmYWxzZQotLS0KVXNlIHRoZSBmb2xsb3dpbmcgcHJlcHJvY2Vzc29ycyB0byBjbGVhbiB1cCB5b3VyIGRvY3VtZW50cyBiZWZvcmUgZXh0cmFjdGluZyBzdHJ1Y3R1cmVkIGRhdGEuIFByZXByb2Nlc3NvcnMgZXhlY3V0ZSBpbiB0aGUgb3JkZXIgeW91IGRlZmluZSB0aGVtIGluIGFuIGFycmF5LgoKCgp8IFByZXByb2Nlc3NvciAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSW1hZ2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTm90ZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8CnwgKipbRGVza2V3XShkb2M6ZGVza2V3KSoqICAgICAgICAgICAgICAgfCAhW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC90aHVtYm5haWxfZGVza2V3LnBuZykgfCBDb3JyZWN0cyB0aGUgYWxpZ25tZW50IG9mIGRvY3VtZW50cyB0aGF0IGFyZSBza2V3ZWQsIGZvciBleGFtcGxlIGFzIGEgcmVzdWx0IG9mIGJlaW5nIHBob3RvZ3JhcGhlZCBhdCBhbiBhbmdsZSBpbnN0ZWFkIG9mIHN0cmFpZ2h0IG9uLiB8CnwgKipbTGlnYXR1cmVdKGRvYzpsaWdhdHVyZSkqKiAgICAgICAgICAgfCAhW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC90aHVtYm5haWxfbGlnYXR1cmUucG5nKSB8IEludGVsbGlnZW50bHkgcmVwbGFjZXMgVW5pY29kZSBsaWdhdHVyZXMgaW4gYSB0ZXh0IGV4dHJhY3Rpb24uIHwKfCAqKltNZXJnZSBMaW5lc10oZG9jOm1lcmdlLWxpbmVzKSoqICAgICB8ICFbQ2xpY2sgdG8gZW5sYXJnZV0oaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NlbnNpYmxlLWhxL3NlbnNpYmxlLWRvY3MvbWFpbi9yZWFkbWUtc3luYy9hc3NldHMvdjAvaW1hZ2VzL2ZpbmFsL21lcmdlX2xpbmVzX292ZXJzcGxpdF8xLnBuZykgfCBDb3JyZWN0cyBvdmVyc3BsaXQgbGluZXMuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAp8ICoqW05MUF0oZG9jOm5scCkqKiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQWR2YW5jZWQgcHJvbXB0IGNvbmZpZ3VyYXRpb24gZm9yIGVhY2ggbGFyZ2UgbGFuZ3VhZ2UgbW9kZWwgKExMTSktYmFzZWQgbWV0aG9kIGluIGEgY29uZmlnLiB8CnwgKipbT0NSXShkb2M6b2NyLXByZXByb2Nlc3NvcikqKiAgICAgICAgICAgICAgICAgICAgIHwgIVtDbGljayB0byBlbmxhcmdlXShodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc2Vuc2libGUtaHEvc2Vuc2libGUtZG9jcy9tYWluL3JlYWRtZS1zeW5jL2Fzc2V0cy92MC9pbWFnZXMvZmluYWwvdGh1bWJuYWlsX29jci5wbmcpIHwgU2VsZWN0aXZlbHkgT0NScyBwYWdlcyBpbiBkb2N1bWVudHMgY29udGFpbmluZyBhIG1peCBvZiBkaWdpdGFsbHkgZ2VuZXJhdGVkIHRleHQgYW5kIHRleHQgaW1hZ2VzIChzdWNoIGFzIHNjYW5uZWQgdGV4dCkuIElmIHRoZSB3aG9sZSBQREYgaXMgYSBzY2FuLCB5b3UgZG9uJ3QgbmVlZCB0byBjb25maWd1cmUgdGhpcyBwcmVwcm9jZXNzb3IuIHwKfCAqKltQYWdlIFJhbmdlXShkb2M6cGFnZS1yYW5nZSkqKiAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElnbm9yZXMgcGFnZXMgb3V0c2lkZSB0aGUgc3RhcnQgcGFnZSBhbmQgZW5kIHBhZ2UuICAgICAgICAgICB8CnwgKipbUmVtb3ZlIEhlYWRlcl0oZG9jOnJlbW92ZS1oZWFkZXIpKiogfCAhW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC9yZW1vdmVfaGVhZGVyXzEucG5nKSB8IFJlbW92ZXMgcmVwZWF0aW5nIGVsZW1lbnRzIGF0IHRoZSB0b3Agb2YgdGhlIHBhZ2UuIElnbm9yZXMgaGVhZGVyIGVsZW1lbnRzIHRoYXQgb3ZlcmxhcCB3aXRoIHRoZSBwYWdlJ3MgbWFpbiBib2R5LiB8CnwgKipbUmVtb3ZlIEZvb3Rlcl0oZG9jOnJlbW92ZS1mb290ZXIpKiogfCAhW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC9yZW1vdmVfZm9vdGVyXzEucG5nKSB8IFJlbW92ZXMgcmVwZWF0aW5nIGVsZW1lbnRzIGF0IHRoZSBib3R0b20gb2YgdGhlIHBhZ2UuIElnbm9yZXMgZm9vdGVyIGVsZW1lbnRzIHRoYXQgb3ZlcmxhcCB3aXRoIHRoZSBwYWdlJ3MgbWFpbiBib2R5LiB8CnwgKipbUm90YXRlIHBhZ2VdKGRvYzpyb3RhdGUtcGFnZSkqKiAgICAgfCAhW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC9yb3RhdGVfcGFnZV8yLnBuZykgfCBJbiBtb3N0IGNhc2VzLCBTZW5zaWJsZSBjb3JyZWN0cyBwYWdlIHJvdGF0aW9uIGF1dG9tYXRpY2FsbHkuIElmIGl0IGRvZXNuJ3QsIGNvbmZpZ3VyZSB0aGlzIHByZXByb2Nlc3Nvci4gfAp8ICoqW1NjYWxlXShkb2M6c2NhbGUpKiogICAgICAgICAgICAgICAgIHwgIVtDbGljayB0byBlbmxhcmdlXShodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc2Vuc2libGUtaHEvc2Vuc2libGUtZG9jcy9tYWluL3JlYWRtZS1zeW5jL2Fzc2V0cy92MC9pbWFnZXMvZmluYWwvdGh1bWJuYWlsX3NjYWxlLnBuZykgfCBDb3JyZWN0cyB0aGUgc2l6ZSBvZiB0ZXh0IGluIGRvY3VtZW50cyB3aG9zZSBzaXplIHZhcmllcywgZm9yIGV4YW1wbGUgYXMgYSByZXN1bHQgb2YgYmVpbmcgc2Nhbm5lZCBvciBwaG90b2dyYXBoZWQgYXQgZGlmZmVyZW50IHNjYWxlcy4gfAp8ICoqW1NwbGl0IExpbmVzXShkb2M6c3BsaXQtbGluZXMpKiogICAgIHwgIVtDbGljayB0byBlbmxhcmdlXShodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc2Vuc2libGUtaHEvc2Vuc2libGUtZG9jcy9tYWluL3JlYWRtZS1zeW5jL2Fzc2V0cy92MC9pbWFnZXMvZmluYWwvdGh1bWJuYWlsX3NwbGl0X2xpbmVzLnBuZykgfCBDb3JyZWN0cyB1bmRlcnNwbGl0IGxpbmVzLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAoKCgoAAAAAAAAAAOAOAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALUHAAAAAAAAtQcAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"revert",
					null,
					"BAAAAAAAAAAAAAAAAAAAAAAAAADgDgAALS0tCnRpdGxlOiAiUHJlcHJvY2Vzc29ycyIKaGlkZGVuOiBmYWxzZQotLS0KVXNlIHRoZSBmb2xsb3dpbmcgcHJlcHJvY2Vzc29ycyB0byBjbGVhbiB1cCB5b3VyIGRvY3VtZW50cyBiZWZvcmUgZXh0cmFjdGluZyBzdHJ1Y3R1cmVkIGRhdGEuIFByZXByb2Nlc3NvcnMgZXhlY3V0ZSBpbiB0aGUgb3JkZXIgeW91IGRlZmluZSB0aGVtIGluIGFuIGFycmF5LgoKCgp8IFByZXByb2Nlc3NvciAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSW1hZ2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTm90ZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8CnwgKipbRGVza2V3XShkb2M6ZGVza2V3KSoqICAgICAgICAgICAgICAgfCAhW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC90aHVtYm5haWxfZGVza2V3LnBuZykgfCBDb3JyZWN0cyB0aGUgYWxpZ25tZW50IG9mIGRvY3VtZW50cyB0aGF0IGFyZSBza2V3ZWQsIGZvciBleGFtcGxlIGFzIGEgcmVzdWx0IG9mIGJlaW5nIHBob3RvZ3JhcGhlZCBhdCBhbiBhbmdsZSBpbnN0ZWFkIG9mIHN0cmFpZ2h0IG9uLiB8CnwgKipbTGlnYXR1cmVdKGRvYzpsaWdhdHVyZSkqKiAgICAgICAgICAgfCAhW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC90aHVtYm5haWxfbGlnYXR1cmUucG5nKSB8IEludGVsbGlnZW50bHkgcmVwbGFjZXMgVW5pY29kZSBsaWdhdHVyZXMgaW4gYSB0ZXh0IGV4dHJhY3Rpb24uIHwKfCAqKltNZXJnZSBMaW5lc10oZG9jOm1lcmdlLWxpbmVzKSoqICAgICB8ICFbQ2xpY2sgdG8gZW5sYXJnZV0oaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NlbnNpYmxlLWhxL3NlbnNpYmxlLWRvY3MvbWFpbi9yZWFkbWUtc3luYy9hc3NldHMvdjAvaW1hZ2VzL2ZpbmFsL21lcmdlX2xpbmVzX292ZXJzcGxpdF8xLnBuZykgfCBDb3JyZWN0cyBvdmVyc3BsaXQgbGluZXMuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAp8ICoqW05MUF0oZG9jOm5scCkqKiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQWR2YW5jZWQgcHJvbXB0IGNvbmZpZ3VyYXRpb24gZm9yIGVhY2ggbGFyZ2UgbGFuZ3VhZ2UgbW9kZWwgKExMTSktYmFzZWQgbWV0aG9kIGluIGEgY29uZmlnLiB8CnwgKipbT0NSXShkb2M6b2NyLXByZXByb2Nlc3NvcikqKiAgICAgICAgICAgICAgICAgICAgIHwgIVtDbGljayB0byBlbmxhcmdlXShodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc2Vuc2libGUtaHEvc2Vuc2libGUtZG9jcy9tYWluL3JlYWRtZS1zeW5jL2Fzc2V0cy92MC9pbWFnZXMvZmluYWwvdGh1bWJuYWlsX29jci5wbmcpIHwgU2VsZWN0aXZlbHkgT0NScyBwYWdlcyBpbiBkb2N1bWVudHMgY29udGFpbmluZyBhIG1peCBvZiBkaWdpdGFsbHkgZ2VuZXJhdGVkIHRleHQgYW5kIHRleHQgaW1hZ2VzIChzdWNoIGFzIHNjYW5uZWQgdGV4dCkuIElmIHRoZSB3aG9sZSBQREYgaXMgYSBzY2FuLCB5b3UgZG9uJ3QgbmVlZCB0byBjb25maWd1cmUgdGhpcyBwcmVwcm9jZXNzb3IuIHwKfCAqKltQYWdlIEZpbHRlcl0oZG9jOnBhZ2UtZmlsdGVyKSoqICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEZpbHRlcnMgb3V0IGxvdy1zY29yaW5nIHBhZ2VzIGdpdmVuIGEgYmFnIG9mIHRhcmdldCB0ZXJtcyBhbmQgc3RvcCB0ZXJtcy4gfAp8ICoqW1BhZ2UgUmFuZ2VdKGRvYzpwYWdlLXJhbmdlKSoqICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSWdub3JlcyBwYWdlcyBvdXRzaWRlIHRoZSBzdGFydCBwYWdlIGFuZCBlbmQgcGFnZS4gICAgICAgICAgIHwKfCAqKltSZW1vdmUgSGVhZGVyXShkb2M6cmVtb3ZlLWhlYWRlcikqKiB8ICFbQ2xpY2sgdG8gZW5sYXJnZV0oaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NlbnNpYmxlLWhxL3NlbnNpYmxlLWRvY3MvbWFpbi9yZWFkbWUtc3luYy9hc3NldHMvdjAvaW1hZ2VzL2ZpbmFsL3JlbW92ZV9oZWFkZXJfMS5wbmcpIHwgUmVtb3ZlcyByZXBlYXRpbmcgZWxlbWVudHMgYXQgdGhlIHRvcCBvZiB0aGUgcGFnZS4gSWdub3JlcyBoZWFkZXIgZWxlbWVudHMgdGhhdCBvdmVybGFwIHdpdGggdGhlIHBhZ2UncyBtYWluIGJvZHkuIHwKfCAqKltSZW1vdmUgRm9vdGVyXShkb2M6cmVtb3ZlLWZvb3RlcikqKiB8ICFbQ2xpY2sgdG8gZW5sYXJnZV0oaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NlbnNpYmxlLWhxL3NlbnNpYmxlLWRvY3MvbWFpbi9yZWFkbWUtc3luYy9hc3NldHMvdjAvaW1hZ2VzL2ZpbmFsL3JlbW92ZV9mb290ZXJfMS5wbmcpIHwgUmVtb3ZlcyByZXBlYXRpbmcgZWxlbWVudHMgYXQgdGhlIGJvdHRvbSBvZiB0aGUgcGFnZS4gSWdub3JlcyBmb290ZXIgZWxlbWVudHMgdGhhdCBvdmVybGFwIHdpdGggdGhlIHBhZ2UncyBtYWluIGJvZHkuIHwKfCAqKltSb3RhdGUgcGFnZV0oZG9jOnJvdGF0ZS1wYWdlKSoqICAgICB8ICFbQ2xpY2sgdG8gZW5sYXJnZV0oaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NlbnNpYmxlLWhxL3NlbnNpYmxlLWRvY3MvbWFpbi9yZWFkbWUtc3luYy9hc3NldHMvdjAvaW1hZ2VzL2ZpbmFsL3JvdGF0ZV9wYWdlXzIucG5nKSB8IEluIG1vc3QgY2FzZXMsIFNlbnNpYmxlIGNvcnJlY3RzIHBhZ2Ugcm90YXRpb24gYXV0b21hdGljYWxseS4gSWYgaXQgZG9lc24ndCwgY29uZmlndXJlIHRoaXMgcHJlcHJvY2Vzc29yLiB8CnwgKipbU2NhbGVdKGRvYzpzY2FsZSkqKiAgICAgICAgICAgICAgICAgfCAhW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC90aHVtYm5haWxfc2NhbGUucG5nKSB8IENvcnJlY3RzIHRoZSBzaXplIG9mIHRleHQgaW4gZG9jdW1lbnRzIHdob3NlIHNpemUgdmFyaWVzLCBmb3IgZXhhbXBsZSBhcyBhIHJlc3VsdCBvZiBiZWluZyBzY2FubmVkIG9yIHBob3RvZ3JhcGhlZCBhdCBkaWZmZXJlbnQgc2NhbGVzLiB8CnwgKipbU3BsaXQgTGluZXNdKGRvYzpzcGxpdC1saW5lcykqKiAgICAgfCAhW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC90aHVtYm5haWxfc3BsaXRfbGluZXMucG5nKSB8IENvcnJlY3RzIHVuZGVyc3BsaXQgbGluZXMuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CgoKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqDgAAAAAAAAAAAAAAAAAAAAAAACoOAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALUHAAAAAAAAtQcAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAqDgAALS0tCnRpdGxlOiAiUHJlcHJvY2Vzc29ycyIKaGlkZGVuOiBmYWxzZQotLS0KVXNlIHRoZSBmb2xsb3dpbmcgcHJlcHJvY2Vzc29ycyB0byBjbGVhbiB1cCB5b3VyIGRvY3VtZW50cyBiZWZvcmUgZXh0cmFjdGluZyBzdHJ1Y3R1cmVkIGRhdGEuIFByZXByb2Nlc3NvcnMgZXhlY3V0ZSBpbiB0aGUgb3JkZXIgeW91IGRlZmluZSB0aGVtIGluIGFuIGFycmF5LgoKCgp8IFByZXByb2Nlc3NvciAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSW1hZ2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTm90ZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8CnwgKipbRGVza2V3XShkb2M6ZGVza2V3KSoqICAgICAgICAgICAgICAgfCAhW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC90aHVtYm5haWxfZGVza2V3LnBuZykgfCBDb3JyZWN0cyB0aGUgYWxpZ25tZW50IG9mIGRvY3VtZW50cyB0aGF0IGFyZSBza2V3ZWQsIGZvciBleGFtcGxlIGFzIGEgcmVzdWx0IG9mIGJlaW5nIHBob3RvZ3JhcGhlZCBhdCBhbiBhbmdsZSBpbnN0ZWFkIG9mIHN0cmFpZ2h0IG9uLiB8CnwgKipbTGlnYXR1cmVdKGRvYzpsaWdhdHVyZSkqKiAgICAgICAgICAgfCAhW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC90aHVtYm5haWxfbGlnYXR1cmUucG5nKSB8IEludGVsbGlnZW50bHkgcmVwbGFjZXMgVW5pY29kZSBsaWdhdHVyZXMgaW4gYSB0ZXh0IGV4dHJhY3Rpb24uIHwKfCAqKltNZXJnZSBMaW5lc10oZG9jOm1lcmdlLWxpbmVzKSoqICAgICB8ICFbQ2xpY2sgdG8gZW5sYXJnZV0oaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NlbnNpYmxlLWhxL3NlbnNpYmxlLWRvY3MvbWFpbi9yZWFkbWUtc3luYy9hc3NldHMvdjAvaW1hZ2VzL2ZpbmFsL21lcmdlX2xpbmVzX292ZXJzcGxpdF8xLnBuZykgfCBDb3JyZWN0cyBvdmVyc3BsaXQgbGluZXMuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAp8ICoqW05MUF0oZG9jOm5scCkqKiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQWR2YW5jZWQgcHJvbXB0IGNvbmZpZ3VyYXRpb24gZm9yIGVhY2ggbGFyZ2UgbGFuZ3VhZ2UgbW9kZWwgKExMTSktYmFzZWQgbWV0aG9kIGluIGEgY29uZmlnLiB8CnwgKipbT0NSXShkb2M6b2NyLXByZXByb2Nlc3NvcikqKiAgICAgICAgICAgICAgICAgICAgIHwgIVtDbGljayB0byBlbmxhcmdlXShodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc2Vuc2libGUtaHEvc2Vuc2libGUtZG9jcy9tYWluL3JlYWRtZS1zeW5jL2Fzc2V0cy92MC9pbWFnZXMvZmluYWwvdGh1bWJuYWlsX29jci5wbmcpIHwgU2VsZWN0aXZlbHkgT0NScyBwYWdlcyBpbiBkb2N1bWVudHMgY29udGFpbmluZyBhIG1peCBvZiBkaWdpdGFsbHkgZ2VuZXJhdGVkIHRleHQgYW5kIHRleHQgaW1hZ2VzIChzdWNoIGFzIHNjYW5uZWQgdGV4dCkuIElmIHRoZSB3aG9sZSBQREYgaXMgYSBzY2FuLCB5b3UgZG9uJ3QgbmVlZCB0byBjb25maWd1cmUgdGhpcyBwcmVwcm9jZXNzb3IuIHwKfCAqKltQYWdlIFJhbmdlXShkb2M6cGFnZS1yYW5nZSkqKiAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElnbm9yZXMgcGFnZXMgb3V0c2lkZSB0aGUgc3RhcnQgcGFnZSBhbmQgZW5kIHBhZ2UuICAgICAgICAgICB8CnwgKipbUmVtb3ZlIEhlYWRlcl0oZG9jOnJlbW92ZS1oZWFkZXIpKiogfCAhW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC9yZW1vdmVfaGVhZGVyXzEucG5nKSB8IFJlbW92ZXMgcmVwZWF0aW5nIGVsZW1lbnRzIGF0IHRoZSB0b3Agb2YgdGhlIHBhZ2UuIElnbm9yZXMgaGVhZGVyIGVsZW1lbnRzIHRoYXQgb3ZlcmxhcCB3aXRoIHRoZSBwYWdlJ3MgbWFpbiBib2R5LiB8CnwgKipbUmVtb3ZlIEZvb3Rlcl0oZG9jOnJlbW92ZS1mb290ZXIpKiogfCAhW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC9yZW1vdmVfZm9vdGVyXzEucG5nKSB8IFJlbW92ZXMgcmVwZWF0aW5nIGVsZW1lbnRzIGF0IHRoZSBib3R0b20gb2YgdGhlIHBhZ2UuIElnbm9yZXMgZm9vdGVyIGVsZW1lbnRzIHRoYXQgb3ZlcmxhcCB3aXRoIHRoZSBwYWdlJ3MgbWFpbiBib2R5LiB8CnwgKipbUm90YXRlIHBhZ2VdKGRvYzpyb3RhdGUtcGFnZSkqKiAgICAgfCAhW0NsaWNrIHRvIGVubGFyZ2VdKGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zZW5zaWJsZS1ocS9zZW5zaWJsZS1kb2NzL21haW4vcmVhZG1lLXN5bmMvYXNzZXRzL3YwL2ltYWdlcy9maW5hbC9yb3RhdGVfcGFnZV8yLnBuZykgfCBJbiBtb3N0IGNhc2VzLCBTZW5zaWJsZSBjb3JyZWN0cyBwYWdlIHJvdGF0aW9uIGF1dG9tYXRpY2FsbHkuIElmIGl0IGRvZXNuJ3QsIGNvbmZpZ3VyZSB0aGlzIHByZXByb2Nlc3Nvci4gfAp8ICoqW1NjYWxlXShkb2M6c2NhbGUpKiogICAgICAgICAgICAgICAgIHwgIVtDbGljayB0byBlbmxhcmdlXShodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc2Vuc2libGUtaHEvc2Vuc2libGUtZG9jcy9tYWluL3JlYWRtZS1zeW5jL2Fzc2V0cy92MC9pbWFnZXMvZmluYWwvdGh1bWJuYWlsX3NjYWxlLnBuZykgfCBDb3JyZWN0cyB0aGUgc2l6ZSBvZiB0ZXh0IGluIGRvY3VtZW50cyB3aG9zZSBzaXplIHZhcmllcywgZm9yIGV4YW1wbGUgYXMgYSByZXN1bHQgb2YgYmVpbmcgc2Nhbm5lZCBvciBwaG90b2dyYXBoZWQgYXQgZGlmZmVyZW50IHNjYWxlcy4gfAp8ICoqW1NwbGl0IExpbmVzXShkb2M6c3BsaXQtbGluZXMpKiogICAgIHwgIVtDbGljayB0byBlbmxhcmdlXShodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc2Vuc2libGUtaHEvc2Vuc2libGUtZG9jcy9tYWluL3JlYWRtZS1zeW5jL2Fzc2V0cy92MC9pbWFnZXMvZmluYWwvdGh1bWJuYWlsX3NwbGl0X2xpbmVzLnBuZykgfCBDb3JyZWN0cyB1bmRlcnNwbGl0IGxpbmVzLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAoKCgoAAAAAAAAAAMYOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ui:",
				"UI: Select Color Scheme"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/franc/Documents/GitHub/sensible-docs",
		"/C/Users/franc/Documents/GitHub/sensible-docs/.github",
		"/C/Users/franc/Documents/GitHub/sensible-docs/.github/workflows",
		"/C/Users/franc/Documents/GitHub/sensible-docs/scripts",
		"/C/Users/franc/Documents/GitHub/sensible-docs/scripts/check_links",
		"/C/Users/franc/Documents/GitHub/sensible-sdk-js",
		"/C/Users/franc/Documents/GitHub/sensible-api-py"
	],
	"file_history":
	[
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - llm-based-methods/1000 - list.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/6700 - config-settings/1000 - fingerprint.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/7500 - advanced-computed-field-methods/0100 - add-computed-fields.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/8000 - concepts/3700 - ocr.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - llm-based-methods/1500 - query-group.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - field-query-object/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/llm-based extractions/3000 - prompt.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/openapi_extraction.yml",
		"/C/Users/franc/Documents/GitHub/test-docs/mint.json",
		"/C/Users/franc/Documents/GitHub/sensible-docs/openapi_configuration.yml",
		"/C/Users/franc/Documents/GitHub/sensible-docs/openapi_classification.yml",
		"/C/Users/franc/Documents/GitHub/test-mintlify/.github/workflows/check_links.yml",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/6800 - document-type-settings/2000 - ocr-engine.md",
		"/C/Users/franc/Documents/GitHub/test-mintlify/mint.json",
		"/C/Users/franc/Documents/GitHub/docs/snippets/param1.md",
		"/C/Users/franc/Documents/GitHub/docs/snippets/snippet1.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/4000 - quick-extraction/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/llm-based extractions/instruct/1000 - query-group-tips.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - llm-based-methods/1000 - nlp-table.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/llm-based extractions/instruct/3000 - table-tips.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - methods/2200 - draft-text-table.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - methods/1400 - fixed-table.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - methods/1300 - document-range.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/6800 - document-type-settings/1000 - fingerprint-mode.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/.github/workflows/sync_dev_guides_readme.yml",
		"/C/Users/franc/Documents/GitHub/sensible-sdk-js/.gitignore",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - field-query-object/1300 - types.md",
		"/C/Users/franc/Documents/GitHub/docs/mint.json",
		"/C/Users/franc/Documents/GitHub/bekindtoyourspine/CNAME",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - methods/2200 - text-table.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - field-query-object/1200 - method.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - methods/1000 - box.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/7000 - deprecated-methods/1500 - deprecated-invoice.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/4000 - quick-extraction/7600 - excel-reference.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/llm-based extractions/instruct/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/best-practices/5000 - guides/1000 - performance.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - natural-language-methods/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/welcome/00 - draft-overview.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/welcome/2000 - getting-started-ai.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/8000 - concepts/0300 - accuracy-measures.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/7000 - deprecated-methods/1500 - deprecated-query.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/5000 - preprocessors/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - natural-language-methods/1500 - query-group.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - natural-language-methods/1000 - list.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/1000 - senseml-reference-introduction.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/layout-based-extractions/1000 - getting-started.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/best-practices/3000 - confidence.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - methods/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/7000 - deprecated-methods/2100 - deprecated-table.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/7000 - deprecated-methods/2000 - deprecated-tfidf.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/7000 - deprecated-methods/1000 - deprecated-key-value.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/5000 - preprocessors/1100 - page-filter.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - natural-language-methods/2000 - topic.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - methods/1500 - invoice.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/welcome/6000 - author.md",
		"/C/Users/franc/Documents/GitHub/sensible-sdk-js/README.md",
		"/C/Users/franc/Documents/GitHub/sensible-api-py/README.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/8000 - concepts/4600 - table-methods.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - natural-language-methods/1600 - summarizer.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - natural-language-methods/1000 - nlp-table.md",
		"/C/Users/franc/Documents/GitHub/sensible-code-examples/readme.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/8000 - concepts/1600 - file-types.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/7500 - advanced-computed-field-methods/0700 - get-file-metadata.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/6800 - document-type-settings/4000 - ocr-level.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/6500 - sections/6000 - sections-example-table-grid.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/6500 - sections/4000 - sections-example-nested-columns.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/2000 - zapier/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/2000 - zapier/1000 - zapier-getting-started.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/best-practices/5000 - guides/3000 - go-live.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/best-practices/5000 - guides/2000 - troubleshoot.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/best-practices/5000 - guides/1000 - test-before-integrating-configs.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/6700 - config-settings/2000 - verbosity.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - methods/2100 - deprecated-table.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/llm-based extractions/instruct/2000 - list-tips.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/welcome/cheat/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/6000 - computed-field-methods/1500 - zip.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - methods/2000 - row.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - natural-language-methods/1500 - draft-group.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/3000 - natural-language-methods/1500 - query.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/llm-based extractions/instruct/1000 - query-tips.md",
		"/C/Users/franc/Downloads/for the following table represented in json,",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/5000 - preprocessors/1060 - nlp.md",
		"/C/Users/franc/Downloads/bal",
		"/C/Users/franc/Downloads/balasdf",
		"/C/Users/franc/Downloads/asdfasdf",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - field-query-object/1100 - match.md",
		"/C/Users/franc/Downloads/fdas.yaml",
		"/C/Users/franc/Documents/GitHub/sensible/.git/info/exclude",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/assets/v0/json/verbose_extraction_3_verbosity.json",
		"/C/Users/franc/Pictures/greenshot pics/2023-12-15 12_52_16-Franco Fontana _ Basilicata (1986) _ Available for Sale _ Artsy.png",
		"/C/Users/franc/Documents/GitHub/sensible-code-examples/node/readme.md",
		"/C/Users/franc/Documents/GitHub/sensible-code-examples/python/readme.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/welcome/3000 - integrate.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/layout-based-extractions/2000 - library-quickstart.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/scripts/check_links/check_links.rb",
		"/C/Users/franc/Documents/GitHub/sensible-docs/.github/workflows/check_links.yml",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/best-practices/4000 - validate-extractions.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/6500 - sections/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/api/1000 - api-tutorial/1000 - api-tutorial-sync.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/2000 - field-query-object/1000 - anchor.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/senseml-reference/8000 - concepts/3600 - section-nuances.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/3000 - quickstart.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/README.md",
		"/?wsl.localhost/Ubuntu-20.04/home/franc/sensible-typescript/extract_dir_1_excel.mjs",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/draft-python.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/api/1000 - api-tutorial/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/layout-based-extractions/5000 - concepts/1600 - file-types.md",
		"/C/Users/franc/Documents/GitHub/sensible-api-py/draft_python.md",
		"/C/Users/franc/Documents/GitHub/sensible-code-examples/python/extract_doc.py",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/sdk-quickstarts.md",
		"/C/ProgramData/Vanta/vanta.conf",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/sdk-reference/draft-node-example.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/sdk-reference/sdk-node.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/write-prompts/instruct/1000 - query-tips.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/SDK quickstarts/index.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/SDK quickstarts/quickstart-node.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/sdk-reference/draft-javascript-example.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/sdk-reference/sdk-javascript.md",
		"/C/Users/franc/Documents/GitHub/sensible-docs/readme-sync/v0/integrations/SDK quickstarts/quickstart-javascript.md"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 125.6,
		"where_history":
		[
			"*.md, *.yaml, *.yml",
			"*.md, ",
			"*.md, *.yaml, *.yml",
			"*.md",
			"*.md, *.yaml, *.yml",
			"*.md, ",
			"*.md, *.yaml, *.yml",
			"*.md, ",
			"*.md, *.yaml, *.yml",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync, C:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js, C:\\Users\\franc\\Documents\\GitHub\\sensible-code-examples,*.md, *.yaml, *.yml",
			"<open files>",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync, C:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js, C:\\Users\\franc\\Documents\\GitHub\\sensible-code-examples,*.md, *.yaml, *.yml",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\sdk-reference\\, C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\integrations\\",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0\\sdk-reference\\",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync, C:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js, C:\\Users\\franc\\Documents\\GitHub\\sensible-code-examples,*.md, *.yaml, *.yml",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync, C:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js,*.md, *.yaml, *.yml",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0, C:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js,*.md, *.yaml, *.yml",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0, C:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js",
			"C:\\Users\\franc\\Documents\\GitHub\\sensible-docs\\readme-sync\\v0; C:\\Users\\franc\\Documents\\GitHub\\sensible-sdk-js"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"llmEngine",
			"llm_engine",
			"contain",
			"extarctfromurlresponse",
			"singleextractionresponse",
			"doc:bag-of-words",
			"bag of words",
			"  !",
			"page fil",
			"page filter",
			"instruct",
			"capture",
			"threshold",
			"fallback column",
			"fallback",
			"vision preview",
			"for the ocr e",
			"versus embe",
			"GetAllDocumentTypes",
			"PutDocumentType",
			"PutConfiguration",
			"schema:",
			"schema",
			"get",
			"\"Add Computed",
			"docname",
			"DocumentName",
			"schemas:",
			"DocumentName",
			"/DocumentN",
			"DocumentName",
			"if you specify a match array",
			"if you specify a match",
			"thorough",
			"documentname",
			"schemas:",
			"portfolio",
			"types:",
			"PortfolioBase:",
			"PortfolioBase",
			"documents:",
			"environment:",
			"PortfolioBase",
			"documentName",
			"document_name",
			": \"query g",
			": \"query",
			": \"NL",
			": \"text",
			": \"fixed",
			": \"document r",
			"type settings tab:",
			") method",
			"] method",
			"method]",
			"instruct",
			"up to 20 pages",
			"notes .",
			"ignore",
			"put",
			"document typ",
			"date",
			"iso",
			"continuation_to",
			"cutoff",
			"cutoff_d",
			"cutoff_",
			"end_date",
			"_crop",
			"iso",
			"multimodal",
			"ocr",
			"doc:ocr)",
			"doc:ocr",
			"description:",
			"/topic",
			"doc:topic",
			"detectmulti",
			"turbo",
			"turo",
			"query-group#exa",
			"query-group#",
			"handwriting",
			"direct-text",
			"xmajor",
			"superscr",
			"bounding box",
			"doc:invoice",
			"invoice",
			"hard to mat",
			"stopoffsety",
			"\"all\"",
			"layout based",
			"are also",
			"language-",
			"Query Group method-methods",
			"method-method",
			"based",
			"power",
			"powered",
			"LLM-powered",
			"powered",
			"large-language",
			"signature",
			"paragraph",
			"large-language",
			"doc:methods#",
			"methods#",
			"large-lan",
			"nlp [^t]",
			"nlp ^[t]",
			"nlp",
			"llm",
			"natural",
			"llm-based-methods",
			"[Natural-language methods](doc:llm-based-methods)",
			"llm-based-methods",
			"llm-based",
			"[NLP methods](doc:llm-based-methods)",
			"[Natural language methods](doc:llm-based-methods)",
			"doc:llm-based-methods",
			"doc:natural-language-methods",
			"natural-language",
			"or query",
			"natural-language",
			"natural language",
			"natural-language",
			"api"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"doc:deprecated-bag-of-words",
			"!",
			"doc:deprecated-invoice",
			"LLM-based",
			"large language",
			"[LLM-based methods](doc:llm-based-methods)",
			"doc:llm-based-methods",
			"Query Group method",
			"(doc:query-group#",
			"[Query Group](doc:query-group#",
			"[Query Group](doc:query-group-tips)",
			"[Query Group](doc:query-group)",
			"model",
			"insurer",
			"**Publish configuration**",
			"from sensibleapi",
			"index.py",
			"Python",
			"size and types",
			"https://github.com/sensible-hq/sensible-api-js#readme",
			"Node",
			"node",
			"-node",
			"node",
			"Node",
			"node",
			"doc:config-settings"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/Users/franc/Documents/GitHub/sensible-docs/.github/workflows/style_images.yml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 711,
						"regions":
						{
						},
						"selection":
						[
							[
								526,
								526
							]
						],
						"settings":
						{
							"syntax": "Packages/YAML/YAML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 150.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Users/franc/Documents/GitHub/sensible-docs/scripts/style_images.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 819,
						"regions":
						{
						},
						"selection":
						[
							[
								538,
								538
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Bash.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 125695,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions": "0gAAAAIDAAAAAAAADQMAAAAAAAAAAAAAAADwv04GAAAAAAAAWQYAAAAAAAAAAAAAAADwv20HAAAAAAAAdQcAAAAAAAAAAAAAAADwv+IIAAAAAAAA5QgAAAAAAAAAAAAAAADwv8YKAAAAAAAAyQoAAAAAAAAAAAAAAADwv4oMAAAAAAAAjQwAAAAAAAAAAAAAAADwvxEOAAAAAAAAFA4AAAAAAAAAAAAAAADwvz8QAAAAAAAAQhAAAAAAAAAAAAAAAADwv9MRAAAAAAAA1hEAAAAAAAAAAAAAAADwv58TAAAAAAAAohMAAAAAAAAAAAAAAADwv2oVAAAAAAAAbRUAAAAAAAAAAAAAAADwv8AWAAAAAAAAwxYAAAAAAAAAAAAAAADwv5IYAAAAAAAAlRgAAAAAAAAAAAAAAADwv6saAAAAAAAArhoAAAAAAAAAAAAAAADwv8gcAAAAAAAAyxwAAAAAAAAAAAAAAADwv7wdAAAAAAAAvx0AAAAAAAAAAAAAAADwv/sfAAAAAAAA/h8AAAAAAAAAAAAAAADwvwsjAAAAAAAADiMAAAAAAAAAAAAAAADwv0UlAAAAAAAASCUAAAAAAAAAAAAAAADwv04mAAAAAAAAUSYAAAAAAAAAAAAAAADwv9snAAAAAAAA3icAAAAAAAAAAAAAAADwv8QoAAAAAAAAxygAAAAAAAAAAAAAAADwv9UpAAAAAAAA2CkAAAAAAAAAAAAAAADwvyArAAAAAAAAIysAAAAAAAAAAAAAAADwvxEuAAAAAAAAHS4AAAAAAAAAAAAAAADwv/EuAAAAAAAA/S4AAAAAAAAAAAAAAADwvwYyAAAAAAAAEjIAAAAAAAAAAAAAAADwv/EyAAAAAAAA/TIAAAAAAAAAAAAAAADwv2E1AAAAAAAAbTUAAAAAAAAAAAAAAADwv9A6AAAAAAAA3DoAAAAAAAAAAAAAAADwv6s7AAAAAAAAtzsAAAAAAAAAAAAAAADwv2Y/AAAAAAAAcj8AAAAAAAAAAAAAAADwvxBAAAAAAAAAHEAAAAAAAAAAAAAAAADwv+VFAAAAAAAA8UUAAAAAAAAAAAAAAADwvzRGAAAAAAAAQEYAAAAAAAAAAAAAAADwv95GAAAAAAAA6kYAAAAAAAAAAAAAAADwvzpJAAAAAAAASkkAAAAAAAAAAAAAAADwvxpKAAAAAAAAKkoAAAAAAAAAAAAAAADwv5VMAAAAAAAApUwAAAAAAAAAAAAAAADwv2BNAAAAAAAAcE0AAAAAAAAAAAAAAADwv7pQAAAAAAAAylAAAAAAAAAAAAAAAADwv6VRAAAAAAAAtVEAAAAAAAAAAAAAAADwvyhUAAAAAAAAOFQAAAAAAAAAAAAAAADwv5dZAAAAAAAAp1kAAAAAAAAAAAAAAADwv3JaAAAAAAAAgloAAAAAAAAAAAAAAADwvyBeAAAAAAAAMF4AAAAAAAAAAAAAAADwv8peAAAAAAAA2l4AAAAAAAAAAAAAAADwvwJmAAAAAAAACWYAAAAAAAAAAAAAAADwv4ZnAAAAAAAAjWcAAAAAAAAAAAAAAADwv61oAAAAAAAAtGgAAAAAAAAAAAAAAADwv8tpAAAAAAAA0mkAAAAAAAAAAAAAAADwv8NrAAAAAAAAymsAAAAAAAAAAAAAAADwv5FtAAAAAAAAmG0AAAAAAAAAAAAAAADwv6xuAAAAAAAAs24AAAAAAAAAAAAAAADwv5xvAAAAAAAAo28AAAAAAAAAAAAAAADwv9NwAAAAAAAA2nAAAAAAAAAAAAAAAADwvwt0AAAAAAAAEnQAAAAAAAAAAAAAAADwv1h4AAAAAAAAX3gAAAAAAAAAAAAAAADwv7h8AAAAAAAAv3wAAAAAAAAAAAAAAADwv9B9AAAAAAAA130AAAAAAAAAAAAAAADwv/iBAAAAAAAA/4EAAAAAAAAAAAAAAADwv6aCAAAAAAAArYIAAAAAAAAAAAAAAADwv7mDAAAAAAAAwIMAAAAAAAAAAAAAAADwv2eFAAAAAAAAboUAAAAAAAAAAAAAAADwv26IAAAAAAAAdYgAAAAAAAAAAAAAAADwv+2KAAAAAAAA9IoAAAAAAAAAAAAAAADwv0qMAAAAAAAAUYwAAAAAAAAAAAAAAADwvzmOAAAAAAAAQI4AAAAAAAAAAAAAAADwv2OPAAAAAAAAao8AAAAAAAAAAAAAAADwv9ySAAAAAAAA45IAAAAAAAAAAAAAAADwv4WVAAAAAAAAjJUAAAAAAAAAAAAAAADwv+SWAAAAAAAA65YAAAAAAAAAAAAAAADwvwOYAAAAAAAACpgAAAAAAAAAAAAAAADwv0aZAAAAAAAATZkAAAAAAAAAAAAAAADwv/iZAAAAAAAA/5kAAAAAAAAAAAAAAADwv6+cAAAAAAAAtpwAAAAAAAAAAAAAAADwvzefAAAAAAAAPp8AAAAAAAAAAAAAAADwv42fAAAAAAAAlJ8AAAAAAAAAAAAAAADwvzugAAAAAAAAQqAAAAAAAAAAAAAAAADwv0SjAAAAAAAAS6MAAAAAAAAAAAAAAADwvzSlAAAAAAAAO6UAAAAAAAAAAAAAAADwv0qmAAAAAAAAUaYAAAAAAAAAAAAAAADwv5mmAAAAAAAAoKYAAAAAAAAAAAAAAADwv4CoAAAAAAAAh6gAAAAAAAAAAAAAAADwv/eoAAAAAAAA/qgAAAAAAAAAAAAAAADwv9CtAAAAAAAA160AAAAAAAAAAAAAAADwvzm1AAAAAAAAQLUAAAAAAAAAAAAAAADwv5K5AAAAAAAAmbkAAAAAAAAAAAAAAADwv1e9AAAAAAAAXr0AAAAAAAAAAAAAAADwv2TAAAAAAAAAa8AAAAAAAAAAAAAAAADwv/LBAAAAAAAA+cEAAAAAAAAAAAAAAADwv87HAAAAAAAA1ccAAAAAAAAAAAAAAADwv8fJAAAAAAAAzskAAAAAAAAAAAAAAADwv+7OAAAAAAAA9c4AAAAAAAAAAAAAAADwv03PAAAAAAAAVM8AAAAAAAAAAAAAAADwvzzTAAAAAAAAQ9MAAAAAAAAAAAAAAADwv9PXAAAAAAAA2tcAAAAAAAAAAAAAAADwv4HcAAAAAAAAiNwAAAAAAAAAAAAAAADwvxTiAAAAAAAAG+IAAAAAAAAAAAAAAADwv9TjAAAAAAAA2+MAAAAAAAAAAAAAAADwv1rlAAAAAAAAYeUAAAAAAAAAAAAAAADwvx7nAAAAAAAAJecAAAAAAAAAAAAAAADwv7fpAAAAAAAAvukAAAAAAAAAAAAAAADwv1jsAAAAAAAAX+wAAAAAAAAAAAAAAADwv73sAAAAAAAAxOwAAAAAAAAAAAAAAADwv0vuAAAAAAAAUu4AAAAAAAAAAAAAAADwv7DuAAAAAAAAt+4AAAAAAAAAAAAAAADwvz7wAAAAAAAARfAAAAAAAAAAAAAAAADwv1PzAAAAAAAAWvMAAAAAAAAAAAAAAADwv2D2AAAAAAAAZ/YAAAAAAAAAAAAAAADwv5X2AAAAAAAAnPYAAAAAAAAAAAAAAADwv+/3AAAAAAAA9vcAAAAAAAAAAAAAAADwvyT4AAAAAAAAK/gAAAAAAAAAAAAAAADwv5f5AAAAAAAAnvkAAAAAAAAAAAAAAADwvxP6AAAAAAAAGvoAAAAAAAAAAAAAAADwv5b8AAAAAAAAnfwAAAAAAAAAAAAAAADwv8v+AAAAAAAA0v4AAAAAAAAAAAAAAADwvxIBAQAAAAAAGQEBAAAAAAAAAAAAAADwv0YBAQAAAAAATQEBAAAAAAAAAAAAAADwvwEDAQAAAAAACAMBAAAAAAAAAAAAAADwvyEDAQAAAAAAKAMBAAAAAAAAAAAAAADwv6YJAQAAAAAArQkBAAAAAAAAAAAAAADwvwAPAQAAAAAABw8BAAAAAAAAAAAAAADwv38PAQAAAAAAhg8BAAAAAAAAAAAAAADwvz8TAQAAAAAARhMBAAAAAAAAAAAAAADwv7MUAQAAAAAAuhQBAAAAAAAAAAAAAADwv58WAQAAAAAAphYBAAAAAAAAAAAAAADwv74YAQAAAAAAxRgBAAAAAAAAAAAAAADwvyQcAQAAAAAAKxwBAAAAAAAAAAAAAADwv8ceAQAAAAAAzh4BAAAAAAAAAAAAAADwvzUfAQAAAAAAPB8BAAAAAAAAAAAAAADwv34fAQAAAAAAhR8BAAAAAAAAAAAAAADwvz4hAQAAAAAARSEBAAAAAAAAAAAAAADwv0wkAQAAAAAAUyQBAAAAAAAAAAAAAADwv50mAQAAAAAApCYBAAAAAAAAAAAAAADwv08sAQAAAAAAViwBAAAAAAAAAAAAAADwv1EwAQAAAAAAWDABAAAAAAAAAAAAAADwv3U0AQAAAAAAfDQBAAAAAAAAAAAAAADwv+U5AQAAAAAA7DkBAAAAAAAAAAAAAADwv3w8AQAAAAAAgzwBAAAAAAAAAAAAAADwv8Y8AQAAAAAAzTwBAAAAAAAAAAAAAADwv5xBAQAAAAAAo0EBAAAAAAAAAAAAAADwv0tCAQAAAAAAUkIBAAAAAAAAAAAAAADwv4VDAQAAAAAAjEMBAAAAAAAAAAAAAADwv8FDAQAAAAAAyEMBAAAAAAAAAAAAAADwv1lGAQAAAAAAYEYBAAAAAAAAAAAAAADwv7ZHAQAAAAAAvUcBAAAAAAAAAAAAAADwv91JAQAAAAAA5EkBAAAAAAAAAAAAAADwv4BLAQAAAAAAh0sBAAAAAAAAAAAAAADwv8FPAQAAAAAAyE8BAAAAAAAAAAAAAADwv7RRAQAAAAAAu1EBAAAAAAAAAAAAAADwvwpUAQAAAAAAEVQBAAAAAAAAAAAAAADwv5tVAQAAAAAAolUBAAAAAAAAAAAAAADwvxdZAQAAAAAAHlkBAAAAAAAAAAAAAADwv4peAQAAAAAAkV4BAAAAAAAAAAAAAADwvzxhAQAAAAAAQ2EBAAAAAAAAAAAAAADwv5hkAQAAAAAAn2QBAAAAAAAAAAAAAADwv61lAQAAAAAAtGUBAAAAAAAAAAAAAADwv05mAQAAAAAAVWYBAAAAAAAAAAAAAADwv0FoAQAAAAAASGgBAAAAAAAAAAAAAADwv5pqAQAAAAAAoWoBAAAAAAAAAAAAAADwv+xrAQAAAAAA82sBAAAAAAAAAAAAAADwv15tAQAAAAAAZW0BAAAAAAAAAAAAAADwv3puAQAAAAAAgW4BAAAAAAAAAAAAAADwvw1vAQAAAAAAFG8BAAAAAAAAAAAAAADwvxpwAQAAAAAAIXABAAAAAAAAAAAAAADwv7FwAQAAAAAAuHABAAAAAAAAAAAAAADwv1BxAQAAAAAAV3EBAAAAAAAAAAAAAADwv3hyAQAAAAAAf3IBAAAAAAAAAAAAAADwv3pzAQAAAAAAgXMBAAAAAAAAAAAAAADwv010AQAAAAAAVHQBAAAAAAAAAAAAAADwv5p1AQAAAAAAoXUBAAAAAAAAAAAAAADwv5l6AQAAAAAAoHoBAAAAAAAAAAAAAADwv6SCAQAAAAAAq4IBAAAAAAAAAAAAAADwvyqOAQAAAAAAMY4BAAAAAAAAAAAAAADwv5ePAQAAAAAAno8BAAAAAAAAAAAAAADwv1mVAQAAAAAAYJUBAAAAAAAAAAAAAADwv+mWAQAAAAAA8JYBAAAAAAAAAAAAAADwv6mYAQAAAAAAsJgBAAAAAAAAAAAAAADwv0+bAQAAAAAAVpsBAAAAAAAAAAAAAADwv56fAQAAAAAApZ8BAAAAAAAAAAAAAADwvxqgAQAAAAAAIaABAAAAAAAAAAAAAADwv4yiAQAAAAAAk6IBAAAAAAAAAAAAAADwv8SjAQAAAAAAy6MBAAAAAAAAAAAAAADwv16lAQAAAAAAZaUBAAAAAAAAAAAAAADwv8qnAQAAAAAA0acBAAAAAAAAAAAAAADwv2mqAQAAAAAAcKoBAAAAAAAAAAAAAADwv8SsAQAAAAAAy6wBAAAAAAAAAAAAAADwv4yxAQAAAAAAk7EBAAAAAAAAAAAAAADwv/qxAQAAAAAAAbIBAAAAAAAAAAAAAADwv0OyAQAAAAAASrIBAAAAAAAAAAAAAADwvwS2AQAAAAAAC7YBAAAAAAAAAAAAAADwv0a6AQAAAAAATboBAAAAAAAAAAAAAADwvwu8AQAAAAAAErwBAAAAAAAAAAAAAADwvyy+AQAAAAAAM74BAAAAAAAAAAAAAADwv82/AQAAAAAA1L8BAAAAAAAAAAAAAADwvynCAQAAAAAAMMIBAAAAAAAAAAAAAADwvz3DAQAAAAAARMMBAAAAAAAAAAAAAADwv6/DAQAAAAAAtsMBAAAAAAAAAAAAAADwvwXEAQAAAAAADMQBAAAAAAAAAAAAAADwv7vFAQAAAAAAwsUBAAAAAAAAAAAAAADwv23HAQAAAAAAdMcBAAAAAAAAAAAAAADwv9LJAQAAAAAA2ckBAAAAAAAAAAAAAADwv0XLAQAAAAAATMsBAAAAAAAAAAAAAADwv77MAQAAAAAAxcwBAAAAAAAAAAAAAADwv4rNAQAAAAAAkc0BAAAAAAAAAAAAAADwv5vTAQAAAAAAotMBAAAAAAAAAAAAAADwvyfcAQAAAAAALtwBAAAAAAAAAAAAAADwvzvkAQAAAAAAROQBAAAAAAAAAAAAAADwv1DpAQAAAAAAWekBAAAAAAAAAAAAAADwvw",
								"scope": ""
							}
						},
						"selection":
						[
							[
								123973,
								123963
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 10,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 58875.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "v0/senseml-reference/7000 - deprecated-features/1000 - deprecated-key-value.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 917,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "v0/senseml-reference/7000 - deprecated-features/1100 - deprecated-page-filter.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 975,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "v0/senseml-reference/7000 - deprecated-features/1500 - deprecated-invoice.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8219,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "v0/senseml-reference/7000 - deprecated-features/2000 - deprecated-topic.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3796,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "v0/senseml-reference/7000 - deprecated-features/2100 - deprecated-table.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6634,
						"regions":
						{
						},
						"selection":
						[
							[
								230,
								230
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "v0/welcome/2000 - draft-getting-started-ai.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8909,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "v0/senseml-reference/5000 - preprocessors/index.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3782,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "f_project.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 257.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 592.0
	},
	"selected_group": 0,
	"settings":
	{
		"last_automatic_layout":
		[
			[
				0,
				0,
				1,
				1
			]
		]
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 285.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
